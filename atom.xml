<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序小牛</title>
  
  <subtitle>来了就随便看看，虽然没有什么好看的~~</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-21T02:15:02.785Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>coder-Man</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot自定义全局异常处理</title>
    <link href="http://example.com/2022/12/21/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2022/12/21/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2022-12-21T01:18:13.000Z</published>
    <updated>2022-12-21T02:15:02.785Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot自定义全局异常  如果可以统一一个全局异常，是什么错误就返回什么信息和code码给前端，前端更便于处理。</p><span id="more"></span><p>自定义全局异常主要以下步骤</p><ol><li>自定义异常接口类</li><li>自定义异常枚举类</li><li>自定义异常类</li><li>自定义异常处理类</li><li>自定义全局响应类</li></ol><h3 id="1-自定义异常接口类"><a href="#1-自定义异常接口类" class="headerlink" title="1. 自定义异常接口类"></a>1. 自定义异常接口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义全局异常类所需的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseError</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function">String <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自定义异常枚举类"><a href="#2-自定义异常枚举类" class="headerlink" title="2. 自定义异常枚举类"></a>2. 自定义异常枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.coder.lion.demo.config.error.BaseError;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年12月21日 9:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义异常枚举，实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BaseErrorEnum</span> <span class="keyword">implements</span> <span class="title">BaseError</span> </span>&#123;</span><br><span class="line">    SUCCESS(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;成功！&quot;</span>),</span><br><span class="line">    NOT_FOUND(<span class="string">&quot;404&quot;</span>,<span class="string">&quot;请求资源不存在&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    BaseErrorEnum(String code,String message)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-自定义异常类"><a href="#3-自定义异常类" class="headerlink" title="3. 自定义异常类"></a>3. 自定义异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">(BaseErrorEnum baseErrorEnum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(baseErrorEnum.getMessage());</span><br><span class="line">        <span class="keyword">this</span>.code = baseErrorEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = baseErrorEnum.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自定义异常处理类"><a href="#4-自定义异常处理类" class="headerlink" title="4. 自定义异常处理类"></a>4. 自定义异常处理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年12月21日 9:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理自定义异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BaseException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseResponse&lt;Object&gt; <span class="title">baseExceptionHandler</span><span class="params">(BaseException baseException)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;业务处理异常，原因是 &#123;&#125;&quot;</span>,baseException.getMessage());</span><br><span class="line">        <span class="keyword">return</span> RespGenerator.returnError(baseException.getCode(),baseException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestControllerAdvice注解是@ResponseBody和@ControllerAdvice的组合。</p><p>@ResponseBody注解：通常用来将java对象转成JSON对象，返回给前端JSON数据。<br>@ControllerAdvice注解：结合方法型注解@ExceptionHandler，用于捕获Controller中抛出的指定类型的异常，从而达到不同类型的异常区别处理的目的。<br> @ExceptionHandler注解统一处理某一类异常，从而能够减少代码重复率和复杂度，value值为什么异常类型，就处理什么异常类型的逻辑。</p><h3 id="5-封装的请求返回包装类"><a href="#5-封装的请求返回包装类" class="headerlink" title="5. 封装的请求返回包装类"></a>5. 封装的请求返回包装类</h3><p>  BaseResponse类和RespGenerator类都是属于规范方法返回值结构体的类，也有利于一致化后端所有接口的返回结构，方便前端读取所需要的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年09月29日 22:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 统一响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接口信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 接口数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseResponse</span><span class="params">(String code, String message, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseResponse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年09月29日 22:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespGenerator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口调用成功时出参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 接口返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseResponse <span class="title">returnOK</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse(<span class="string">&quot;200&quot;</span>, <span class="string">&quot;接口调用成功!&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseResponse&lt;Object&gt; <span class="title">returnError</span><span class="params">(String code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse&lt;Object&gt;(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseResponse&lt;Object&gt; <span class="title">returnError</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse&lt;Object&gt;(<span class="string">&quot;-1&quot;</span>, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-演示效果"><a href="#6-演示效果" class="headerlink" title="6. 演示效果"></a>6. 演示效果</h3><p><img src="http://lzcoder.cn/image-20221221101142025.png" alt="image-20221221101142025"></p><p><img src="http://lzcoder.cn/image-20221221100733596.png" alt="image-20221221100733596"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringBoot自定义全局异常  如果可以统一一个全局异常，是什么错误就返回什么信息和code码给前端，前端更便于处理。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="实操" scheme="http://example.com/tags/%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot单元测试类编写</title>
    <link href="http://example.com/2022/12/20/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%B1%BB%E7%BC%96%E5%86%99/"/>
    <id>http://example.com/2022/12/20/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%B1%BB%E7%BC%96%E5%86%99/</id>
    <published>2022-12-20T07:24:04.000Z</published>
    <updated>2022-12-20T13:20:01.303Z</updated>
    
    <content type="html"><![CDATA[<p>基于springboot项目编写简单单元测试类</p><span id="more"></span><h1 id="1-编写简单单元测试类"><a href="#1-编写简单单元测试类" class="headerlink" title="1. 编写简单单元测试类"></a>1. 编写简单单元测试类</h1><ol><li>实用idea 生成测试类</li></ol><p><img src="http://lzcoder.cn/image-20221220152828884.png" alt="image-20221220152828884"></p><p><img src="http://lzcoder.cn/image-20221220153003683.png" alt="image-20221220153003683"></p><ol start="2"><li>编写代码：</li></ol><p><code>@SpringBootTest</code>：获取启动类，加载配置，寻找主配置启动类（被 @SpringBootApplication 注解的）</p><p><code>@RunWith(SpringRunner.class)</code>：让JUnit运行Spring的测试环境,获得Spring环境的上下文的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.demo.service.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coder.lion.CoderLionApplication;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = CoderLionApplication.class,webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITUserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ITUserService itUserService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        itUserService.getAllUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Assert-用法示例"><a href="#2-Assert-用法示例" class="headerlink" title="2.Assert 用法示例"></a>2.Assert 用法示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Assert.notNull(Object object, “object is required”) - 对象非空</span><br><span class="line">Assert.isTrue(Object object, “object must be <span class="keyword">true</span>”) - 对象必须为<span class="keyword">true</span></span><br><span class="line">Assert.notEmpty(Collection collection, “collection must not be empty”) - 集合非空</span><br><span class="line">Assert.hasLength(String text, “text must be specified”) - 字符不为<span class="keyword">null</span>且字符长度不为<span class="number">0</span></span><br><span class="line">Assert.hasText(String text, “text must not be empty”) - text 不为<span class="keyword">null</span>且必须至少包含一个非空格的字符</span><br><span class="line">Assert.isInstanceOf(Class clazz, Object obj, “clazz must be of type [clazz]”) - obj必须能被正确造型成为clazz 指定的类</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u011550710/article/details/76638893">参考：Springboot+Junit测试Http请求实例包括Get,Post,Put和Delete已及断言Assert的使用</a></p><p><a href="https://blog.csdn.net/neweastsun/article/details/80152756">参考：Spring Assert教程</a></p><p><a href="https://mp.weixin.qq.com/s/T8jDFRncLb6C0_tPsu88xA">插件：自动生成单元测试，太爽了！</a></p><h1 id="3-阿里开发文档-单元测试规范"><a href="#3-阿里开发文档-单元测试规范" class="headerlink" title="3.阿里开发文档_单元测试规范"></a>3.阿里开发文档_单元测试规范</h1><ol><li>【强制】好的单元测试必须遵守 AIR 原则。<br>说明：单元测试在线上运行时，感觉像空气（AIR）一样感觉不到，但在测试质量的保障上，却是非常关键<br>的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。<br>⚫ A：Automatic（自动化）<br>⚫ I：Independent（独立性）<br>⚫ R：Repeatable（可重复）</li><li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执<br>行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元<br>测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li><li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间<br>决不能互相调用，也不能依赖执行的先后次序。<br>反例：method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</li><li>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。<br>说明：单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部<br>环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。<br>正例：为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI<br>框架注入一个本地（内存）实现或者 Mock 实现。</li><li>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级<br>别，一般是方法级别。<br>说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，<br>那是集成测试的领域。</li><li>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。<br>说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</li><li>【强制】单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下。<br>说明：源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。</li><li>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都<br>要达到 100%<br>说明：在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元测<br>试。</li><li>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。<br>⚫ B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。<br>⚫ C：Correct，正确的输入，并得到预期的结果。<br>⚫ D：Design，与设计文档相结合，来编写单元测试。<br>⚫ E：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。</li><li>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或<br>者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<br>反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数<br>据并不符合业务插入规则，导致测试结果异常。</li><li>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对<br>单元测试产生的数据有明确的前后缀标识。<br>正例：在阿里巴巴企业智能事业部的内部单元测试中，使用 ENTERPRISE_INTELLIGENCE <em>UNIT_TEST</em><br>的前缀来标识单元测试相关代码。</li><li>【推荐】对于不可测的代码在适当的时机做必要的重构，使代码变得可测，避免为了达到测试<br>要求而书写不规范测试代码。</li><li>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆<br>盖所有测试用例（UC）。</li><li>【推荐】单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补<br>充单元测试用例。</li><li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：<br>⚫ 构造方法中做的事情过多。<br>⚫ 存在过多的全局变量和静态方法。<br>⚫ 存在过多的外部依赖。<br>⚫ 存在过多的条件语句。<br>说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li><li>【参考】不要对单元测试存在如下误解：<br>⚫ 那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。<br>⚫ 单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。<br>⚫ 单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。<br>⚫ 单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于springboot项目编写简单单元测试类&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="实操" scheme="http://example.com/tags/%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>数据库表设计</title>
    <link href="http://example.com/2022/12/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/12/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-12-20T05:51:34.000Z</published>
    <updated>2022-12-20T07:59:45.849Z</updated>
    
    <content type="html"><![CDATA[<p>系统中收集到用户的核心数据，为了安全性，我们一般会存储到数据库，比如：mysql，oracle等。</p><p>后端开发的日常工作，需要不断的建库和建表，来满足业务需求。</p><p>通常情况下，建库的频率比建表要低很多，所以，我们这篇文章主要讨论建表相关的内容。</p><p>如果我们在建表的时候不注意细节，等后面系统上线之后，表的维护成本变得非常高，而且很容易踩坑。</p><span id="more"></span><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_account_info</span><br><span class="line">(</span><br><span class="line">    id                     <span class="type">bigint</span> unsigned auto_increment comment <span class="string">&#x27;主键&#x27;</span> ,</span><br><span class="line">    acccount              <span class="type">varchar</span>(<span class="number">50</span>)  <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;身份/用户名&#x27;</span>,</span><br><span class="line">    passworld             <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;凭证/密码&#x27;</span>,</span><br><span class="line">    login_type             tinyint      <span class="keyword">default</span> <span class="number">0</span>                     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;登录认证类型.0:本系统,2:微信登录&#x27;</span>,</span><br><span class="line">    login_id               <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;第三方登录的Id&#x27;</span>,</span><br><span class="line">    user_info_id           <span class="type">bigint</span>          <span class="keyword">default</span> <span class="number">0</span>                     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户信息Id&#x27;</span>,</span><br><span class="line">    principal_valid_time   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span>     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;身份/用户有效时间&#x27;</span>,</span><br><span class="line">    principal_expire_time  datetime     <span class="keyword">default</span> <span class="string">&#x27;9999-12-31 23:59:59&#x27;</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;身份/用户失效时间&#x27;</span>,</span><br><span class="line">    credential_expire_time datetime     <span class="keyword">default</span> <span class="string">&#x27;9999-12-31 23:59:59&#x27;</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;凭证/密码失效时间&#x27;</span>,</span><br><span class="line">    last_login_time        datetime                                   <span class="keyword">null</span> comment <span class="string">&#x27;最后登录时间&#x27;</span>,</span><br><span class="line">    status                 tinyint      <span class="keyword">default</span> <span class="number">1</span>                     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;有效状态(1-有效,0-失效)&#x27;</span>,</span><br><span class="line">    create_time            datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span>     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    create_user_id         <span class="type">int</span>          <span class="keyword">default</span> <span class="number">0</span>                     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建人ID&#x27;</span>,</span><br><span class="line">    create_user_name       <span class="type">varchar</span>(<span class="number">30</span>)  <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建人名称&#x27;</span>,</span><br><span class="line">    update_time            datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span>     <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> update <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    update_user_id         <span class="type">int</span>          <span class="keyword">default</span> <span class="number">0</span>                     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改人ID&#x27;</span>,</span><br><span class="line">    update_user_name       <span class="type">varchar</span>(<span class="number">30</span>)  <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改人名称&#x27;</span>,</span><br><span class="line">    is_deleted             tinyint      <span class="keyword">default</span> <span class="number">0</span>                     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;删除标记 0未删除 1已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `idx_principal`(`principal`) <span class="keyword">USING</span> BTREE </span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_bin comment <span class="string">&#x27;用户账号信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="一-阿里开发文档-建表规约"><a href="#一-阿里开发文档-建表规约" class="headerlink" title="(一) 阿里开发文档 建表规约"></a>(一) 阿里开发文档 建表规约</h3><ol><li><strong>【强制】</strong>表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是，0 表示否）。</li></ol><p>说明：任何字段如果为非负数，必须是 unsigned。</p><p>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在<resultMap>设置从 is_xxx 到</p><p>Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的命名方式是为了明确其取值含</p><p>义与取值范围。</p><p>正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p><ol start="2"><li><strong>【强制】</strong>表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只</li></ol><p>出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><p>说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、</p><p>字段名，都不允许出现任何大写字母，避免节外生枝。</p><p>​            正例：aliyun_admin，rdc_config，level3_name</p><p>​            反例：AliyunAdmin，rdcConfig，level_3_name</p><ol start="3"><li><strong>【强制】</strong>表名不使用复数名词。</li></ol><p>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合</p><p>表达习惯。</p><ol start="4"><li><p><strong>【强制】</strong>禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p></li><li><p><strong>【强制】</strong>主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p></li></ol><p>说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p><ol start="6"><li><strong>【强制】</strong>小数类型为 decimal，禁止使用 float 和 double。</li></ol><p>说明：在存储的时候，float 和 double 都存在精度损失的问题，很可能在比较值的时候，得到不正确的</p><p>结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数并分开存储。</p><ol start="7"><li><p><strong>【强制】</strong>如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p></li><li><p><strong>【强制】</strong>varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度</p></li></ol><p>大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效</p><p>率。</p><ol start="9"><li><strong>【强制】</strong>表必备三字段：id, create_time, update_time。</li></ol><p>说明：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。create_time, update_time</p><p>的类型均为 datetime 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新。</p><p>10.【推荐】表的命名最好是遵循“业务名称_表的作用”。</p><p>正例：alipay_task / force_project / trade_config</p><p>11.【推荐】库名与应用名称尽量一致。</p><p>12.【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p><p>13.【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：</p><p>​        1） 不是频繁修改的字段。</p><p>​        2） 不是唯一索引的字段。</p><pre><code>     3） 不是 varchar 超长字段，更不能是 text 字段。</code></pre><p> 正例：各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。</p><p>14.【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p><p>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p><p>15.【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</p><p>正例：无符号值可以避免误存负数，且扩大了表示范围。</p><p><img src="http://lzcoder.cn/image-20221220103833871.png" alt="image-20221220103833871"></p><p>接着跟大家一起聊聊数据库建表的15个小技巧，同时做一个梳理和总结，希望能对大家有所帮助。</p><img src="http://lzcoder.cn/image-20221220095117751.png" alt="image-20221220095117751" style="zoom:67%;" /><h2 id="1-名字"><a href="#1-名字" class="headerlink" title="1.名字"></a>1.名字</h2><p>建表的时候，给<code>表</code>、<code>字段</code>和<code>索引</code>起个好名字，真的太重要了。</p><h3 id="1-1-见名知意"><a href="#1-1-见名知意" class="headerlink" title="1.1 见名知意"></a>1.1 见名知意</h3><p>名字就像<code>表</code>、<code>字段</code>和<code>索引</code>的一张脸，可以给人留下第一印象。</p><p>好的名字，言简意赅，见名知意，让人心情愉悦，能够提高沟通和维护成本。</p><p>坏的名字，模拟两可，不知所云。而且显得杂乱无章，看得让人抓狂。</p><p><strong>反例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名称字段定义成：yong_hu_ming、用户_name、name、user_name_123456789</span><br></pre></td></tr></table></figure><p>你看了可能会一脸懵逼，这是什么骚操作？</p><p><strong>正例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名称字段定义成：user_name</span><br></pre></td></tr></table></figure><blockquote><p>温馨提醒一下，名字也不宜过长，尽量控制在<code>30</code>个字符以内。</p></blockquote><h3 id="1-2-大小写"><a href="#1-2-大小写" class="headerlink" title="1.2 大小写"></a>1.2 大小写</h3><p>名字可以用<code>小写字母</code>，因为从视觉上，小写字母更容易让人读懂。</p><p><strong>反例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名：PRODUCT_NAME、PRODUCT_name</span><br></pre></td></tr></table></figure><p>全部大写，看起来有点不太直观。而一部分大写，一部分小写，让人看着更不爽。</p><p><strong>正例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名：product_name</span><br></pre></td></tr></table></figure><p>名字还是使用全小写字母，看着更舒服。</p><h3 id="1-3-分隔符"><a href="#1-3-分隔符" class="headerlink" title="1.3 分隔符"></a>1.3 分隔符</h3><p>很多时候，名字为了让人好理解，有可能会包含多个单词。</p><p>那么，多个单词间的<code>分隔符</code>该用什么呢？</p><p><strong>反例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名：productname、productName、product name、product@name</span><br></pre></td></tr></table></figure><p>单词间没有分隔，或者单词间用驼峰标识，或者单词间用空格分隔，或者单词间用@分隔，这几种方式都不太建议。</p><p><strong>正例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名：product_name</span><br></pre></td></tr></table></figure><p>可以考虑在单词间用<code>_</code>分隔。</p><h3 id="1-4-表名"><a href="#1-4-表名" class="headerlink" title="1.4 表名"></a>1.4 表名</h3><p>对于表名，在言简意赅，见名知意的基础之上，建议带上<code>业务前缀</code>。</p><p>如果是订单相关的业务表，可以在表名前面加个前缀：<code>order_</code>。</p><p>例如：order_pay、order_pay_detail等。</p><p>如果是商品相关的业务表，可以在表名前面加个前缀：<code>product_</code>。</p><p>例如：product_spu，product_sku等。</p><p>这样做的好处是为了方便归类，把相同业务的表，可以非常快速的聚集到一起。</p><p>另外，还有有个好处是，如果哪天有非订单的业务，比如：金融业务，也需要建一个名字叫做pay的表，可以取名：finance_pay，就能非常轻松的区分。</p><p>这样就不会出现<code>同名表</code>的情况。</p><h3 id="1-5-字段名称"><a href="#1-5-字段名称" class="headerlink" title="1.5 字段名称"></a>1.5 字段名称</h3><p><code>字段名称</code>是开发人员发挥空间最大，但也最容易发生混乱的地方。</p><p>比如有些表，使用flag表示状态，另外的表用status表示状态。</p><p>可以统一一下，使用status表示状态。</p><p>如果一个表使用了另一个表的主键，可以在另一张表的名后面，加<code>_id</code>或<code>_sys_no</code>，例如：</p><p>在product_sku表中有个字段，是product_spu表的主键，这时候可以取名：product_spu_id或product_spu_sys_no。</p><p>还有创建时间，可以统一成：create_time，修改时间统一成：update_time。</p><p>删除状态固定为：delete_status。</p><p>其实还有很多公共字段，在不同的表之间，可以使用全局统一的命名规则，定义成相同的名称，以便于大家好理解。</p><h3 id="1-6-索引名"><a href="#1-6-索引名" class="headerlink" title="1.6 索引名"></a>1.6 索引名</h3><p>在数据库中，索引有很多种，包括：主键、普通索引、唯一索引、联合索引等。</p><p>主键索引名为 pk_字段名；</p><p>唯一索引名为 uk_字段名；</p><p>普通索引名则为 idx_字段名。</p><p>说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p><h2 id="2-字段类型"><a href="#2-字段类型" class="headerlink" title="2.字段类型"></a>2.字段类型</h2><p>在设计表时，我们在选择<code>字段类型</code>时，可发挥空间很大。</p><p>时间格式的数据有：date、datetime和timestamp等等可以选择。</p><p>字符类型的数据有：varchar、char、text等可以选择。</p><p>数字类型的数据有：int、bigint、smallint、tinyint等可以选择。</p><p>说实话，选择很多，有时候是一件好事，也可能是一件坏事。</p><p>如何选择一个<code>合适</code>的字段类型，变成了我们不得不面对的问题。</p><p>如果字段类型选大了，比如：原本只有1-10之间的10个数字，结果选了<code>bigint</code>，它占<code>8</code>个字节。</p><p>其实，1-10之间的10个数字，每个数字<code>1</code>个字节就能保存，选择<code>tinyint</code>更为合适。</p><p>这样会白白浪费7个字节的空间。</p><p>如果字段类型择小了，比如：一个18位的id字段，选择了<code>int</code>类型，最终数据会保存失败。</p><p>所以选择一个合适的字段类型，还是非常重要的一件事情。</p><p>以下原则可以参考一下：</p><ol><li>尽可能选择占用存储空间小的字段类型，在满足正常业务需求的情况下，从小到大，往上选。</li><li>如果字符串长度固定，或者差别不大，可以选择char类型。如果字符串长度差别较大，可以选择varchar类型。</li><li>是否字段，可以选择bit类型。</li><li>枚举字段，可以选择tinyint类型。</li><li>主键字段，可以选择bigint类型。</li><li>金额字段，可以选择decimal类型。</li><li>时间字段，可以选择timestamp或datetime类型。</li></ol><h2 id="3-字段长度"><a href="#3-字段长度" class="headerlink" title="3.字段长度"></a>3.字段长度</h2><p>前面我们已经定义好了<code>字段名称</code>，选择了合适的<code>字段类型</code>，接下来，需要重点关注的是<code>字段长度</code>了。</p><p>比如：varchar(20)，biginit(20)等。</p><p>那么问题来了，<code>varchar</code>代表的是<code>字节</code>长度，还是<code>字符</code>长度呢？</p><p>答：在mysql中除了<code>varchar</code>和<code>char</code>是代表<code>字符</code>长度之外，其余的类型都是代表<code>字节</code>长度。</p><p>biginit(n) 这个<code>n</code>表示什么意思呢？</p><p>假如我们定义的字段类型和长度是：bigint(4)，bigint实际长度是<code>8</code>个字节。</p><p>现在有个数据a=1，a显示4个字节，所以在不满4个字节时前面填充0（前提是该字段设置了zerofill属性），比如：0001。</p><p>当满了4个字节时，比如现在数据是a=123456，它会按照实际的长度显示，比如：123456。</p><p>但需要注意的是，有些mysql客户端即使满了4个字节，也可能只显示4个字节的内容，比如会显示成：1234。</p><p>所以bigint(4)，这里的4表示显示的长度为4个字节，实际长度还是占8个字节。</p><h2 id="4-字段个数"><a href="#4-字段个数" class="headerlink" title="4.字段个数"></a>4.字段个数</h2><p>我们在建表的时候，一定要对<code>字段个数</code>做一些限制。</p><p>我之前见过有人创建的表，有几十个，甚至上百个字段，表中保存的数据非常大，查询效率很低。</p><p>如果真有这种情况，可以将一张<code>大表</code>拆成多张<code>小表</code>，这几张表的主键相同。</p><p>建议每表的字段个数，不要超过<code>20</code>个。</p><h2 id="5-主键"><a href="#5-主键" class="headerlink" title="5. 主键"></a>5. 主键</h2><p>在创建表时，一定要创建<code>主键</code>。</p><p>因为主键自带了主键索引，相比于其他索引，主键索引的查询效率最高，因为它不需要回表。</p><p>此外，主键还是天然的<code>唯一索引</code>，可以根据它来判重。</p><p>在<code>单个</code>数据库中，主键可以通过<code>AUTO_INCREMENT</code>，设置成<code>自动增长</code>的。</p><p>但在<code>分布式</code>数据库中，特别是做了分库分表的业务库中，主键最好由外部算法(比如：雪花算法）生成，它能够保证生成的id是全局唯一的。</p><p>除此之外，主键建议保存跟业务无关的值，减少业务耦合性，方便今后的扩展。</p><p>不过我也见过，有些一对一的表关系，比如：用户表和用户扩展表，在保存数据时是一对一的关系。</p><p>这样，用户扩展表的主键，可以直接保存用户表的主键。</p><h2 id="6-存储引擎"><a href="#6-存储引擎" class="headerlink" title="6.存储引擎"></a>6.存储引擎</h2><p>在<code>mysql5.1</code>以前的版本，默认的存储引擎是<code>myslam</code>，而<code>mysql5.1</code>以后的版本，默认的存储引擎变成了<code>innodb</code>。</p><p>之前我们还在创建表时，还一直纠结要选哪种存储引擎？</p><p><code>myslam</code>的索引和数据分开存储，而有利于查询，但它不支持事务和外键等功能。</p><p>而<code>innodb</code>虽说查询性能，稍微弱一点，但它支持事务和外键等，功能更强大一些。</p><p>以前的建议是：读多写少的表，用myslam存储引擎。而写多读多的表，用innodb。</p><p>但虽说mysql对innodb存储引擎性能的不断优化，现在myslam和innodb查询性能相差已经越来越小。</p><p><strong>所以，建议我们在使用<code>mysql8</code>以后的版本时，直接使用默认的<code>innodb</code>存储引擎即可，无需额外修改存储引擎。</strong></p><h2 id="7-NOT-NULL"><a href="#7-NOT-NULL" class="headerlink" title="7. NOT NULL"></a>7. NOT NULL</h2><p>在创建字段时，需要选择该字段是否允许为<code>NULL</code>。</p><p>我们在定义字段时，应该尽可能明确该字段<code>NOT NULL</code>。</p><p>为什么呢？</p><p>我们主要以innodb存储引擎为例，myslam存储引擎没啥好说的。</p><p>主要有以下原因：</p><ol><li>在innodb中，需要额外的空间存储null值，需要占用更多的空间。</li><li>null值可能会导致索引失效。</li><li>null值只能用<code>is null</code>或者<code>is not null</code>判断，用<code>=号</code>判断永远返回false。</li></ol><p>因此，建议我们在定义字段时，能定义成NOT NULL，就定义成NOT NULL。</p><p>但如果某个字段直接定义成NOT NULL，万一有些地方忘了给该字段写值，就会<code>insert</code>不了数据。</p><p>这也算合理的情况。</p><p>但有一种情况是，系统有新功能上线，新增了字段。上线时一般会先执行sql脚本，再部署代码。</p><p>由于老代码中，不会给新字段赋值，则insert数据时，也会报错。</p><p>由此，非常有必要给NOT NULL的字段设置默认值，特别是后面新增的字段。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table product_sku add column  brand_id int(10) not null default 0;</span><br></pre></td></tr></table></figure><h2 id="8-外键"><a href="#8-外键" class="headerlink" title="8.外键"></a>8.外键</h2><p>在mysql中，是存在<code>外键</code>的。</p><p>外键存在的主要作用是：保证数据的<code>一致性</code>和<code>完整性</code>。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table class (</span><br><span class="line">  id int(10) primary key auto_increment,</span><br><span class="line">  cname varchar(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>有个班级表class。</p><p>然后有个student表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">  id int(10) primary key auto_increment,</span><br><span class="line">  name varchar(15) not null,</span><br><span class="line">  gender varchar(10) not null,</span><br><span class="line">  cid int,</span><br><span class="line">  foreign key(cid) references class(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中student表中的cid字段，保存的class表的id，这时通过<code>foreign key</code>增加了一个外键。</p><p>这时，如果你直接通过student表的id删除数据，会报异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a foreign key constraint fails</span><br></pre></td></tr></table></figure><p>必须要先删除class表对于的cid那条数据，再删除student表的数据才行，这样能够保证数据的一致性和完整性。</p><blockquote><p>顺便说一句：只有存储引擎是innodb时，才能使用外键。</p></blockquote><p>如果只有两张表的关联还好，但如果有十几张表都建了外键关联，每删除一次主表，都需要同步删除十几张子表，很显然性能会非常差。</p><p><strong>因此，互联网系统中，一般建议不使用外键。因为这类系统更多的是为了性能考虑，宁可牺牲一点数据一致性和完整性。</strong></p><p><strong>除了<code>外键</code>之外，<code>存储过程</code>和<code>触发器</code>也不太建议使用，他们都会影响性能。</strong></p><h2 id="9-索引"><a href="#9-索引" class="headerlink" title="9. 索引"></a>9. 索引</h2><p>在建表时，除了指定<code>主键索引</code>之外，还需要创建一些<code>普通索引</code>。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table product_sku(</span><br><span class="line">  id int(10) primary key auto_increment,</span><br><span class="line">  spu_id int(10) not null,</span><br><span class="line">  brand_id int(10) not null,</span><br><span class="line">  name varchar(15) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在创建商品表时，使用spu_id（商品组表）和brand_id（品牌表）的id。</p><p>像这类保存其他表id的情况，可以增加普通索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table product_sku (</span><br><span class="line">  id int(10) primary key auto_increment,</span><br><span class="line">  spu_id int(10) not null,</span><br><span class="line">  brand_id int(10) not null,</span><br><span class="line">  name varchar(15) not null,</span><br><span class="line">  KEY `ix_spu_id` (`spu_id`) USING BTREE,</span><br><span class="line">  KEY `ix_brand_id` (`brand_id`) USING BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>后面查表的时候，效率更高。</p><p>但索引字段也不能建的太多，可能会影响保存数据的效率，因为索引需要额外的存储空间。</p><p>建议单表的索引个数不要超过：<code>5</code>个。</p><p>如果在建表时，发现索引个数超过5个了，可以删除部分<code>普通索引</code>，改成<code>联合索引</code>。</p><p>顺便说一句：在创建联合索引的时候，需要使用注意<code>最左匹配原则</code>，不然，建的联合索引效率可能不高。</p><p>对于数据重复率非常高的字段，比如：状态，不建议单独创建普通索引。因为即使加了索引，如果mysql发现<code>全表扫描</code>效率更高，可能会导致索引失效。</p><h2 id="10-时间字段"><a href="#10-时间字段" class="headerlink" title="10.时间字段"></a>10.时间字段</h2><p><code>时间字段</code>的类型，我们可以选择的范围还是比较多的，目前mysql支持：date、datetime、timestamp、varchar等。</p><p><code>varchar</code>类型可能是为了跟接口保持一致，接口中的时间类型是String。</p><p>但如果哪天我们要通过时间范围查询数据，效率会非常低，因为这种情况没法走索引。</p><p><code>date</code>类型主要是为了保存<code>日期</code>，比如：2020-08-20，不适合保存<code>日期和时间</code>，比如：2020-08-20 12:12:20。</p><p>而<code>datetime</code>和<code>timestamp</code>类型更适合我们保存<code>日期和时间</code>。</p><p>但它们有略微区别。</p><ul><li><code>timestamp</code>：用4个字节来保存数据，它的取值范围为<code>1970-01-01 00:00:01</code> UTC ~ <code>2038-01-19 03:14:07</code>。此外，它还跟时区有关。</li><li><code>datetime</code>：用8个字节来保存数据，它的取值范围为<code>1000-01-01 00:00:00</code> ~ <code>9999-12-31 23:59:59</code>。它跟时区无关。</li></ul><p>优先推荐使用<code>datetime</code>类型保存日期和时间，可以保存的时间范围更大一些。</p><blockquote><p>温馨提醒一下，在给时间字段设置默认值时，建议不要设置成：<code>0000-00-00 00:00:00</code>，不然查询表时可能会因为转换不了，而直接报错。</p></blockquote><h2 id="11-金额字段"><a href="#11-金额字段" class="headerlink" title="11.金额字段"></a>11.金额字段</h2><p>mysql中有多个字段可以表示浮点数：float、double、decimal等。</p><p>而<code>float</code>和<code>double</code>可能会丢失精度，因此推荐大家使用<code>decimal</code>类型保存金额。</p><p>一般我们是这样定义浮点数的：decimal(m,n)。</p><p>其中<code>n</code>是指<code>小数</code>的长度，而<code>m</code>是指<code>整数加小数</code>的总长度。</p><p>假如我们定义的金额类型是这样的：decimal(10,2)，则表示整数长度是8位，并且保留2位小数。</p><h2 id="12-唯一索引"><a href="#12-唯一索引" class="headerlink" title="12.唯一索引"></a>12.唯一索引</h2><p><code>唯一索引</code>在我们实际工作中，使用频率相当高。</p><p>你可以给单个字段，加唯一索引，比如：组织机构code。</p><p>也可以给多个字段，加一个联合的唯一索引，比如：分类编号、单位、规格等。</p><p>单个的唯一索引还好，但如果是联合的唯一索引，字段值出现null时，则唯一性约束可能会失效。</p><blockquote><p>创建唯一索引时，相关字段一定不能包含null值，否则唯一性会失效。</p></blockquote><h2 id="13-字符集"><a href="#13-字符集" class="headerlink" title="13.字符集"></a>13.字符集</h2><p>mysql中支持的<code>字符集</code>有很多，常用的有：latin1、utf-8、utf8mb4、GBK等。</p><p>这4种字符集情况如下：<img src="http://lzcoder.cn/640" alt="图片"></p><p><code>latin1</code>容易出现乱码问题，在实际项目中使用比较少。</p><p>而<code>GBK</code>支持中文，但不支持国际通用字符，在实际项目中使用也不多。</p><p>从目前来看，mysql的字符集使用最多的还是：<code>utf-8</code>和<code>utf8mb4</code>。</p><p>其中<code>utf-8</code>占用3个字节，比<code>utf8mb4</code>的4个字节，占用更小的存储空间。</p><p>但utf-8有个问题：即无法存储emoji表情，因为emoji表情一般需要4个字节。</p><p>由此，使用utf-8字符集，保存emoji表情时，数据库会直接报错。</p><p>所以，建议在建表时字符集设置成：<code>utf8mb4</code>，会省去很多不必要的麻烦。</p><h2 id="14-排序规则"><a href="#14-排序规则" class="headerlink" title="14. 排序规则"></a>14. 排序规则</h2><p>不知道，你关注过没，在mysql中创建表时，有个<code>COLLATE</code>参数可以设置。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `order` (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `code` varchar(20) COLLATE utf8mb4_bin NOT NULL,</span><br><span class="line">  `name` varchar(30) COLLATE utf8mb4_bin NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `un_code` (`code`),</span><br><span class="line">  KEY `un_code_name` (`code`,`name`) USING BTREE,</span><br><span class="line">  KEY `idx_name` (`name`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin</span><br></pre></td></tr></table></figure><p>它是用来设置<code>排序规则</code>的。</p><p>字符排序规则跟字符集有关，比如：字符集如果是<code>utf8mb4</code>，则字符排序规则也是以：<code>utf8mb4_</code>开头的，常用的有：<code>utf8mb4_general_ci</code>、<code>utf8mb4_bin</code>等。</p><p>其中utf8mb4_general_ci排序规则，对字母的大小写不敏感。说得更直白一点，就是不区分大小写。</p><p>而utf8mb4_bin排序规则，对字符大小写敏感，也就是区分大小写。</p><p>说实话，这一点还是非常重要的。</p><p>假如order表中现在有一条记录，name的值是大写的YOYO，但我们用小写的yoyo去查，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from order where name=&#x27;yoyo&#x27;;</span><br></pre></td></tr></table></figure><p>如果字符排序规则是utf8mb4_general_ci，则可以查出大写的YOYO的那条数据。</p><p>如果字符排序规则是utf8mb4_bin，则查不出来。</p><p>由此，字符排序规则一定要根据实际的业务场景选择，否则容易出现问题。</p><h2 id="15-大字段"><a href="#15-大字段" class="headerlink" title="15.大字段"></a>15.大字段</h2><p>我们在创建表时，对一些特殊字段，要额外关注，比如：<code>大字段</code>，即占用较多存储空间的字段。</p><p>比如：用户的评论，这就属于一个大字段，但这个字段可长可短。</p><p>但一般会对评论的总长度做限制，比如：最多允许输入500个字符。</p><p>如果直接定义成<code>text</code>类型，可能会浪费存储空间，所以建议将这类字段定义成<code>varchar</code>类型的存储效率更高。</p><p>当然，我还见过更大的字段，即该字段直接保存合同数据。</p><p>一个合同可能会占<code>几Mb</code>。</p><p>在mysql中保存这种数据，从系统设计的角度来说，本身就不太合理。</p><p>像合同这种非常大的数据，可以保存到<code>mongodb</code>中，然后在mysql的业务表中，保存mongodb表的id。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;系统中收集到用户的核心数据，为了安全性，我们一般会存储到数据库，比如：mysql，oracle等。&lt;/p&gt;
&lt;p&gt;后端开发的日常工作，需要不断的建库和建表，来满足业务需求。&lt;/p&gt;
&lt;p&gt;通常情况下，建库的频率比建表要低很多，所以，我们这篇文章主要讨论建表相关的内容。&lt;/p&gt;
&lt;p&gt;如果我们在建表的时候不注意细节，等后面系统上线之后，表的维护成本变得非常高，而且很容易踩坑。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用线程池</title>
    <link href="http://example.com/2022/12/15/SpringBoot%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://example.com/2022/12/15/SpringBoot%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2022-12-15T10:54:10.000Z</published>
    <updated>2022-12-19T09:17:36.723Z</updated>
    
    <content type="html"><![CDATA[<p>以往学习多线程总是很零碎，不写就忘，然后一段时间又要翻各种资料，就打算最近写一写多线程内容，当然自己可能了解的都是基础，记录的话呢还是准备以实战为主，理论为辅</p><span id="more"></span><h1 id="1、Java中创建线程池"><a href="#1、Java中创建线程池" class="headerlink" title="1、Java中创建线程池"></a>1、Java中创建线程池</h1><h2 id="一、-ThreadPoolExecutor类介绍"><a href="#一、-ThreadPoolExecutor类介绍" class="headerlink" title="一、 ThreadPoolExecutor类介绍"></a>一、 ThreadPoolExecutor类介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> corePoolSize 核心线程数 -&gt; 线程池中保持的线程数量,即使它们是空闲的也不会销毁,</span></span><br><span class="line"><span class="comment">     *        除非设置了&#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125;核心线程超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maximumPoolSize 最大线程数 -&gt; 线程池中允许接收的最大线程数量</span></span><br><span class="line"><span class="comment">     *        如果设定的数量比系统支持的线程数还要大时,会抛出OOM(OutOfMemoryError)异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keepAliveTime 最大存活时间 -&gt; 当前线程数大于核心线程数的时候,</span></span><br><span class="line"><span class="comment">     *        其他多余的线程接收新任务之前的最大等待时间,超过时间没有新任务就会销毁.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit &#123;<span class="doctag">@code</span> keepAliveTime&#125;最大存活时间的单位.eg:TimeUnit.SECONDS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workQueue 工作队列 -&gt; 保存任务直到任务被提交到线程池的线程中执行.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadFactory 线程工厂 -&gt; 当线程池需要创建线程得时候会从线程工厂获取新的实例.</span></span><br><span class="line"><span class="comment">     *        (自定义ThreadFactory可以跟踪线程池究竟何时创建了多少线程,也可以自定义线程的名称、</span></span><br><span class="line"><span class="comment">     *        组以及优先级等信息,甚至可以任性的将线程设置为守护线程.</span></span><br><span class="line"><span class="comment">     *        总之,自定义ThreadFactory可以更加自由的设置线程池中所有线程的状态。)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 当线程数量等于最大线程数并且工作队列已满的时候,再有新的任务添加进来就会进入这个handler,</span></span><br><span class="line"><span class="comment">     *        可以理解为设置拒绝策略（此处不清楚的可以看一下ThreadPoolExecutor中的execute方法的注释）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、ThreadPoolExecutor的执行流程如下："><a href="#二、ThreadPoolExecutor的执行流程如下：" class="headerlink" title="二、ThreadPoolExecutor的执行流程如下："></a>二、ThreadPoolExecutor的执行流程如下：</h2><p><img src="http://lzcoder.cn/image-20221215142602116.png" alt="image-20221215142602116"></p><p>1.主线程提交新任务到线程池<br>2.线程池判断当前线程池的线程数和核心线程数的大小,小于就新建线程处理请求;否则继续判断当前工作队列是否已满.<br>3.如果当前工作队列未满就将任务放到工作队列中;否则继续判断当前线程池的线程数和最大线程数的大小.<br>4.如果当前线程池的线程数小于最大线程数就新建线程处理请求;否则就调用RejectedExecutionHandler来做拒绝处理。</p><h2 id="三、jdk提供四种拒绝策略"><a href="#三、jdk提供四种拒绝策略" class="headerlink" title="三、jdk提供四种拒绝策略"></a>三、jdk提供四种拒绝策略</h2><h3 id="1-AbortPolicy"><a href="#1-AbortPolicy" class="headerlink" title="1. AbortPolicy"></a>1. AbortPolicy</h3><p>直接抛出RejectedExecutionException异常</p><h3 id="2-CallerRunsPolicy"><a href="#2-CallerRunsPolicy" class="headerlink" title="2. CallerRunsPolicy"></a>2. CallerRunsPolicy</h3><p>交由主线程执行</p><h3 id="3-DiscardOldestPolicy"><a href="#3-DiscardOldestPolicy" class="headerlink" title="3. DiscardOldestPolicy"></a>3. DiscardOldestPolicy</h3><p>抛弃工作队列中旧的任务,将新任务添加进队列;会导致被丢弃的任务无法再次被执行</p><h3 id="4-DiscardPolicy"><a href="#4-DiscardPolicy" class="headerlink" title="4. DiscardPolicy"></a>4. DiscardPolicy</h3><p>抛弃当前任务;会导致被抛弃的任务无法再次被执行</p><p><strong>当然你也可以自定义拒绝策略,只需要实现RejectedExecutionHandler接口即可</strong></p><h1 id="2、Spring中创建线程池"><a href="#2、Spring中创建线程池" class="headerlink" title="2、Spring中创建线程池"></a>2、Spring中创建线程池</h1><h2 id="一、ThreadPoolTaskExecutor类介绍"><a href="#一、ThreadPoolTaskExecutor类介绍" class="headerlink" title="一、ThreadPoolTaskExecutor类介绍"></a>一、ThreadPoolTaskExecutor类介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.scheduling.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolTaskExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object poolSizeMonitor = <span class="keyword">new</span> Object(); <span class="comment">// 线程池大小锁,保证获取的当前线程池大小的正确性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">1</span>; <span class="comment">// 核心线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = <span class="number">2147483647</span>; <span class="comment">// 最大线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds = <span class="number">60</span>; <span class="comment">// 最大存活时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity = <span class="number">2147483647</span>; <span class="comment">// 工作队列大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut = <span class="keyword">false</span>; <span class="comment">// 是否允许核心线程超时,false不允许</span></span><br><span class="line">    <span class="keyword">private</span> TaskDecorator taskDecorator; <span class="comment">// 围绕任务的调用设置一些执行上下文,或者为任务执行提供一些监视/统计</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPoolExecutor; <span class="comment">// java中的线程池创建类</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><strong>从源码中可以看出ThreadPoolTaskExecutor就是在java中ThreadPoolExecutor的基础上封装的</strong></p><h1 id="3、线程池使用示例"><a href="#3、线程池使用示例" class="headerlink" title="3、线程池使用示例"></a>3、线程池使用示例</h1><h2 id="一、使用ThreadPoolTaskExecutor"><a href="#一、使用ThreadPoolTaskExecutor" class="headerlink" title="一、使用ThreadPoolTaskExecutor"></a>一、使用ThreadPoolTaskExecutor</h2><ol><li>定义配置类：我们需要通过SpringBoot的配置类来配置线程池的Bean和对应的参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 允许使用异步方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">threadPoolTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor threadPoolTaskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 设置核心线程数</span></span><br><span class="line">        threadPoolTaskExecutor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 设置最大线程数</span></span><br><span class="line">        threadPoolTaskExecutor.setMaxPoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 设置工作队列大小</span></span><br><span class="line">        threadPoolTaskExecutor.setQueueCapacity(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 设置线程名称前缀</span></span><br><span class="line">        threadPoolTaskExecutor.setThreadNamePrefix(<span class="string">&quot;threadPoolTaskExecutor--&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置拒绝策略.当工作队列已满,线程数为最大线程数的时候,接收新任务抛出RejectedExecutionException异常</span></span><br><span class="line">        threadPoolTaskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">        <span class="comment">// 初始化线程池</span></span><br><span class="line">        threadPoolTaskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> threadPoolTaskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>调用方法 sevice</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  <span class="doctag">@Async</span>标注的方法，称之为异步方法；这些方法将在执行的时候，</span></span><br><span class="line"><span class="comment">  * 将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Async()</span> <span class="comment">// 参数为线程池配置时的方法名即对应的bean的id ①</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;start test thread&quot;</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">    log.info(<span class="string">&quot;end test thread&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coder.lion.CoderLionApplication;</span><br><span class="line"><span class="keyword">import</span> com.coder.lion.demo.service.ImportService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年12月15日 11:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 线程池测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = CoderLionApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ImportService importService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        importService.testThread();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="http://lzcoder.cn/image-20221215144417159.png" alt="image-20221215144417159"></p><p>从测试的结果可以清晰的看到sayHello方法是由我们定义的线程池中的线程执行的</p><p><strong>注意 因为显示名称长度限制的原因我们看到的是askExecutor–&gt;1,<br>但是通过在方法中打印当前线程的名字得知确实是我们设置的线程threadPoolTaskExecutor–&gt;1</strong></p><h2 id="二、使用ThreadPoolExecutor"><a href="#二、使用ThreadPoolExecutor" class="headerlink" title="二、使用ThreadPoolExecutor"></a>二、使用ThreadPoolExecutor</h2><p>在配置类中增加如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">myThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;创建线程池 -- myThreadPool&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置核心线程数</span></span><br><span class="line">    <span class="keyword">int</span> corePoolSize = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 设置最大线程数</span></span><br><span class="line">    <span class="keyword">int</span> maxPoolSize = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 设置工作队列大小</span></span><br><span class="line">    <span class="keyword">int</span> queueCapacity = <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">// 最大存活时间</span></span><br><span class="line">    <span class="keyword">long</span> keepAliveTime = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 设置线程名称前缀</span></span><br><span class="line">    String threadNamePrefix = <span class="string">&quot;myThreadPool--&gt;&quot;</span>;</span><br><span class="line">    <span class="comment">// 设置自定义拒绝策略.当工作队列已满,线程数为最大线程数的时候,接收新任务抛出RejectedExecutionException异常</span></span><br><span class="line">    RejectedExecutionHandler rejectedExecutionHandler = <span class="keyword">new</span> RejectedExecutionHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">&quot;自定义的RejectedExecutionHandler&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 自定义线程工厂</span></span><br><span class="line">    ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line">            thread.setName(threadNamePrefix + i);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 初始化线程池</span></span><br><span class="line">    ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maxPoolSize,</span><br><span class="line">                                                                   keepAliveTime, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(queueCapacity),</span><br><span class="line">                                                                   threadFactory, rejectedExecutionHandler);</span><br><span class="line">    <span class="keyword">return</span> threadPoolExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们在配置类中配置了两个线程池,如果我们想要指定使用其中一个线程池的需使用如下方式</p><p><strong>当未指明使用哪个线程池的时候会优先使用ThreadPoo        lTaskExecutor，当定义了多个或未定义ThreadPoolTaskExecutor时，默认使用的是SimpleAsyncTaskExecutor</strong></p><p>SimpleAsyncTaskExecutor：不是真的线程池，这个类不重用线程，每次调用都会创建一个新的线程。并发大的时候会产生严重的性能问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Async(&quot;myThreadPool&quot;)</span> <span class="comment">// 参数为线程池配置时的方法名即对应的bean的id ①</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;start test thread&quot;</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">    log.info(<span class="string">&quot;end test thread&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221215145144040.png" alt="image-20221215145144040"></p><h2 id="二、-自定义ThreadPoolTaskExecutor"><a href="#二、-自定义ThreadPoolTaskExecutor" class="headerlink" title="二、 自定义ThreadPoolTaskExecutor"></a>二、 自定义ThreadPoolTaskExecutor</h2><ol><li>创建 MyThreadPoolTaskExecutor</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.concurrent.ListenableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年12月15日 11:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义ThreadPoolTaskExecutor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPoolTaskExecutor</span> <span class="keyword">extends</span> <span class="title">ThreadPoolTaskExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(MyThreadPoolTaskExecutor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        logThreadPoolStatus();</span><br><span class="line">        <span class="keyword">super</span>.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">long</span> startTimeout)</span> </span>&#123;</span><br><span class="line">        logThreadPoolStatus();</span><br><span class="line">        <span class="keyword">super</span>.execute(task, startTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">        logThreadPoolStatus();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        logThreadPoolStatus();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListenableFuture&lt;?&gt; submitListenable(Runnable task) &#123;</span><br><span class="line">        logThreadPoolStatus();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.submitListenable(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ListenableFuture&lt;T&gt; <span class="title">submitListenable</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        logThreadPoolStatus();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.submitListenable(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在线程池运行的时候输出线程池的基本信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logThreadPoolStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;核心线程数:&#123;&#125;, 最大线程数:&#123;&#125;, 当前线程数: &#123;&#125;, 活跃的线程数: &#123;&#125;&quot;</span>,</span><br><span class="line">                    getCorePoolSize(), getMaxPoolSize(), getPoolSize(), getActiveCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以在自定义的ThreadPoolTaskExecutor中,输出一些线程池的当前状态,包括所有上面介绍的参数。</p></blockquote><ol start="2"><li>在配置类增加 使用 MyThreadPoolTaskExecutor 的 bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">myThreadPoolTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;创建线程池 -- myThreadPoolTaskExecutor&quot;</span>);</span><br><span class="line">    ThreadPoolTaskExecutor threadPoolTaskExecutor = <span class="keyword">new</span> MyThreadPoolTaskExecutor();</span><br><span class="line">    <span class="comment">// 设置核心线程数</span></span><br><span class="line">    threadPoolTaskExecutor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 设置最大线程数</span></span><br><span class="line">    threadPoolTaskExecutor.setMaxPoolSize(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 设置工作队列大小</span></span><br><span class="line">    threadPoolTaskExecutor.setQueueCapacity(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">// 设置线程名称前缀</span></span><br><span class="line">    threadPoolTaskExecutor.setThreadNamePrefix(<span class="string">&quot;myThreadPoolTaskExecutor--&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置拒绝策略.当工作队列已满,线程数为最大线程数的时候,接收新任务抛出RejectedExecutionException异常</span></span><br><span class="line">    threadPoolTaskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">    <span class="comment">// 初始化线程池</span></span><br><span class="line">    threadPoolTaskExecutor.initialize();</span><br><span class="line">    <span class="keyword">return</span> threadPoolTaskExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://my.oschina.net/MyoldTime/blog/3075650"><a href="https://my.oschina.net/MyoldTime/blog/3075650">Java 并发编程：线程池的使用</a></a></p><p><a href="https://blog.csdn.net/qq_24983911/article/details/94722569">参考二</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以往学习多线程总是很零碎，不写就忘，然后一段时间又要翻各种资料，就打算最近写一写多线程内容，当然自己可能了解的都是基础，记录的话呢还是准备以实战为主，理论为辅&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="实操" scheme="http://example.com/tags/%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合JWT增加token检验</title>
    <link href="http://example.com/2022/12/15/SpringBoot%E6%95%B4%E5%90%88JWT%E5%A2%9E%E5%8A%A0token%E6%A3%80%E9%AA%8C/"/>
    <id>http://example.com/2022/12/15/SpringBoot%E6%95%B4%E5%90%88JWT%E5%A2%9E%E5%8A%A0token%E6%A3%80%E9%AA%8C/</id>
    <published>2022-12-15T08:27:17.000Z</published>
    <updated>2022-12-20T13:20:01.313Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot项目整合JWT对拦截器放过的请求生成token，拦截的请求校验token。达到对接口校验拦截目的。</p><span id="more"></span><h3 id="1-增加配置"><a href="#1-增加配置" class="headerlink" title="1.增加配置"></a>1.增加配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-增加拦截器"><a href="#2-增加拦截器" class="headerlink" title="2.增加拦截器"></a>2.增加拦截器</h3><h4 id="1-web请求拦截器"><a href="#1-web请求拦截器" class="headerlink" title="1. web请求拦截器"></a>1. web请求拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.demo.config.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年12月20日 16:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> web请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenInterceptor tokenInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决跨域请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">//                .allowedOrigins(&quot;*&quot;)</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步请求配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.setTaskExecutor(<span class="keyword">new</span> ConcurrentTaskExecutor(Executors.newFixedThreadPool(<span class="number">3</span>)));</span><br><span class="line">        configurer.setDefaultTimeout(<span class="number">30000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置拦截器、拦截路径</span></span><br><span class="line"><span class="comment">     * 每次请求到拦截的路径，就会去执行拦截器中的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; excludePath = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//排除拦截，除了注册登录(此时还没token)，其他都拦截</span></span><br><span class="line">        excludePath.add(<span class="string">&quot;/userinfo/login&quot;</span>);  <span class="comment">//登录</span></span><br><span class="line">        excludePath.add(<span class="string">&quot;/userinfo/register&quot;</span>);     <span class="comment">//注册</span></span><br><span class="line">        excludePath.add(<span class="string">&quot;/doc.html&quot;</span>);     <span class="comment">//swagger</span></span><br><span class="line">        excludePath.add(<span class="string">&quot;/swagger-ui.html&quot;</span>);     <span class="comment">//swagger</span></span><br><span class="line">        excludePath.add(<span class="string">&quot;/swagger-resources/**&quot;</span>);     <span class="comment">//swagger</span></span><br><span class="line">        excludePath.add(<span class="string">&quot;/v2/api-docs&quot;</span>);     <span class="comment">//swagger</span></span><br><span class="line">        excludePath.add(<span class="string">&quot;/webjars/**&quot;</span>);     <span class="comment">//swagger</span></span><br><span class="line"><span class="comment">//        excludePath.add(&quot;/static/**&quot;);  //静态资源</span></span><br><span class="line"><span class="comment">//        excludePath.add(&quot;/assets/**&quot;);  //静态资源</span></span><br><span class="line">        registry.addInterceptor(tokenInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(excludePath);</span><br><span class="line">        WebMvcConfigurer.<span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注意：addInterceptors方法里面需要按自己情况进行修改，excludePath集合add的是需要放行的接口路径，前几章整合了swagger，所以此处需要放行swagger相关的路径，swagger-ui.html、doc.html、swagger-resources、等等，你再加上自己想要放行的接口路径即可，一般是首页请求的接口以及登录注册的接口（不需要进行token效验的接口）。</p><h4 id="2-token-拦截器"><a href="#2-token-拦截器" class="headerlink" title="2. token 拦截器"></a>2. token 拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.demo.config.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.coder.lion.demo.utils.TokenUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年12月20日 16:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> token 拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跨域请求会首先发一个option请求，直接返回正常状态并通过拦截器</span></span><br><span class="line">        <span class="keyword">if</span>(request.getMethod().equals(<span class="string">&quot;OPTIONS&quot;</span>))&#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> result= TokenUtils.verify(token);</span><br><span class="line">            <span class="keyword">if</span> (result)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;通过拦截器&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JSONObject json=<span class="keyword">new</span> JSONObject();</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token verify fail&quot;</span>);</span><br><span class="line">            json.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;500&quot;</span>);</span><br><span class="line">            response.getWriter().append(json.toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，未通过拦截器&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 还可以在此处检验用户存不存在等操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：此处token从request里面获取header里面的key值是token，你要根据自己的情况来，你在前端header里面传的token叫什么名称，这里就取什么名字。</strong> </p><h4 id="3-token-工具类"><a href="#3-token-工具类" class="headerlink" title="3. token 工具类"></a>3. token 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTCreationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> com.coder.lion.demo.model.entity.TUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年12月20日 16:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//token到期时间10小时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME= <span class="number">10</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line">    <span class="comment">//密钥盐</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_SECRET=<span class="string">&quot;ljdyaishijin**3nkjnj??&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(TUser user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String token=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date expireAt=<span class="keyword">new</span> Date(System.currentTimeMillis()+EXPIRE_TIME);</span><br><span class="line">            token = JWT.create()</span><br><span class="line">                    <span class="comment">//发行人</span></span><br><span class="line">                    .withIssuer(<span class="string">&quot;auth0&quot;</span>)</span><br><span class="line">                    <span class="comment">//存放数据</span></span><br><span class="line">                    .withClaim(<span class="string">&quot;username&quot;</span>,user.getUsername())</span><br><span class="line">                    <span class="comment">//过期时间</span></span><br><span class="line">                    .withExpiresAt(expireAt)</span><br><span class="line">                    .sign(Algorithm.HMAC256(TOKEN_SECRET));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException| JWTCreationException je) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">verify</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建token验证器</span></span><br><span class="line">            JWTVerifier jwtVerifier=JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(<span class="string">&quot;auth0&quot;</span>).build();</span><br><span class="line">            DecodedJWT decodedJWT=jwtVerifier.verify(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;认证通过：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;username: &quot;</span> + decodedJWT.getClaim(<span class="string">&quot;username&quot;</span>).asString());</span><br><span class="line">            System.out.println(<span class="string">&quot;过期时间：      &quot;</span> + decodedJWT.getExpiresAt());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException | JWTVerificationException e) &#123;</span><br><span class="line">            <span class="comment">//抛出错误即为验证不通过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：此处到期时间可以自定义按情况进行设置，1000是1秒。此处token的生成方法以及效验方法可以根据具体情况进行更改，生成token1是使用的jwt，此处验证方法存在一个用户有多个token的情况（可以同时多次登陆同一账号，重新请求token之后，前一次的token只要没有过期也能使用。），可以整合redis后进行改造（后面会讲到），可以达到一个用户只有一个token的效果（重新请求token之后，前一次的token即使没有过期也不能使用。）</p><h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h3><ol><li>未携带token，或token不正确 拦截器拦截，请求失败</li></ol><p><img src="http://lzcoder.cn/image-20221220170539694.png" alt="image-20221220170539694"></p><ol start="2"><li>使用web拦截器放开的接口，获取token</li></ol><p><img src="http://lzcoder.cn/image-20221220170800574.png" alt="image-20221220170800574"></p><ol start="3"><li>使用获取的token重新请求接口</li></ol><p><img src="http://lzcoder.cn/image-20221220170840273.png" alt="image-20221220170840273"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringBoot项目整合JWT对拦截器放过的请求生成token，拦截的请求校验token。达到对接口校验拦截目的。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="实操" scheme="http://example.com/tags/%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Redis使用</title>
    <link href="http://example.com/2022/12/15/SpringBoot%E6%95%B4%E5%90%88Redis%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/12/15/SpringBoot%E6%95%B4%E5%90%88Redis%E4%BD%BF%E7%94%A8/</id>
    <published>2022-12-15T08:16:02.000Z</published>
    <updated>2022-12-21T01:06:04.551Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>SpringBoot整合redis，用redis存储token，实现一个用户只保存一个token，登录接口再次获取一个新的token后，前一个token则无法使用，解决一个用户可以多次登录的问题。</p></li><li><p>实现用户登录3次就锁定用户账户，无法再请求登录接口。</p></li></ol><span id="more"></span><h3 id="1-增加配置文件"><a href="#1-增加配置文件" class="headerlink" title="1. 增加配置文件"></a>1. 增加配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">99</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lzrm</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">XX.XX.XX.XX</span></span><br><span class="line">    <span class="attr">post:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h3 id="2-redis工具类"><a href="#2-redis工具类" class="headerlink" title="2.redis工具类"></a>2.redis工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存,并设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, String value, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value, timeout, unit);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">final</span> String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().getAndSet(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-改造之前的拦截器，从redis中获取"><a href="#3-改造之前的拦截器，从redis中获取" class="headerlink" title="3.改造之前的拦截器，从redis中获取"></a>3.改造之前的拦截器，从redis中获取</h3><p><img src="http://lzcoder.cn/image-20221220174953530.png" alt="image-20221220174953530"></p><h3 id="4-改造登录实现类"><a href="#4-改造登录实现类" class="headerlink" title="4. 改造登录实现类"></a>4. 改造登录实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;HashMap&gt; <span class="title">login</span><span class="params">(String userName, String passWord)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//包装token</span></span><br><span class="line">    TUser user = <span class="keyword">new</span> TUser();</span><br><span class="line">    user.setUsername(userName);</span><br><span class="line">    user.setPassword(passWord);</span><br><span class="line">    <span class="comment">//省去校验用户密码等逻辑</span></span><br><span class="line">    String token= TokenUtils.sign(user);</span><br><span class="line">    redisUtils.set(token,userName,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">    HashMap&lt;String,Object&gt; hs=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    hs.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">    <span class="keyword">return</span> RespGenerator.returnOK(hs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-验证效果"><a href="#5-验证效果" class="headerlink" title="5.验证效果"></a>5.验证效果</h3><ol><li>登录时，将token和有效时间存入redis</li></ol><p><img src="http://lzcoder.cn/image-20221220174801967.png" alt="image-20221220174801967"></p><ol start="2"><li>当redis中存在未过期的token数据时，通过拦截器</li></ol><p><img src="http://lzcoder.cn/image-20221220174846383.png" alt="image-20221220174846383"></p>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SpringBoot整合redis，用redis存储token，实现一个用户只保存一个token，登录接口再次获取一个新的token后，前一个token则无法使用，解决一个用户可以多次登录的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现用户登录3次就锁定用户账户，无法再请求登录接口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="实操" scheme="http://example.com/tags/%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch学习与实用</title>
    <link href="http://example.com/2022/12/15/elasticsearch%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E7%94%A8/"/>
    <id>http://example.com/2022/12/15/elasticsearch%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E7%94%A8/</id>
    <published>2022-12-15T02:27:42.000Z</published>
    <updated>2022-12-20T07:52:07.241Z</updated>
    
    <content type="html"><![CDATA[<p>学习springboot整合ElasticSearch 7.X版本并通过小demo实现基本的增删改查</p><span id="more"></span><ol><li>引入依赖</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">http://xx.XX.XX.XX:9200/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>新增一些实体类、to类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String station;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;user_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoTO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String station;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>实用es新增用户</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建一个 elasticsearch 持久层接口，类似MP,内置了 es 增删改查方法</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITUserEsSevice</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">UserInfoTO</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义swagger接口</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;新增用户&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/saveUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> TUser tUser)</span></span>&#123;</span><br><span class="line">    itUserService.saveUser(tUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.实现新增接口</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ITUserEsSevice itUserEsSevice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(TUser tUser)</span> </span>&#123;</span><br><span class="line">    UserInfoTO userInfoTO = <span class="keyword">new</span> UserInfoTO();</span><br><span class="line">    BeanUtils.copyProperties(tUser,userInfoTO);</span><br><span class="line">    <span class="comment">//保存到Es上</span></span><br><span class="line">    <span class="comment">// itUserEsSevice.save(userInfoTO);</span></span><br><span class="line">    itUserEsSevice.delete(userInfoTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/smilehappiness/article/details/118466378">参考一：Linux环境下安装Elasticsearch</a></p><p><a href="https://blog.csdn.net/qq_29917503/article/details/126768884">参考二：Linux安装Kibana详细教程</a></p><p><a href="https://blog.csdn.net/weixin_56995925/article/details/123873580">参考三：springboot整合ElasticSearch实战</a></p><p><a href="https://blog.csdn.net/m0_62866192/article/details/121765083">参考四：Spring Data Elasticsearch 实体类注解说明</a> 此博主包含 Elasticsearch 其它系列博文</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习springboot整合ElasticSearch 7.X版本并通过小demo实现基本的增删改查&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture异步编程详解</title>
    <link href="http://example.com/2022/12/14/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/12/14/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-12-14T09:14:44.000Z</published>
    <updated>2022-12-19T09:22:46.270Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CompletableFuture 英 [kəmp’letəbl] 英 [ˈfjuːtʃə(r)] </p></blockquote><p>CompletableFuture主要是用于异步调用，内部封装了线程池，可以将请求或者处理过程，进行异步处理。</p><p> 创建线程有3种方式，直接继承Thread、实现Runnable接口、实现Callable接口。</p><ul><li><p>Runnable 没有任何返回值</p></li><li><p>Future的方式，虽然任务是异步执行的，但是要想获得这个结果，还得需要自己取。</p></li><li><p>CompletableFuture，所有事情都是可以自动完成，即可以在完成之后，回调通知，也可以自己去等待。</p></li></ul><span id="more"></span><p><a href="https://blog.csdn.net/qq_42820805/article/details/109635001">带你了解了解Future和CompletableFuture</a></p><h2 id="1-get-join"><a href="#1-get-join" class="headerlink" title="1. get() / join()"></a>1. get() / join()</h2><p>join() 和 get() 方法都是阻塞调用它们的线程（通常为主线程）来获取CompletableFuture异步之后的返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">multipart</span><span class="params">(Integer a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    num=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">return</span> a*a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; multipart(<span class="number">5</span>));</span><br><span class="line">    <span class="comment">//System.out.println(future.join());</span></span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br><span class="line">当放开注释时结果：</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-submit"><a href="#2-submit" class="headerlink" title="2. submit"></a>2. submit</h2><p>通常的线程池接口类ExecutorService，其中execute方法的返回值是void，即无法获取异步任务的执行状态，3个重载的submit方法的返回值是Future，可以据此获取任务执行的状态和结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    ExecutorService executorService= Executors.newSingleThreadExecutor();</span><br><span class="line">    Future&lt;Double&gt; cf = executorService.submit(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot; exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成,如果已完成则直接返回结果</span></span><br><span class="line">    <span class="comment">//如果执行任务异常，则get方法会把之前捕获的异常重新抛出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214173822259.png" alt="image-20221214173822259"></p><h2 id="3-supplyAsync-runAsync-有-无返回值-执行异步任务"><a href="#3-supplyAsync-runAsync-有-无返回值-执行异步任务" class="headerlink" title="3. supplyAsync / runAsync      (有/无返回值 执行异步任务)"></a>3. supplyAsync / runAsync      (有/无返回值 执行异步任务)</h2><p><strong>supplyAsync表示创建带返回值的异步任务的</strong>，相当于ExecutorService submit(Callable  task) 方法，</p><p><strong>runAsync表示创建无返回值的异步任务</strong>，相当于ExecutorService submit(Runnable task)方法，这两方法的效果跟submit是一样的， 这两方法各有一个重载版本，可以指定执行异步任务的Executor实现，如果不指定，默认使用ForkJoinPool.commonPool()，如果机器是单核的，则默认使用ThreadPerTaskExecutor，该类是一个内部类，每次执行execute都会创建一个新线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ForkJoinPool pool=<span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot; exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,pool);</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf.join());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ExecutorService executorService= Executors.newSingleThreadExecutor();</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture cf = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot; exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,executorService);</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214174705707.png" alt="image-20221214174705707"></p><p><img src="http://lzcoder.cn/image-20221214174736527.png" alt="image-20221214174736527"></p><h2 id="4-thenApply-thenApplyAsync-（任务执行回调方法，可指定Executor）"><a href="#4-thenApply-thenApplyAsync-（任务执行回调方法，可指定Executor）" class="headerlink" title="4 thenApply / thenApplyAsync （任务执行回调方法，可指定Executor）"></a>4 thenApply / thenApplyAsync （任务执行回调方法，可指定Executor）</h2><p><strong>thenApply 表示某个任务执行完成后执行的动作，即回调方法，会将该任务的执行结果即方法返回值作为入参传递到回调方法中</strong></p><pre><code>     测试用例如下： job1执行结束后，将job1的方法返回值作为入参传递到job2中并立即执行job2。 thenApplyAsync与thenApply的区别在于，前者是将job2提交到线程池中异步执行，实际执行job2的线程可能是另外一个线程，后者是由执行job1的线程立即执行job2，即两个job都是同一个线程执行的。</code></pre><p> <strong>thenApplyAsync有一个重载版本，可以指定执行异步任务的Executor实现</strong>，如果不指定，默认使用ForkJoinPool.commonPool()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ForkJoinPool pool=<span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">    &#125;,pool);</span><br><span class="line">    <span class="comment">//cf关联的异步任务的返回值作为方法入参，传入到thenApply的方法中</span></span><br><span class="line">    <span class="comment">//thenApply这里实际创建了一个新的CompletableFuture实例</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf2=cf.thenApplyAsync((result)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test:&quot;</span>+result;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf2.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf2.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214175046062.png" alt="image-20221214175046062"></p><h2 id="5-thenAccept-thenRun-和4基本一致，任务执行回调方法，出入参不同"><a href="#5-thenAccept-thenRun-和4基本一致，任务执行回调方法，出入参不同" class="headerlink" title="5. thenAccept / thenRun (和4基本一致，任务执行回调方法，出入参不同)"></a>5. thenAccept / thenRun (和4基本一致，任务执行回调方法，出入参不同)</h2><p>thenAccept 同 thenApply 接收上一个任务的返回值作为参数，但是无返回值；</p><p> thenRun 的方法没有入参，也买有返回值，测试用例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ForkJoinPool pool=<span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">    &#125;,pool);</span><br><span class="line">    <span class="comment">//cf关联的异步任务的返回值作为方法入参，传入到thenApply的方法中</span></span><br><span class="line">    CompletableFuture cf2=cf.thenApply((result)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test:&quot;</span>+result;</span><br><span class="line">    &#125;).thenAccept((result)-&gt; &#123; <span class="comment">//接收上一个任务的执行结果作为入参，但是没有返回值</span></span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;).thenRun(()-&gt;&#123; <span class="comment">//无入参，也没有返回值</span></span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job4,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;thenRun do something&quot;</span>);</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job4,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf2.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//cf2 等待最后一个thenRun执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf2.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214175242008.png" alt="image-20221214175242008"></p><h2 id="6-exceptionally-（将抛出异常作为参数传递到回调方法）"><a href="#6-exceptionally-（将抛出异常作为参数传递到回调方法）" class="headerlink" title="6. exceptionally （将抛出异常作为参数传递到回调方法）"></a>6. exceptionally （将抛出异常作为参数传递到回调方法）</h2><p>exceptionally方法指定某个任务执行异常时执行的回调方法，会将抛出异常作为参数传递到回调方法中，如果该任务正常执行,则exceptionally方法返回的CompletionStage的result就是该任务正常执行的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ForkJoinPool pool=<span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job1 start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot;job1 exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,pool);</span><br><span class="line">    <span class="comment">//cf执行异常时，将抛出的异常作为入参传递给回调方法</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf2= cf.exceptionally((param)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;error stack trace-&gt;&quot;</span>);</span><br><span class="line">        param.printStackTrace();</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1.1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//cf正常执行时执行的逻辑，如果执行异常则不调用此逻辑</span></span><br><span class="line">    CompletableFuture cf3=cf.thenAccept((param)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job2 start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;param-&gt;&quot;</span>+param);</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job2 exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成,此处无论是job2和job3都可以实现job2退出，主线程才退出，如果是cf，则主线程不会等待job2执行完成自动退出了</span></span><br><span class="line">    <span class="comment">//cf2.get时，没有异常，但是依然有返回值，就是cf的返回值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf2.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214175428834.png" alt="image-20221214175428834"></p><h2 id="7-whenComplete-（将结果和异常一起传递给回调方法）"><a href="#7-whenComplete-（将结果和异常一起传递给回调方法）" class="headerlink" title="7. whenComplete （将结果和异常一起传递给回调方法）"></a>7. whenComplete （将结果和异常一起传递给回调方法）</h2><p>whenComplete是当某个任务执行完成后执行的回调方法，会将执行结果或者执行期间抛出的异常传递给回调方法，如果是正常执行则异常为null， 回调方法对应的CompletableFuture的result和该任务一致，如果该任务正常执行，则get方法返回执行结果，如果是执行异常，则get方法抛出异常。测试用例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job1 start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot;job1 exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//cf执行完成后会将执行结果和执行过程中抛出的异常传入回调方法，如果是正常执行的则传入的异常为null</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf2=cf.whenComplete((a,b)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job2 start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error stack trace-&gt;&quot;</span>);</span><br><span class="line">            b.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run succ,result-&gt;&quot;</span>+a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job2 exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start wait,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//如果cf是正常执行的，cf2.get的结果就是cf执行的结果</span></span><br><span class="line">    <span class="comment">//如果cf是执行异常，则cf2.get会抛出异常</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf2.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214175536655.png" alt="image-20221214175536655"></p><h2 id="8-handle-（跟7基本一致，有返回值）"><a href="#8-handle-（跟7基本一致，有返回值）" class="headerlink" title="8. handle （跟7基本一致，有返回值）"></a>8. handle （跟7基本一致，有返回值）</h2><p>跟whenComplete基本一致，区别在于handle的回调方法有返回值，且handle方法返回的 CompletableFuture的result是回调方法的执行结果或者回调方法执行期间抛出的异常，与原始CompletableFuture的result无关了。测试用例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job1 start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot;job1 exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//cf执行完成后会将执行结果和执行过程中抛出的异常传入回调方法，如果是正常执行的则传入的异常为null</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf2=cf.handle((a,b)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job2 start,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error stack trace-&gt;&quot;</span>);</span><br><span class="line">            b.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run succ,result-&gt;&quot;</span>+a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot;job2 exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;run error&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;run succ&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start wait,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//get的结果是cf2的返回值，跟cf没关系了</span></span><br><span class="line">    System.out.println(<span class="string">&quot;run result-&gt;&quot;</span>+cf2.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214175717210.png" alt="image-20221214175717210"></p><h2 id="9-thenCombine-thenAcceptBoth-runAfterBoth-（两个CompletableFuture组合起来，都正常执行才执行某个任务）"><a href="#9-thenCombine-thenAcceptBoth-runAfterBoth-（两个CompletableFuture组合起来，都正常执行才执行某个任务）" class="headerlink" title="9. thenCombine / thenAcceptBoth / runAfterBoth （两个CompletableFuture组合起来，都正常执行才执行某个任务）"></a>9. thenCombine / thenAcceptBoth / runAfterBoth （两个CompletableFuture组合起来，都正常执行才执行某个任务）</h2><p>这三个方法都是将两个CompletableFuture组合起来，只有这两个都正常执行完了才会执行某个任务， 区别在于，thenCombine会将两个任务的执行结果作为方法入参传递到指定方法中，且该方法有返回值；thenAcceptBoth同样将两个任务的执行结果作为方法入参，但是无返回值； runAfterBoth没有入参，也没有返回值。注意两个任务中只要有一个执行异常，则将该异常信息作为指定任务的执行结果。测试用例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ForkJoinPool pool=<span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Double&gt; cf2 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//cf和cf2的异步任务都执行完成后，会将其执行结果作为方法入参传递给cf3,且有返回值</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf3=cf.thenCombine(cf2,(a,b)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">&quot;job3 param a-&gt;&quot;</span>+a+<span class="string">&quot;,b-&gt;&quot;</span>+b);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cf和cf2的异步任务都执行完成后，会将其执行结果作为方法入参传递给cf3,无返回值</span></span><br><span class="line">    CompletableFuture cf4=cf.thenAcceptBoth(cf2,(a,b)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job4,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">&quot;job4 param a-&gt;&quot;</span>+a+<span class="string">&quot;,b-&gt;&quot;</span>+b);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job4,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cf4和cf3都执行完成后，执行cf5，无入参，无返回值</span></span><br><span class="line">    CompletableFuture cf5=cf4.runAfterBoth(cf3,()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job5,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;cf5 do something&quot;</span>);</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job5,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;cf run result-&gt;&quot;</span>+cf.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf5.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    System.out.println(<span class="string">&quot;cf5 run result-&gt;&quot;</span>+cf5.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214175828801.png" alt="image-20221214175828801"></p><h2 id="10-applyToEither-acceptEither-runAfterEither-（两个CompletableFuture组合起来，一个执行完了就会执行某个任务）"><a href="#10-applyToEither-acceptEither-runAfterEither-（两个CompletableFuture组合起来，一个执行完了就会执行某个任务）" class="headerlink" title="10.  applyToEither / acceptEither / runAfterEither （两个CompletableFuture组合起来，一个执行完了就会执行某个任务）"></a>10.  applyToEither / acceptEither / runAfterEither （两个CompletableFuture组合起来，一个执行完了就会执行某个任务）</h2><p>这三个方法都是将两个CompletableFuture组合起来，只要其中一个执行完了就会执行某个任务，其区别在于: </p><p>applyToEither会将已经执行完成的任务的执行结果作为方法<strong>入参，并有返回值</strong>； </p><p>acceptEither同样将已经执行完成的任务的执行结果作为方法<strong>入参，但是没有返回值</strong>；</p><p> runAfterEither<strong>没有方法入参，也没有返回值</strong>。注意两个任务中只要有一个执行异常，则将该异常信息作为指定任务的执行结果。测试用例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Double&gt; cf2 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//cf和cf2的异步任务其中一个执行完了，会将其执行结果作为方法入参传递给cf3,且有返回值</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf3=cf.applyToEither(cf2,(result)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">&quot;job3 param result-&gt;&quot;</span>+result);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cf和cf2的异步其中一个执行完了，会将其执行结果作为方法入参传递给cf3,无返回值</span></span><br><span class="line">    CompletableFuture cf4=cf.acceptEither(cf2,(result)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job4,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">&quot;job4 param result-&gt;&quot;</span>+result);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job4,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cf4和cf3其中一个执行完了，执行cf5，无入参，无返回值</span></span><br><span class="line">    CompletableFuture cf5=cf4.runAfterEither(cf3,()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job5,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;cf5 do something&quot;</span>);</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job5,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;cf run result-&gt;&quot;</span>+cf.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf5.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    System.out.println(<span class="string">&quot;cf5 run result-&gt;&quot;</span>+cf5.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214180046137.png" alt="image-20221214180046137"></p><h2 id="11-thenCompose"><a href="#11-thenCompose" class="headerlink" title="11. thenCompose"></a>11. thenCompose</h2><p>方法会在某个任务执行完成后，将该任务的执行结果作为方法入参然后执行指定的方法，该方法会返回一个新的CompletableFuture实例， 如果该CompletableFuture实例的result不为null，则返回一个基于该result的新的CompletableFuture实例； 如果该CompletableFuture实例为null，则，然后执行这个新任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;String&gt; cf2= cf.thenCompose((param)-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot; start job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot; exit job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;job3 test&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;cf run result-&gt;&quot;</span>+cf.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf2.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    System.out.println(<span class="string">&quot;cf2 run result-&gt;&quot;</span>+cf2.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20221214180204729.png" alt="image-20221214180204729"></p><h2 id="12-allof-anyof-（等待-所有任务-一个任务-执行完成才执行）"><a href="#12-allof-anyof-（等待-所有任务-一个任务-执行完成才执行）" class="headerlink" title="12. allof / anyof （等待 所有任务/一个任务 执行完成才执行）"></a>12. allof / anyof （等待 所有任务/一个任务 执行完成才执行）</h2><p>allof等待所有任务执行完成才执行cf4，如果有一个任务异常终止，则cf4.get时会抛出异常；如果都是正常执行，cf4.get返回null </p><p>anyOf是只有一个任务执行完成，无论是正常执行或者执行异常，都会执行cf4，cf4.get的结果就是已执行完成的任务的执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">    CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job1,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Double&gt; cf2 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job2,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Double&gt; cf3 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; start job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//            throw new RuntimeException(&quot;test&quot;);</span></span><br><span class="line">        System.out.println(Thread.currentThread()+<span class="string">&quot; exit job3,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//allof等待所有任务执行完成才执行cf4，如果有一个任务异常终止，则cf4.get时会抛出异常；如果都是正常执行，cf4.get返回null</span></span><br><span class="line">    <span class="comment">//anyOf是只有一个任务执行完成，无论是正常执行或者执行异常，都会执行cf4，cf4.get的结果就是已执行完成的任务的执行结果</span></span><br><span class="line">    CompletableFuture cf4=CompletableFuture.anyOf(cf,cf2,cf3).whenComplete((a,b)-&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error stack trace-&gt;&quot;</span>);</span><br><span class="line">            b.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run succ,result-&gt;&quot;</span>+a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start cf4.get(),time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    <span class="comment">//等待子任务执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;cf4 run result-&gt;&quot;</span>+cf4.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread exit,time-&gt;&quot;</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;CompletableFuture 英 [kəmp’letəbl] 英 [ˈfjuːtʃə(r)] &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CompletableFuture主要是用于异步调用，内部封装了线程池，可以将请求或者处理过程，进行异步处理。&lt;/p&gt;
&lt;p&gt; 创建线程有3种方式，直接继承Thread、实现Runnable接口、实现Callable接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Runnable 没有任何返回值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Future的方式，虽然任务是异步执行的，但是要想获得这个结果，还得需要自己取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CompletableFuture，所有事情都是可以自动完成，即可以在完成之后，回调通知，也可以自己去等待。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合swagger</title>
    <link href="http://example.com/2022/09/29/SpringBoot%E6%95%B4%E5%90%88swagger/"/>
    <id>http://example.com/2022/09/29/SpringBoot%E6%95%B4%E5%90%88swagger/</id>
    <published>2022-09-29T13:55:12.000Z</published>
    <updated>2022-12-21T01:21:00.526Z</updated>
    
    <content type="html"><![CDATA[<p>基于SpringBoot项目使用Swagger文档</p><span id="more"></span><h1 id="第一步：创建一个SpringBoot项目"><a href="#第一步：创建一个SpringBoot项目" class="headerlink" title="第一步：创建一个SpringBoot项目"></a>第一步：创建一个SpringBoot项目</h1><p><img src="http://lzcoder.cn/image-20220929224450396.png" alt="image-20220929224450396"></p><h1 id="第二步：导入依赖"><a href="#第二步：导入依赖" class="headerlink" title="第二步：导入依赖"></a>第二步：导入依赖</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;<span class="keyword">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--swagger --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--swagger-ui.html模式        --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--doc.html模式        --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="第三步：修改文件"><a href="#第三步：修改文件" class="headerlink" title="第三步：修改文件"></a>第三步：修改文件</h1><ol><li>启动类添加注解  <code>@EnableSwagger2</code> 目的是开启默认配置的swagger，也可自定义swagger配置</li></ol><p><img src="http://lzcoder.cn/image-20220929220705945.png" alt="image-20220929220705945"></p><ol start="2"><li>修改配置文件，pathmatch 配置是因为 Spring Boot 2.6及 更高版本使用的是PathPatternMatcher，而Springfox使用的路径匹配是基于AntPathMatcher的，所以需要配置。端口可以自定义</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 99</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    pathmatch:</span><br><span class="line">      matching-strategy: ANT_PATH_MATCHER</span><br></pre></td></tr></table></figure><p>本地输入：<a href="http://localhost:99/doc.html">http://localhost:99/doc.html</a> 即可访问</p><h1 id="第四步：实例接口"><a href="#第四步：实例接口" class="headerlink" title="第四步：实例接口"></a>第四步：实例接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;用户接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/userinfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;修改用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateUserMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseResponse&lt;Integer&gt; <span class="title">updateUserMessage</span><span class="params">(<span class="meta">@RequestBody</span> UpdateUserTO updateUserTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RespGenerator.returnOK(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;修改用户信息传入VO类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateUserTO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20220929224322619.png" alt="image-20220929224322619"></p><h1 id="第五步：自定义配置类"><a href="#第五步：自定义配置类" class="headerlink" title="第五步：自定义配置类"></a>第五步：自定义配置类</h1><p>场景：当在<a href="https://so.csdn.net/so/search?q=swagger&spm=1001.2101.3001.7020">swagger</a>上进行接口测试时，想要新增token，swagger的默认配置是不行的（直接在启动类上面加@EnableSwagger2注解开启）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coder.lion.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ParameterBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.schema.ModelRef;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Parameter;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年09月29日 22:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> swagger配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建API应用 apiInfo() 增加API相关信息</span></span><br><span class="line"><span class="comment">     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span></span><br><span class="line"><span class="comment">     * 本例采用指定扫描的包路径来定义指定要建立API的目录。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 选择那些路径和api会生成document</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).pathMapping(<span class="string">&quot;/&quot;</span>).select()</span><br><span class="line">                <span class="comment">// 对所有api进行监控</span></span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class)).build()</span><br><span class="line">                <span class="comment">// 配置token</span></span><br><span class="line">                .globalOperationParameters(setHeaderToken());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Parameter&gt; <span class="title">setHeaderToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ParameterBuilder tokenPar = <span class="keyword">new</span> ParameterBuilder();</span><br><span class="line">        List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tokenPar.name(<span class="string">&quot;Authorization&quot;</span>).description(<span class="string">&quot;token&quot;</span>).modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;string&quot;</span>)).parameterType(<span class="string">&quot;header&quot;</span>)</span><br><span class="line">                .required(<span class="keyword">false</span>).build();</span><br><span class="line">        pars.add(tokenPar.build());</span><br><span class="line">        <span class="keyword">return</span> pars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建该API的基本信息（这些基本信息会展现在文档页面中）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">&quot;测试接口文档&quot;</span>).description(<span class="string">&quot;测试接口文档&quot;</span>).version(<span class="string">&quot;1.0&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p><code>@Configuration</code>：用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器，简而言之就是在Spring启动时会将该类识别成一个配置类。</p></li><li><p><code>@EnableSwagger2</code>：开启swagger，此处也需要使用。</p></li></ol><p>到此处即可完成使用自定义的swagger，若有其他需求修改该配置类即可，另外此处另外提到一个注解Profile，此处可以不使用，在实际开发中可能存在多个环境，测试环境，正式环境等，可能需要使用不同的配置，此时可以使用Profile注解。</p><ol start="3"><li><code>@Profile(&quot;swagger&quot;)</code>：指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件。</li></ol><p>yml配置文件在开发时可能存在多个，因此可以指定具体哪一个环境可以开启该配置</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于SpringBoot项目使用Swagger文档&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="实操" scheme="http://example.com/tags/%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码学习笔记（一）</title>
    <link href="http://example.com/2022/07/27/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2022/07/27/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-07-27T08:00:15.000Z</published>
    <updated>2022-12-14T01:57:41.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lzcoder.cn/image-20220727160024587.png" alt="image-20220727160024587"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://lzcoder.cn/image-20220727160024587.png&quot; alt=&quot;image-20220727160024587&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>远程调用组件</title>
    <link href="http://example.com/2022/07/08/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2022/07/08/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6/</id>
    <published>2022-07-08T01:47:49.000Z</published>
    <updated>2022-12-19T09:23:36.123Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Feign是Netflix开发的一个轻量级Restflu的HTTP服务客户端（用它来发起请求，远程调用的）</strong>，是以接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用，Feign被广泛应用再Spring Cloud的解决方案中。</p><p>类似于Dubbo，服务消费者拿到服务提供者的接口，然后像调用本地接口方法一样去调用，实际发出的是远程的请求。</p><span id="more"></span><p><strong>本质：封装了Http调用流程，更符合面向接口化编程习惯，类似于Dubbo的服务调用</strong></p><h1 id="一、Feign配置应用"><a href="#一、Feign配置应用" class="headerlink" title="一、Feign配置应用"></a>一、Feign配置应用</h1><p>在效果上：</p><p>Feign = RestTemplate + Ribbon +  Hystrix</p><h2 id="1、消费者工程应用"><a href="#1、消费者工程应用" class="headerlink" title="1、消费者工程应用"></a>1、消费者工程应用</h2><ol><li>引入Feign依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动类添加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启服务发现</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启Feign</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutodeliverFeignApplication8092</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(AutodeliverFeignApplication8092.class,args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此时去掉Hystrix熔断支持注解，<code>@EnableCircuitBreaker  </code>即可包括引⼊的依赖，因为Feign会⾃动引⼊ </p><ol start="3"><li>常见feign接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;sc-service-resume&quot;)</span><span class="comment">// name：调⽤的服务名称，和服务提供者yml⽂件中spring.application.name保持⼀致</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResumeClientFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/resume/openstate/&#123;userId&#125;&quot;,method= RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findResumeOpenState</span><span class="params">(<span class="meta">@PathVariable(value =&quot;userId&quot;)</span> Long userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用feign接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ResumeClientFeign resumeClientFeign; <span class="comment">//声明、注入feingclient</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Integer resumeOpenState = resumeClientFeign.findResumeOpenState(<span class="number">15451321L</span>);  <span class="comment">//方法里直接使用</span></span><br><span class="line">System.out.println(<span class="string">&quot;resumeOpenState = &quot;</span> + resumeOpenState);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、Feign对负载均衡的支持"><a href="#2、Feign对负载均衡的支持" class="headerlink" title="2、Feign对负载均衡的支持"></a>2、Feign对负载均衡的支持</h2><p>Feign本身已经集成了Ribbon依赖和自动配置，我们不需要额外引入依赖，可以通过ribbon.xx来进行全局配置，也可以通过服务名.ribbon.xx来对指定服务进行细节配置</p><ul><li>Feign默认请求处理时长1s，可自定义Feign超时设置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#针对的被调用方微服务名称,不加就是全局生效</span></span><br><span class="line"><span class="attr">sc-service-resume:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment">#请求连接超时时间</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">2000</span></span><br><span class="line">    <span class="comment">#请求处理超时时间</span></span><br><span class="line">    <span class="comment">##########################################Feign超时时长设置</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">3000</span></span><br><span class="line">    <span class="comment">#对所有操作都进行重试</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">####根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例（次数由MaxAutoRetries配置），</span></span><br><span class="line">    <span class="comment">####如果不行，就换一个实例进行访问，如果还不行，再换一次实例访问（更换次数由MaxAutoRetriesNextServer配置），</span></span><br><span class="line">    <span class="comment">####如果依然不行，返回失败信息。</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment">#对当前选中实例重试次数，不包括第一次调用</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">0</span> <span class="comment">#切换实例的重试次数</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RoundRobinRule</span> <span class="comment">#负载策略调整</span></span><br></pre></td></tr></table></figure><h2 id="3、Feign对熔断器的支持"><a href="#3、Feign对熔断器的支持" class="headerlink" title="3、Feign对熔断器的支持"></a>3、Feign对熔断器的支持</h2><ol><li><p>开启Feign对熔断器的支持</p></li><li><p>超时时长</p><ol><li>Feign的超时时长就是上面Ribbon的超时时长设置</li><li>Hystrix超时设置（就按照之前Hystri设置方式就OK)</li></ol><p>超时时长，熔断的时候就是根据这两个时间的最小值来进行的，即处理时长超过了最短的那个超时时间了就熔断进行回退降级逻辑</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启Feign的熔断功能</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="comment">##########################################Hystrix的超时时长设置</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">15000</span></span><br></pre></td></tr></table></figure><p><strong>编写回退逻辑</strong></p><ol><li>编写降级逻辑 类 UserInfoFallbackService 实现 feign接口，添加注解@Comment能被扫描到，实现接口方法</li><li>类添加 fallback = UserInfoFallbackService.class  关联回退处理类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;sc-service-resume&quot;,fallback = ReusmeFailBackService.class,path = &quot;/resume&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResumeClientFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/openstate/&#123;userId&#125;&quot;,method= RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findResumeOpenState</span><span class="params">(<span class="meta">@PathVariable(value =&quot;userId&quot;)</span> Long userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 降级回退逻辑需要定义⼀个类，实现FeignClient接⼝，实现接⼝中的⽅法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//需要被扫描到</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReusmeFailBackService</span> <span class="keyword">implements</span> <span class="title">ResumeClientFeign</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findResumeOpenState</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Feign是Netflix开发的一个轻量级Restflu的HTTP服务客户端（用它来发起请求，远程调用的）&lt;/strong&gt;，是以接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用，Feign被广泛应用再Spring Cloud的解决方案中。&lt;/p&gt;
&lt;p&gt;类似于Dubbo，服务消费者拿到服务提供者的接口，然后像调用本地接口方法一样去调用，实际发出的是远程的请求。&lt;/p&gt;</summary>
    
    
    
    <category term="组件" scheme="http://example.com/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>服务注册中心</title>
    <link href="http://example.com/2022/07/07/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://example.com/2022/07/07/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <published>2022-07-07T03:39:36.000Z</published>
    <updated>2022-12-19T09:30:13.285Z</updated>
    
    <content type="html"><![CDATA[<p>分布式微服务项目离不开服务注册与发现，文章通过记录主流服务注册中心，并列举其差异对比进行核心内容学习。主要包含 Nacos、Zookeeper、Eureka、Consul、Etcd 。</p><span id="more"></span><h1 id="一、关于服务注册中心"><a href="#一、关于服务注册中心" class="headerlink" title="一、关于服务注册中心"></a>一、关于服务注册中心</h1><p><strong>目的：服务注册中心本质上是为了解耦服务提供者和服务消费者</strong></p><p><strong>一般原理：</strong></p><p><img src="http://lzcoder.cn/image-20220707115832961.png" alt="image-20220707115832961"></p><p>​          分布式微服务架构中，服务注册中心用于存储服务提供者地址信息、服务发布相关的属性信息，消费者通过主动查询和被动通知的方式获取服务提供者的地址信息，而不再需要通过硬编码方式得到提供者的地址信息。消费者只需要知道当前系统发布了哪些服务，而不需要知道服务具体存在于什么位置，这就是透明化路由。</p><p>步骤一：服务提供者启动服务</p><p>步骤二：服务提供者将相关服务信息主动注册到注册中心</p><p>步骤三：服务消费者获取服务注册信息</p><p>​                服务消费者获取服务信息主要有两种模式</p><ol><li>pull模式：服务消费者可以主动拉取可用的服务提供者清单</li><li>push模式：服务消费者订阅服务（当服务提供者有变化是，注册中心也会主动推送更新后的服务清单给消费者）</li></ol><p>步骤四：服务消费者直接调用服务提供者</p><p>另外，注册中心也需要完成服务提供者的健康监控，当发现服务提供者失效时需要及时剔除</p><h1 id="二、主流服务注册中心"><a href="#二、主流服务注册中心" class="headerlink" title="二、主流服务注册中心"></a>二、主流服务注册中心</h1><h2 id="1、Nacos"><a href="#1、Nacos" class="headerlink" title="1、Nacos"></a>1、Nacos</h2><p>Nacos是一个更易于构建云原生应用的动态<strong>服务发现、配置管理和服务管理</strong>平台。简单来说，Nacos 就是 注册中心 + 配置中心的组合，帮助我们解决微服务的开发中必回设计到的服务注册与发现，服务配置，服务管理等问题。Nacos是Spring Cloud Alibaba 核心组件之一，服务服务注册与发现，还有配置。</p><h2 id="2、Zookeeper"><a href="#2、Zookeeper" class="headerlink" title="2、Zookeeper"></a>2、Zookeeper</h2><p>zookeeper之所以用来做服务注册中心，主要是因为它具有节点变更通知功能，只要客户端监听相关服务节点，服务节点的所有变更，都能及时的通知到监听客户端，这样作为调用方只要使用Zookeeper的客户端就能实现服务节点的订阅和变更通知功能了。另外，Zookeeper的可用性也可以，因为只要半数以上的选举节点存活，整个集群就是可用的。</p><p>​        <strong>zookeeper的本质=存储+监听通知</strong></p><p>zookeeper是一个分布式服务框架，是Apache Hadoop的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理。</p><h2 id="3、Eureka"><a href="#3、Eureka" class="headerlink" title="3、Eureka"></a>3、Eureka</h2><p>由Netflix开源，并被集成到Spring Cloud体系中，它是基于 Restful API风格开发的服务注册与发现组件。</p><h2 id="4、Consul"><a href="#4、Consul" class="headerlink" title="4、Consul"></a>4、Consul</h2><p>COnsul是HashiCorp基于Go语言开发的支持多数据中心分布式高可用的服务发布和注册服务软件，采用Raft算法保证服务的一致性，并且支持健康检查。</p><p><strong>分布式的CAP原则</strong></p><p>C：数据一致性          A：高可用性            P：分区容错性</p><p>p分区容错性是一定会在分布式系统中满足的，C数据一致性和A高可用只能满足一个，因为分布式系统要不就是CP否则就是AP</p><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>对外暴露接口</th></tr></thead><tbody><tr><td>Nacos</td><td>Java</td><td>支持AP/CP切换</td><td>HTTP</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>客户端</td></tr><tr><td>Eureka</td><td>Java</td><td>AP(自我保护机制，保证可用)</td><td>HTTP</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>HTTP/DNS</td></tr></tbody></table><h1 id="三、服务注册中心详解"><a href="#三、服务注册中心详解" class="headerlink" title="三、服务注册中心详解"></a>三、服务注册中心详解</h1><h2 id="1、Nacos-1"><a href="#1、Nacos-1" class="headerlink" title="1、Nacos"></a>1、Nacos</h2><blockquote><p>Nacos 就是 注册中心 + 配置中心的组合 相当于（Eureka + config + Bus)</p></blockquote><p><a href="https://nacos.io/zh-cn/">官网地址</a></p><p><a href="https://github.com/alibaba/Nacos">下载地址</a></p><h3 id="一、功能特性"><a href="#一、功能特性" class="headerlink" title="一、功能特性"></a>一、功能特性</h3><ul><li>服务发现与健康检查</li><li>动态配置管理</li><li>动态DNS服务</li><li>服务和元数据管理（管理平台的角都，nacos也有一个UI界面，可以看到注册的服务以及实例信息（元数据信息）等），动态的服务权重调整，动态服务优雅下线，都可以去做</li></ul><h3 id="二、Nacos单例服务部署"><a href="#二、Nacos单例服务部署" class="headerlink" title="二、Nacos单例服务部署"></a>二、Nacos单例服务部署</h3><ol><li>下载安装包，执行命令启动</li></ol><p>​            <a href="https://nacos.io/zh-cn/docs/quick-start.html">快速开始</a>，准备环境，下载稳定版本包</p><p>执行命令，以单例方式启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone   </span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20220707141826305.png" alt="image-20220707141826305"></p><ol start="2"><li>启动完成访问nacos管理界⾯： <a href="http://127.0.0.1:8848/nacos/#/login%EF%BC%88%E9%BB%98%E8%AE%A4%E7%AB%AF%E2%BC%9D8848%EF%BC%8C%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81">http://127.0.0.1:8848/nacos/#/login（默认端⼝8848，账号和密码</a> nacos/nacos）  </li></ol><p><img src="http://lzcoder.cn/image-20220707141948959.png" alt="image-20220707141948959"></p><h3 id="三、服务注册中心"><a href="#三、服务注册中心" class="headerlink" title="三、服务注册中心"></a>三、服务注册中心</h3><h4 id="1、服务提供者注册到Nacos"><a href="#1、服务提供者注册到Nacos" class="headerlink" title="1、服务提供者注册到Nacos"></a>1、服务提供者注册到Nacos</h4><p>阿里云测试环境：<a href="http://101.132.140.20:18848/nacos">http://101.132.140.20:18848/nacos</a>  </p><ul><li>在项目parent的pom文件增加SCA依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SCA --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在服务提供者工程pom文件增加Nacos客户端配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sc-service-resume</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  <span class="comment">#配置Nacos地址</span></span><br></pre></td></tr></table></figure><ul><li>启动类添加 <code>@EnableDiscoveryClient</code> 注解，开启服务注册发现，启动项目</li></ul><p><img src="http://lzcoder.cn/image-20220707161312286.png" alt="image-20220707161312286"></p><p><img src="http://lzcoder.cn/image-20220707162951972.png" alt="image-20220707162951972"></p><ul><li><p><strong>保护阈值</strong>：可以设置未0-1之间的浮点数，它其实是一个比例值（当前服务健康实例/当前服务总实例数）</p><p><strong>场景</strong>：⼀般流程下， nacos是服务注册中⼼，服务消费者要从nacos获取某⼀个服务的可⽤实例信息，对于服务实例有健康/不健康状态之分， nacos在返回给消费者实例信息的时候，会返回健康实例。这个时候在⼀些⾼并发、⼤流量场景下会存在⼀定的问<br>题如果服务A有100个实例， 98个实例都不健康了，只有2个实例是健康的，如果nacos只返回这两个健康实例的信息的话，那么后续消费者的请求将全部被分配到这两个实例，流量洪峰到来， 2个健康的实例也扛不住了，整个服务A就扛不住，上游的微<br>服务也会导致崩溃，产⽣雪崩效应。</p><p><strong>意义</strong>：当服务A健康实例数/总实例数&lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态为true）</p><p>nacos 将会把该服务所有实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也比造成雪崩要好，牺牲了一些请求，保证了整个系统的一个可用。</p></li></ul><h4 id="2、服务消费者消费服务"><a href="#2、服务消费者消费服务" class="headerlink" title="2、服务消费者消费服务"></a>2、服务消费者消费服务</h4><ul><li>配置同服务提供者</li></ul><p><img src="http://lzcoder.cn/image-20220707170835825.png" alt="image-20220707170835825"></p><p><img src="http://lzcoder.cn/image-20220707170850732.png" alt="image-20220707170850732"></p><h3 id="四、Nacos数据模型"><a href="#四、Nacos数据模型" class="headerlink" title="四、Nacos数据模型"></a>四、Nacos数据模型</h3><p>Namespace命名空间、Group分组、集群这些都是为了进行归类管理，把<strong>服务</strong>和配置文件进行归类，归类后就可以实现一定的效果，比如隔离</p><p>​    比如：对应服务来说，不同命名空间中的服务不能够互相访问调用</p><p><img src="http://lzcoder.cn/image-20220707171210852.png" alt="image-20220707171210852"></p><p><strong>Namespace</strong>：命名空间，对不同的环境进行隔离，例如隔离开发环境、测试环境和生产环境</p><p><strong>Group</strong>：分组，将若干个服务或者若干个配置归集为一组，通常习惯一个系统归为一个组</p><p><strong>Service</strong>：某一个服务，比如用户微服务</p><p><strong>DataId</strong>：配置集或者可以认为是一个配置文件</p><p>Namespace+group+service 相当于坐标，锁定了服务</p><p>Namespace+group+DataId 相当于坐标，锁定了配置文件</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td>Namespace</td><td>代表不同的环境，如开发：dev，测试：test，生产prod</td></tr><tr><td>Group</td><td>代表某项目，例如授信项目</td></tr><tr><td>service</td><td>某个项目中具体的xxx服务</td></tr><tr><td>DataId</td><td>某个项目中具体的xxx配置文件</td></tr></tbody></table><h3 id="五、数据配置中心"><a href="#五、数据配置中心" class="headerlink" title="五、数据配置中心"></a>五、数据配置中心</h3><h4 id="1、编写配置文件"><a href="#1、编写配置文件" class="headerlink" title="1、编写配置文件"></a>1、编写配置文件</h4><p>在Nacos server编写配置文件 示例：sc-service-resume.yaml</p><p><img src="http://lzcoder.cn/image-20220707205011470.png" alt="image-20220707205011470"></p><h4 id="2、改造具体微服务"><a href="#2、改造具体微服务" class="headerlink" title="2、改造具体微服务"></a>2、改造具体微服务</h4><p>使其成为Nacos config client，能够从Nacos中获到配置信息</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.xml 增加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring</span> </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">d2d6d364-3d73-465d-bd14-1f7763a96aeb</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure><p>微服务中通过 Namespace + Group +dataId来锁定配置文件，NameSpace不指定默认public，Group不指定默认DEFAULT_GROUP</p><p><strong>dataId的完整格式如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><ul><li><code>prefix</code>默认为<code>spring.application.name</code>的值，也可以通过配置<code>spring.cloud.nacos.config.prefix</code>来配置</li><li>spring.profile.active即为当前环境对应的profile。当spring.profile.active为空时，对应的连接符 <code>-</code>也将不存在，dataId的拼接就变成 </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><ul><li><code>file-exetension</code>为配置内容的数据格式，可以通过<code>spring.cloud.nacos.config.file-extension</code>来配置，目前只支持<code>properties</code>和<code>yaml</code>类型</li></ul><h4 id="3、编写类使用Nacos配置"><a href="#3、编写类使用Nacos配置" class="headerlink" title="3、编写类使用Nacos配置"></a>3、编写类使用Nacos配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/resume&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span>   <span class="comment">//可根据Nacos配置值动态刷新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResumeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResumeService resumeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lz.message&#125;&quot;)</span>    <span class="comment">//获取Nacos对应属性值</span></span><br><span class="line">    <span class="keyword">private</span> String lzMessage;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/viewconfig&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">viewConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;lzMessage = &quot;</span> + lzMessage);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message=======》&quot;</span>+lzMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、扩展使用多个配置"><a href="#4、扩展使用多个配置" class="headerlink" title="4、扩展使用多个配置"></a>4、扩展使用多个配置</h4><p>使用ext-fonfig</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sc-service-resume</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">d2d6d364-3d73-465d-bd14-1f7763a96aeb</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="string">ext-config[0]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">sc-service-resume-2.yaml</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">ext-config[2]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">sc-service-resume-3.yaml</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="5、Nachos数据持久化"><a href="#5、Nachos数据持久化" class="headerlink" title="5、Nachos数据持久化"></a>5、Nachos数据持久化</h4><p>Nacos默认使用嵌入式数据库进行数据存储，它支持改为外部Mysql存储</p><ol><li>新建数据库 nacos_config，数据库初始化脚本文件 <code>$&#123;nacoshome/conf/nacos-mysql.sql&#125;</code></li><li>修改<code>$&#123;nacoshome/conf/applicaion.properties&#125;</code>增加Mysql数据源配置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?</span></span><br><span class="line"><span class="attr">characterEncoding</span>=<span class="string">utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;au</span></span><br><span class="line"><span class="attr">toReconnect</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h2 id="2、Eureka"><a href="#2、Eureka" class="headerlink" title="2、Eureka"></a>2、Eureka</h2><h3 id="一、基础架构"><a href="#一、基础架构" class="headerlink" title="一、基础架构"></a>一、基础架构</h3><p><img src="http://lzcoder.cn/image-20220708180524528.png" alt="image-20220708180524528"></p><ol><li>服务提供者：client，项目启动后，会向Eureka Server注册中心注册，并通过心跳来续约保持节点联系</li><li>Eureka Server注册中心：需要自己创建工程，client需要引入eureka client的相关jar，并进行相关配置，微服务才能和Eureka Server建立联系</li><li>客户端消费者：客户端消费者会定期拉取Eureka Server注册中心服务列表，并以缓存形式保存</li></ol><h3 id="二、交互流程及原理"><a href="#二、交互流程及原理" class="headerlink" title="二、交互流程及原理"></a>二、交互流程及原理</h3><p><img src="http://lzcoder.cn/image-20220708181105244.png" alt="image-20220708181105244"></p><p>Eureka包含两个组件：Eureka Server 和 Eureka Client，Eureka是一个Java客户端，用于简化与Eureka Server的交互；Eureka Server提供服务发现的能力，各个微服务启动时，会通过Eureka Client向Eureka Server 注册自己的信息（例如网络信息），Eureka Server会存储该服务的信息</p><ol><li>图中us-east-1c、us-east-1d、us-east-1e 代表不同的地区也就是不同的机房</li><li>图中每一个Eureka Server都是一个集群</li><li>图中Application Service 作为服务提供者向Eureka Server中注册服务，Eureka Server接收到注册事件会在集群和分区中进行数据同步，Application Client作为消费端（服务消费者）可以从Eureka Server中获取到服务注册信息，进行服务调用</li><li>微服务启动后，会周期性的向Eureka Server发送心跳（默认周期为30秒）</li><li>Eureka Server在一定时间内没有接收到某个微服务的心跳，Eureka Server 将会注销该微服务节点（默认90秒）</li><li>每个Eureka Server同时也是Eureka Client，多个Eureka Server之间通过复制的方式完成服务注册列表的同步</li><li>Eureka Client<strong>会缓存Eureka Server中的信息。即使所有的EureKa Server节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者</strong></li></ol><p><strong>Eureka通过心跳检测、健康检查和客户端缓存等机制，提高系统的灵活性、可伸缩性和可用性</strong></p><h3 id="三、搭建单例Eureka-Server-服务注册中心"><a href="#三、搭建单例Eureka-Server-服务注册中心" class="headerlink" title="三、搭建单例Eureka Server 服务注册中心"></a>三、搭建单例Eureka Server 服务注册中心</h3><h4 id="1、创建一个maven项目，引入依赖"><a href="#1、创建一个maven项目，引入依赖" class="headerlink" title="1、创建一个maven项目，引入依赖"></a>1、创建一个maven项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring boot 父启动器依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lz.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Eureka server依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引⼊Jaxb，开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10-b140310.1920<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引⼊Jaxb，结束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、启动类添加注解-EnableEurekaServer"><a href="#2、启动类添加注解-EnableEurekaServer" class="headerlink" title="2、启动类添加注解 EnableEurekaServer"></a>2、启动类添加注解 EnableEurekaServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//声明当前项目为Eureka服务</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="3、添加配置文件-application-yaml"><a href="#3、添加配置文件-application-yaml" class="headerlink" title="3、添加配置文件 application.yaml"></a>3、添加配置文件 application.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lz-eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 自己就是server 不用注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>  <span class="comment"># 自己是server 就不需要从server获取服务列表</span></span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h4><p>访问：<a href="http://localhost:9527/">http://localhost:9527/</a> 即可启动</p><h3 id="四、注册生产者"><a href="#四、注册生产者" class="headerlink" title="四、注册生产者"></a>四、注册生产者</h3><h4 id="1、创建一个maven项目，引入依赖-1"><a href="#1、创建一个maven项目，引入依赖-1" class="headerlink" title="1、创建一个maven项目，引入依赖"></a>1、创建一个maven项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、application-yaml配置文件"><a href="#2、application-yaml配置文件" class="headerlink" title="2、application.yaml配置文件"></a>2、application.yaml配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://101.132.140.20:9527/eureka/</span><br><span class="line">    instance:</span><br><span class="line">      prefer-ip-address: true</span><br><span class="line">      instance-id: $&#123;spring.cloud.client.ipaddress&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;:@project.version@</span><br></pre></td></tr></table></figure><h4 id="3、启动类添加注解"><a href="#3、启动类添加注解" class="headerlink" title="3、启动类添加注解"></a>3、启动类添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><h3 id="五、注册消费者"><a href="#五、注册消费者" class="headerlink" title="五、注册消费者"></a>五、注册消费者</h3><p><strong>消费者注册同生产者注册</strong></p><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@SpringBootApplication</span></span><br><span class="line">  <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoDeliverApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          SpringApplication.run(AutoDeliverApplication.class,args);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动类注入RestTemplate</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//控制类使用</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//1.获取eureka中注册的user-service的实例列表</span></span><br><span class="line">  List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;sc-service-resume&quot;</span>);</span><br><span class="line">  <span class="comment">//2.获取实例，就拿第一个</span></span><br><span class="line">  ServiceInstance serviceInstance = instances.get(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//3.根据实例的信息拼接请求地址</span></span><br><span class="line">  String host = serviceInstance.getHost();</span><br><span class="line">  <span class="keyword">int</span> port = serviceInstance.getPort();</span><br><span class="line">  String url = <span class="string">&quot;http://&quot;</span>+host+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/resume/openstate/&quot;</span>+userId;</span><br><span class="line">  <span class="comment">//4.消费者直接调用提供者</span></span><br><span class="line">  Integer forObject = restTemplate.getForObject(url, Integer.class);</span><br><span class="line">  System.out.println(<span class="string">&quot;===========&gt;&gt;&gt;&gt;调用建立微服务，获取到的用户:&quot;</span>+userId+<span class="string">&quot;forObject = &quot;</span> + forObject);</span><br><span class="line">  <span class="keyword">return</span> forObject;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;分布式微服务项目离不开服务注册与发现，文章通过记录主流服务注册中心，并列举其差异对比进行核心内容学习。主要包含 Nacos、Zookeeper、Eureka、Consul、Etcd 。&lt;/p&gt;</summary>
    
    
    
    <category term="组件" scheme="http://example.com/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ学习记录</title>
    <link href="http://example.com/2022/04/02/RocketMQ%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/04/02/RocketMQ%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-02T07:12:39.000Z</published>
    <updated>2022-12-19T09:18:50.238Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章旨在主要记录如何快速上手rocketmq</p><span id="more"></span><p>参考博文：</p><p><a href="https://www.php.cn/faq/453886.html">消息中间件的使用场景有哪些</a></p><p><a href="https://www.sohu.com/a/289890927_120045139">Kafka、ActiveMQ、RabbitMQ、RocketMQ 区别以及高可用原理 </a></p><p><a href="https://www.cnblogs.com/luckyplj/p/16007605.html">RocketMq安装(windows环境)与Rocketmq-dashboard的web管理页面部署</a></p><p><a href="https://blog.csdn.net/datastructure18/article/details/124538735">RocketMQ消息存储之刷盘机制（原理篇）</a></p><p><a href="https://blog.csdn.net/sangjunhong/article/details/124147696">RabbitMQ的ack机制</a></p><blockquote><p>如果对于消息队列的功能和性能要求不是很高，那么RabbitMQ就够了，开箱即用。</p><p>如果系统使用消息队列主要场景是处理在线业务，比如在交易系统中用消息队列传递订单，RocketMQ 的低延迟和金融级的稳定性就可以满足。<a href="https://rocketmq.apache.org/">官网</a></p><p>要处理海量的消息，像收集日志、监控信息或是前端的埋点这类数据，或是你的应用场景大量使用 了大数据、流计算相关的开源产品，那 Kafka 就是最合适的了。</p></blockquote><h1 id="一、部署架构"><a href="#一、部署架构" class="headerlink" title="一、部署架构"></a>一、部署架构</h1><p><img src="http://lzcoder.cn/image-20220722093028523.png" alt="image-20220722093028523"></p><p><strong>角色介绍</strong></p><ol><li>Producer：消息的发送者；举例：发信者</li><li>Consumer：消息接收者；举例：收信者</li><li>Broker：暂存和传输消息；举例：邮局</li><li>NameServer：管理Broker；举例：各个邮局的管理机构</li><li>Topic：区分消息的种类；一个发送者可以发送消息给一个或者多个Topic；一个消息的接收者可以订阅一个或者多个Topic消息</li><li>Message Queue：相当于是Topic的分区；用于并行发送和接收消息</li></ol><p><strong>角色交互解释</strong></p><ul><li>NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</li><li>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。</li><li>每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。 注意：当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。</li><li>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。</li><li>Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I/O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取。</li></ul><p><strong>执行流程</strong></p><ol><li>启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</li><li>Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。</li><li>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</li><li>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</li><li>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息</li></ol><h2 id="一、生产者示例"><a href="#一、生产者示例" class="headerlink" title="一、生产者示例"></a>一、生产者示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lz.coder.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年07月19日 17:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rocketmq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRocket</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMq&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMq</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1 获取消息生产者</span></span><br><span class="line">        DefaultMQProducer defaultMQProducer = getRocketMqProducer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 启动生产者</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            defaultMQProducer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3 构建消息对象，主要是设置消息的主题、标签、内容</span></span><br><span class="line">        JSONObject jsonObject = generateMsgContent();</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;lucky-topic&quot;</span>, <span class="string">&quot;lucky-tag&quot;</span>, jsonObject.toString().getBytes());</span><br><span class="line">        <span class="comment">// 4 发送消息</span></span><br><span class="line">        SendResult result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = defaultMQProducer.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;SendResult--&gt;&quot;</span> + result);</span><br><span class="line">        <span class="comment">// TODO 6 关闭生产者</span></span><br><span class="line">        defaultMQProducer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取配置文件中设置的rocketmq相关属性，创建消息生产者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultMQProducer <span class="title">getRocketMqProducer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String mqAddress = <span class="string">&quot;127.0.0.1:9876&quot;</span>;</span><br><span class="line">        String groupId = <span class="string">&quot;FLEP_FILE&quot;</span>;</span><br><span class="line">        String msgTimeout = <span class="string">&quot;10000&quot;</span>;</span><br><span class="line">        String retryWhenSendFailed = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">        <span class="comment">// 1 创建消息生产者，指定生成组名</span></span><br><span class="line">        DefaultMQProducer defaultMQProducer = <span class="keyword">new</span> DefaultMQProducer(groupId);</span><br><span class="line">        <span class="comment">// 2 指定NameServer的地址</span></span><br><span class="line">        defaultMQProducer.setNamesrvAddr(mqAddress);</span><br><span class="line">        <span class="comment">// 3 设置消息超时时间</span></span><br><span class="line">        defaultMQProducer.setSendMsgTimeout(Integer.parseInt(msgTimeout));</span><br><span class="line">        <span class="comment">// 4 同步发送消息，如果SendMsgTimeout时间内没有发送成功，则重试retryWhenSendFailed次</span></span><br><span class="line">        defaultMQProducer.setRetryTimesWhenSendFailed(Integer.parseInt(retryWhenSendFailed));</span><br><span class="line">        <span class="keyword">return</span> defaultMQProducer;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟生成消息体的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JSONObject <span class="title">generateMsgContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JSONObject jsonObject=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        Random random=<span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> fileId = random.nextInt(<span class="number">10000</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;fileId&quot;</span>,String.valueOf(fileId));</span><br><span class="line">        LocalDateTime localDateTime=LocalDateTime.now();</span><br><span class="line">        String fileCreateDate = localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        jsonObject.put(<span class="string">&quot;fileCreateDate&quot;</span>,fileCreateDate );</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、消费者示例"><a href="#二、消费者示例" class="headerlink" title="二、消费者示例"></a>二、消费者示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lz.coder.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年07月19日 18:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rocketmq2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveRocketMsg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/receiveMqMsg&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMqMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1 获取消息消费者</span></span><br><span class="line">        DefaultMQPushConsumer defaultMQPushConsumer = getRocketMqConsumer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 进行订阅：注册回调函数，编写处理消息的逻辑</span></span><br><span class="line">        defaultMQPushConsumer.registerMessageListener((List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext context) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// try catch(throwable)确保不会因为业务逻辑的异常，导致消息出现重复消费的现象</span></span><br><span class="line">            <span class="comment">// org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService.ConsumeRequest.run()中会对Throwable进行捕获，</span></span><br><span class="line">            <span class="comment">//并且返回ConsumeConcurrentlyStatus.RECONSUME_LATER</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到消息--》&quot;</span> + list);</span><br><span class="line">                <span class="keyword">for</span> (MessageExt messageExt : list) &#123;</span><br><span class="line">                    String message=<span class="keyword">new</span> String(messageExt.getBody(),RemotingHelper.DEFAULT_CHARSET);</span><br><span class="line">                    JSONObject object=JSONObject.parseObject(message);</span><br><span class="line">                    String fileId = (String) object.get(<span class="string">&quot;fileId&quot;</span>);</span><br><span class="line">                    String fileCreateDate = (String) object.get(<span class="string">&quot;fileCreateDate&quot;</span>);</span><br><span class="line">                    log.info(fileId+<span class="string">&quot;:&quot;</span>+fileCreateDate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 启动消费者</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            defaultMQPushConsumer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者启动成功。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultMQPushConsumer <span class="title">getRocketMqConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String mqAddress = <span class="string">&quot;127.0.0.1:9876&quot;</span>;</span><br><span class="line">        String consumerGroup = <span class="string">&quot;FLEP-CONSUMER-TEST&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 创建消费者，指定所属的消费者组名</span></span><br><span class="line">        DefaultMQPushConsumer defaultMQPushConsumer = <span class="keyword">new</span> DefaultMQPushConsumer(consumerGroup);</span><br><span class="line">        <span class="comment">// 2 指定NameServer的地址</span></span><br><span class="line">        defaultMQPushConsumer.setNamesrvAddr(mqAddress);</span><br><span class="line">        <span class="comment">// 3 指定消费者订阅的主题和标签</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            defaultMQPushConsumer.subscribe(<span class="string">&quot;lucky-topic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultMQPushConsumer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章旨在主要记录如何快速上手rocketmq&lt;/p&gt;</summary>
    
    
    
    <category term="组件" scheme="http://example.com/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>xxl-job任务调度中心使用</title>
    <link href="http://example.com/2022/02/09/xxl-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/02/09/xxl-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-09T07:52:07.000Z</published>
    <updated>2022-12-19T09:15:24.518Z</updated>
    
    <content type="html"><![CDATA[<p>使用开源xxl-job分布式任务调度平台 实现定时任务统一调度管理，开发迅速、学习简单、轻量级、易扩展。</p><span id="more"></span><p>主要参考官方文档内容</p><p><a href="https://www.xuxueli.com/xxl-job/">官方文档</a></p><p><a href="https://github.com/xuxueli/xxl-job">github源码仓库地址</a></p><h1 id="xxl-架构图"><a href="#xxl-架构图" class="headerlink" title="xxl-架构图"></a>xxl-架构图</h1><p><img src="http://lzcoder.cn/image-20220707112919996.png" alt="image-20220707112919996"></p><p>对于一些老项目，可以采用 httpJobHandler方式，通过接口方式实现定时任务实现，也可以作为心跳检查监控项目运行是否正常</p><p><img src="http://lzcoder.cn/image-20220707113010978.png" alt="image-20220707113010978"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用开源xxl-job分布式任务调度平台 实现定时任务统一调度管理，开发迅速、学习简单、轻量级、易扩展。&lt;/p&gt;</summary>
    
    
    
    <category term="组件" scheme="http://example.com/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MyBatisPlus使用</title>
    <link href="http://example.com/2021/12/28/MyBatisPlus%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/12/28/MyBatisPlus%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-28T03:21:02.000Z</published>
    <updated>2022-12-19T09:19:55.951Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis-Plus是MyBatis的增强版，简称（MP），在MyBatis的基础上只做增强，不做改变，为简化而生，提高开发效率。</p><span id="more"></span><h1 id="一、MyBatis-Plus简介"><a href="#一、MyBatis-Plus简介" class="headerlink" title="一、MyBatis-Plus简介"></a>一、MyBatis-Plus简介</h1><p><a href="http://mp.baomidou.com/">官网地址</a></p><p><a href="https://github.com/baomidou/mybatis-plus">GitHub</a></p><p><a href="https://gitee.com/baomidou/mybatis-plus">Gitee</a><br><a href="https://baomidou.com/pages/24112f">文档发布地址</a>  </p><h2 id="1-框架结构"><a href="#1-框架结构" class="headerlink" title="1.框架结构"></a>1.框架结构</h2><p><img src="http://lzcoder.cn/mybatis-plus-framework.jpg" alt="framework"></p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3.支持数据库"></a>3.支持数据库</h2><blockquote><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h1 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h1><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1.数据准备"></a>1.数据准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class="line">    use `mybatis_plus`;</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">    `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="2-工程环境准备"><a href="#2-工程环境准备" class="headerlink" title="2.工程环境准备"></a>2.工程环境准备</h2><ol><li>创建一个SpringBoot项目</li><li>导入pom依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置application.yml，添加数据源</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment"># 配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="comment"># 配置连接数据库信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>MySQL5.7版本的url：<br>jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false<br>MySQL8.0版本的url：<br>jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false  </p></blockquote><ol start="4"><li>编写实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>编写mapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Repository 为了让idea不显示错误</li><li>BaseMapper是MyBatis-Plus提供的模板mapper，包含了基本的CRUD操作，泛型为要操作的实体类型</li></ul><ol start="6"><li>添加扫描</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.lz.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、基本CRUD方法"><a href="#三、基本CRUD方法" class="headerlink" title="三、基本CRUD方法"></a>三、基本CRUD方法</h1><h2 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(&quot;coll&quot;)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(&quot;cm&quot;)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; ts = <span class="keyword">this</span>.selectList(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(ts)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ts.size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionUtils.mpe(<span class="string">&quot;One record is expected, but the query result is multiple records&quot;</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ts.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">    Long count = <span class="keyword">this</span>.selectCount(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> != count &amp;&amp; count &gt; <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Long <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;P extends IPage&lt;T&gt;&gt; <span class="function">P <span class="title">selectPage</span><span class="params">(P page, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;P extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; <span class="function">P <span class="title">selectMapsPage</span><span class="params">(P page, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2-增加"><a href="#2-增加" class="headerlink" title="2.增加"></a>2.增加</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(&quot;cm&quot;)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(&quot;coll&quot;)</span> Collection&lt;?&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-修改"><a href="#4-修改" class="headerlink" title="4.修改"></a>4.修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(&quot;et&quot;)</span> T entity)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;et&quot;)</span> T entity, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="四、通用service"><a href="#四、通用service" class="headerlink" title="四、通用service"></a>四、通用service</h1><ul><li>通用 Service CRUD 封装<a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java"> IService</a>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li><li>泛型 <code>T</code> 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li><li>对象 <code>Wrapper</code> 为 <a href="https://baomidou.com/01.%E6%8C%87%E5%8D%97/02.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/wrapper.html">条件构造器</a></li></ul><h2 id="1-save"><a href="#1-save" class="headerlink" title="1.save"></a>1.save</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2-saveOrUpdate"><a href="#2-saveOrUpdate" class="headerlink" title="2.saveOrUpdate"></a>2.saveOrUpdate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="3-remove"><a href="#3-remove" class="headerlink" title="3.remove"></a>3.remove</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-update"><a href="#4-update" class="headerlink" title="4.update"></a>4.update</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="五、常用注解"><a href="#五、常用注解" class="headerlink" title="五、常用注解"></a>五、常用注解</h1><h2 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h2><blockquote><p>在实体类类型上添加@TableName(“t_user”)，标识实体类对应的表  </p></blockquote><h2 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h2><blockquote><p>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id </p><p>在实体类中uid属性上通过@TableId将其标识为主键    </p></blockquote><p><strong>常用的主键策略</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>IdType.ASSIGN_ID（默 认）</td><td>基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td>IdType.AUTO</td><td>使用数据库的自增策略，注意，该类型请确保数据库设置了id自增， 否则无效</td></tr></tbody></table><h2 id="3-TableField"><a href="#3-TableField" class="headerlink" title="3.@TableField"></a>3.@TableField</h2><blockquote><p>MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格  </p><p>如实体类属性name，表中字段username<br>此时需要在实体类属性上使用@TableField(“username”)设置属性所对应的字段名  </p></blockquote><h2 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4.@TableLogic"></a>4.@TableLogic</h2><p>物理删除：从数据库表中真实删除数据</p><p>逻辑删除：通过数据库表字段值区分数据状态为已删除和未删除</p><p><strong>通过@TableLogic注解实现逻辑删除</strong></p><ol><li>表添加字段用于存储删除状态，且设置默认值0</li></ol><p><img src="http://lzcoder.cn/image-20220405092838361.png" alt="image-20220405092838361"></p><ol start="2"><li>实体类添加该对应字段，并在该字段上添加注解@TableLogic，即实现逻辑删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、条件构造器和常用接口"><a href="#六、条件构造器和常用接口" class="headerlink" title="六、条件构造器和常用接口"></a>六、条件构造器和常用接口</h1><h2 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1.Wrapper介绍"></a>1.Wrapper介绍</h2><p><img src="http://lzcoder.cn/image-20220405093616098.png" alt="image-20220405093616098"></p><ul><li>Wrapper ： 条件构造抽象类，最顶端父类<ul><li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<ul><li>QueryWrapper ： 查询条件封装</li><li>UpdateWrapper ： Update 条件封装</li><li>AbstractLambdaWrapper ： 使用Lambda 语法<ul><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper<ul><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper  </li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2.QueryWrapper"></a>2.QueryWrapper</h2><h3 id="（一）组装查询条件"><a href="#（一）组装查询条件" class="headerlink" title="（一）组装查询条件"></a>（一）组装查询条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含a，年龄在20到30之间，并且邮箱不为null的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE</span></span><br><span class="line">    is_deleted=<span class="number">0</span> AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">    .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）组装删除条件"><a href="#（二）组装删除条件" class="headerlink" title="（二）组装删除条件"></a>（二）组装删除条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除email为空的用户</span></span><br><span class="line"><span class="comment">//DELETE FROM t_user WHERE (email IS NULL)</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="comment">//条件构造器也可以构建删除语句的条件</span></span><br><span class="line"><span class="keyword">int</span> result = userMapper.delete(queryWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br></pre></td></tr></table></figure><h3 id="（三）条件优先级"><a href="#（三）条件优先级" class="headerlink" title="（三）条件优先级"></a>（三）条件优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND age &gt; ? OR</span></span><br><span class="line">    email IS NULL)</span><br><span class="line">    queryWrapper</span><br><span class="line">    .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    .or()</span><br><span class="line">    .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(user, queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND (age &gt; ? OR</span></span><br><span class="line">    email IS NULL))</span><br><span class="line">    <span class="comment">//lambda表达式内的逻辑优先运算</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(user, queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（四）组装Select子句"><a href="#（四）组装Select子句" class="headerlink" title="（四）组装Select子句"></a>（四）组装Select子句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询用户信息的username和age字段</span></span><br><span class="line">    <span class="comment">//SELECT username,age FROM t_user</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值</span></span><br><span class="line">    为<span class="keyword">null</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（五）组装排序条件"><a href="#（五）组装排序条件" class="headerlink" title="（五）组装排序条件"></a>（五）组装排序条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">queryWrapper</span><br><span class="line">.orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">.orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（六）实现子查询"><a href="#（六）实现子查询" class="headerlink" title="（六）实现子查询"></a>（六）实现子查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询id小于等于3的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE (id IN</span></span><br><span class="line">    (select id from t_user where id &lt;= <span class="number">3</span>))</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from t_user where id &lt;= 3&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（七）常用的条件参数"><a href="#（七）常用的条件参数" class="headerlink" title="（七）常用的条件参数"></a>（七）常用的条件参数</h3><table><thead><tr><th>查询方式</th><th>说明</th></tr></thead><tbody><tr><td>eq</td><td>等于 =</td></tr><tr><td>ne</td><td>不等于&lt;&gt;</td></tr><tr><td>gt</td><td>大于&gt;</td></tr><tr><td>ge</td><td>大于等于&gt;=</td></tr><tr><td>lt</td><td>小于&lt;</td></tr><tr><td>le</td><td>小于等于</td></tr><tr><td>like</td><td>模糊查询LIKE ‘%值%’</td></tr><tr><td>likeLeft</td><td>Like ‘%值’</td></tr><tr><td>likeRigth</td><td>Like ‘值%’</td></tr><tr><td>notLike</td><td>模糊查询 NOT LIKE</td></tr><tr><td>in</td><td>in(v0,v1……)</td></tr><tr><td>notin</td><td>not in (v0,v1……)</td></tr><tr><td>inSql</td><td>in (SQL语句)</td></tr><tr><td>notInSql</td><td>not in (SQL语句)</td></tr><tr><td>isNull</td><td>NULL值查询</td></tr><tr><td>isNotNull</td><td>not Null值查询</td></tr><tr><td>groupBy</td><td>group by</td></tr><tr><td>orderBy</td><td>排序</td></tr><tr><td>orderByAsc</td><td>orderByAsc</td></tr><tr><td>exists</td><td>EXISTS 条件语句</td></tr><tr><td>between</td><td>between</td></tr><tr><td>last</td><td>无视优化规则直接拼接到 sql 的最后 !!!只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</td></tr></tbody></table><h2 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将（年龄大于20或邮箱为null）并且用户名中包含有a的用户信息修改</span></span><br><span class="line">    <span class="comment">//组装set子句以及修改条件</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//lambda表达式内的逻辑优先运算</span></span><br><span class="line">    updateWrapper</span><br><span class="line">    .set(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">    .set(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;user@atguigu.com&quot;</span>)</span><br><span class="line">    .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="comment">//这里必须要创建User对象，否则无法应用自动填充。如果没有自动填充，可以设置为null</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET username=?, age=?,email=? WHERE (username LIKE ? AND</span></span><br><span class="line">    (age &gt; ? OR email IS NULL))</span><br><span class="line">    <span class="comment">//User user = new User();</span></span><br><span class="line">    <span class="comment">//user.setName(&quot;张三&quot;);</span></span><br><span class="line">    <span class="comment">//int result = userMapper.update(user, updateWrapper);</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?,email=? WHERE (username LIKE ? AND (age &gt; ? OR</span></span><br><span class="line">    email IS NULL))</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(<span class="keyword">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Condition"><a href="#4-Condition" class="headerlink" title="4.Condition"></a>4.Condition</h2><blockquote><p>先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08UseCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义查询条件，有可能为null（用户未输入或未选择）</span></span><br><span class="line">    String username = <span class="keyword">null</span>;</span><br><span class="line">    Integer ageBegin = <span class="number">10</span>;</span><br><span class="line">    Integer ageEnd = <span class="number">24</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//StringUtils.isNotBlank()判断某字符串是否不为空且长度不为0且不由空白符(whitespace)</span></span><br><span class="line">    构成</span><br><span class="line">    queryWrapper</span><br><span class="line">    .like(StringUtils.isNotBlank(username), <span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .ge(ageBegin != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin)</span><br><span class="line">    .le(ageEnd != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE (age &gt;=</span></span><br><span class="line">    ? AND age &lt;= ?)</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义查询条件，有可能为null（用户未输入）</span></span><br><span class="line">    String username = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    Integer ageBegin = <span class="number">10</span>;</span><br><span class="line">    Integer ageEnd = <span class="number">24</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//避免使用字符串表示字段，防止运行时错误</span></span><br><span class="line">    queryWrapper</span><br><span class="line">    .like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">    .ge(ageBegin != <span class="keyword">null</span>, User::getAge, ageBegin)</span><br><span class="line">    .le(ageEnd != <span class="keyword">null</span>, User::getAge, ageEnd);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//组装set子句</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper</span><br><span class="line">    .set(User::getAge, <span class="number">18</span>)</span><br><span class="line">    .set(User::getEmail, <span class="string">&quot;user@atguigu.com&quot;</span>)</span><br><span class="line">    .like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .and(i -&gt; i.lt(User::getAge, <span class="number">24</span>).or().isNull(User::getEmail)); <span class="comment">//lambda</span></span><br><span class="line">    表达式内的逻辑优先运算</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、插件"><a href="#七、插件" class="headerlink" title="七、插件"></a>七、插件</h1><h2 id="一、分页插件"><a href="#一、分页插件" class="headerlink" title="一、分页插件"></a>一、分页插件</h2><blockquote><p>Mybatis-Plus自带分页插件，只需简单配置即可实现</p></blockquote><p><strong>添加配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span> <span class="comment">//可以将主类中的注解移到此处</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span></span><br><span class="line">        PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//获取分页数据</span></span><br><span class="line">    List&lt;User&gt; list = page.getRecords();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示的条数：&quot;</span>+page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span>+page.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span>+page.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Sql实现分页</p><ol><li>UserMapper接口定义接口方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">**</span><br><span class="line">* 根据年龄查询用户列表，分页显示</span><br><span class="line">* <span class="meta">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位</span><br><span class="line">* <span class="meta">@param</span> age 年龄</span><br><span class="line">* <span class="meta">@return</span></span><br><span class="line">*/</span><br><span class="line"><span class="function">I</span></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">Integer age)</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>UserMapper.xml添加SQL</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SQL片段，记录基础字段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;BaseColumns&quot;</span>&gt;</span>id,username,age,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--IPage&lt;User&gt; selectPageVo(Page&lt;User&gt; page, Integer age);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;BaseColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> FROM t_user WHERE age &gt; #</span><br><span class="line">&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、乐观锁"><a href="#二、乐观锁" class="headerlink" title="二、乐观锁"></a>二、乐观锁</h2><p>悲观锁：在进行写操作是，会将数据列锁起来，等当前连接操作完下一个连接才可以继续操作</p><p>乐观锁：不会锁表，会在执行时检查数据是否被修改过，如果被修改过则获重新获取数据再进行操作</p><p><strong>乐观锁实现流程</strong></p><ol><li>数据库中添加version字段  </li><li>取出记录时，获取当前version  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,`name`,price,`version` <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>更新时，version + 1，如果where语句中的version版本不对，则更新失败</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE product <span class="keyword">SET</span> price<span class="operator">=</span>price<span class="operator">+</span><span class="number">50</span>, `version`<span class="operator">=</span>`version` <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> `version`<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>  <strong>MyBatis-Plus实现乐观锁</strong></p><ol><li>修改实体类，对应版本号字段添加@Version注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatisplus.entity;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.Version;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加乐观锁插件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Date:2022/2/14</span></span><br><span class="line"><span class="comment"> * Author:liuzheng</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="八、代码生成器"><a href="#八、代码生成器" class="headerlink" title="八、代码生成器"></a>八、代码生成器</h1><h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-快速生成"><a href="#2-快速生成" class="headerlink" title="2.快速生成"></a>2.快速生成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastAutoGeneratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis_plus?</span></span><br><span class="line"><span class="string">        characterEncoding=utf-8&amp;userSSL=false&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .globalConfig(builder -&gt; &#123;</span><br><span class="line">        builder.author(<span class="string">&quot;atguigu&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">        <span class="comment">//.enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">        .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">        .outputDir(<span class="string">&quot;D://mybatis_plus&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .packageConfig(builder -&gt; &#123;</span><br><span class="line">        builder.parent(<span class="string">&quot;com.atguigu&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">        .moduleName(<span class="string">&quot;mybatisplus&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">        .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;D://mybatis_plus&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .strategyConfig(builder -&gt; &#123;</span><br><span class="line">        builder.addInclude(<span class="string">&quot;t_user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">        .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .templateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine()) <span class="comment">// 使用Freemarker</span></span><br><span class="line">        引擎模板，默认的是Velocity引擎模板</span><br><span class="line">        .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、多数据源"><a href="#九、多数据源" class="headerlink" title="九、多数据源"></a>九、多数据源</h1><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置application.yml</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment"># 配置数据源类型</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment"># 设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">   <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="comment"># 配置连接数据库信息</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://101.132.140.20:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">lz1024cx</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="comment"># 配置连接数据库信息</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://101.132.140.20:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">lz1024cx</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用数据源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;master&quot;)</span> <span class="comment">//指定所操作的数据源,也可以使用在方法上</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span></span></span><br><span class="line"><span class="class"><span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、MyBatisX插件"><a href="#十、MyBatisX插件" class="headerlink" title="十、MyBatisX插件"></a>十、MyBatisX插件</h1><p><a href="https://baomidou.com/pages/ba5b24/">用法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyBatis-Plus是MyBatis的增强版，简称（MP），在MyBatis的基础上只做增强，不做改变，为简化而生，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>工具方法集合</title>
    <link href="http://example.com/2021/12/16/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2021/12/16/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/</id>
    <published>2021-12-16T02:15:51.000Z</published>
    <updated>2022-12-19T09:28:02.974Z</updated>
    
    <content type="html"><![CDATA[<p>项目上总会遇到一些通用的方法，每次使用去找不免会花费不必要的时间，这篇博客旨在不断积累有用的工具方法</p><span id="more"></span><h1 id="一、时间处理"><a href="#一、时间处理" class="headerlink" title="一、时间处理"></a>一、时间处理</h1><h2 id="1、常规使用"><a href="#1、常规使用" class="headerlink" title="1、常规使用"></a>1、常规使用</h2><p><a href="https://moonce.blog.csdn.net/article/details/117880835?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-117880835-blog-126163479.pc_relevant_multi_platform_featuressortv2dupreplace&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-117880835-blog-126163479.pc_relevant_multi_platform_featuressortv2dupreplace&utm_relevant_index=1">LocalDate实用方法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDateUtilMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//localDateTime 方法</span></span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前时刻 = &quot;</span> + now);<span class="comment">//当前时刻 = 2021-12-16T10:09:30.898</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前年份 = &quot;</span> + now.getYear());<span class="comment">//当前年份 = 2021</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前月份值 = &quot;</span> + now.getMonthValue());<span class="comment">//当前月份值 = 12</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getMonth() = &quot;</span> + now.getMonth());<span class="comment">//now.getMonth() = DECEMBER</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getDayOfMonth() = &quot;</span> + now.getDayOfMonth());<span class="comment">//now.getDayOfMonth() = 16</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getDayOfWeek() = &quot;</span> + now.getDayOfWeek());<span class="comment">//now.getDayOfWeek() = THURSDAY</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getChronology() = &quot;</span> + now.getChronology());<span class="comment">//now.getChronology() = ISO</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getHour() = &quot;</span> + now.getHour());<span class="comment">//now.getHour() = 10</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getSecond() = &quot;</span> + now.getSecond());<span class="comment">//now.getSecond() = 30</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getNano() = &quot;</span> + now.getNano());<span class="comment">//now.getNano() = 898000000</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getMinute() = &quot;</span> + now.getMinute());<span class="comment">//now.getMinute() = 9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//format  DateTimeFormatter 时间格式化</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.ISO_DATE));<span class="comment">//2021-12-16</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));<span class="comment">//20211216</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd&quot;</span>)));<span class="comment">//2021/12/16</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<span class="comment">//2022-03-28 13:54:22</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3天前日期</span></span><br><span class="line">    LocalDateTime.now().minusDays(<span class="number">3</span>).format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析时间字符串</span></span><br><span class="line">    LocalDateTime parseDate = LocalDateTime.parse(<span class="string">&quot;2002--01--02 11:21&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy--MM--dd HH:mm&quot;</span>));</span><br><span class="line">    System.out.println(parseDate.format(DateTimeFormatter.BASIC_ISO_DATE));<span class="comment">//20020102</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、JSON转换"><a href="#二、JSON转换" class="headerlink" title="二、JSON转换"></a>二、JSON转换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xunzhi.scrm.utils.helper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jdk8.Jdk8Module;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.<span class="keyword">module</span>.paramnames.ParameterNamesModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonUtils</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">JacksonUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJsonString</span><span class="params">(Object object)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper().registerModule(<span class="keyword">new</span> JavaTimeModule())</span><br><span class="line">.registerModule(<span class="keyword">new</span> ParameterNamesModule()).registerModule(<span class="keyword">new</span> Jdk8Module())</span><br><span class="line">.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line"><span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">toJavaObject</span><span class="params">(String jsonString, Class&lt;T&gt; valueType)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper().registerModule(<span class="keyword">new</span> JavaTimeModule())</span><br><span class="line">.registerModule(<span class="keyword">new</span> ParameterNamesModule()).registerModule(<span class="keyword">new</span> Jdk8Module())</span><br><span class="line">.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line"><span class="keyword">return</span> mapper.readValue(jsonString, valueType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">toJavaObject</span><span class="params">(String jsonString, TypeReference&lt;T&gt; typeReference)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper().registerModule(<span class="keyword">new</span> JavaTimeModule())</span><br><span class="line">.registerModule(<span class="keyword">new</span> ParameterNamesModule()).registerModule(<span class="keyword">new</span> Jdk8Module())</span><br><span class="line">.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line"><span class="keyword">return</span> mapper.readValue(jsonString, typeReference);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目上总会遇到一些通用的方法，每次使用去找不免会花费不必要的时间，这篇博客旨在不断积累有用的工具方法&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="速查" scheme="http://example.com/tags/%E9%80%9F%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>enum定义枚举类使用</title>
    <link href="http://example.com/2021/12/15/enum%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/12/15/enum%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-15T15:57:54.000Z</published>
    <updated>2022-12-19T09:22:37.239Z</updated>
    
    <content type="html"><![CDATA[<p> 以往的项目中总会定义一些常量提供使用，当类别较多时并不好理解和维护，jdk5后支持enum使用枚举类，能够更简洁，约束性更强。下面简单介绍下enum枚举类的使用。</p><span id="more"></span><h1 id="一、使用enum定义枚举类的说明"><a href="#一、使用enum定义枚举类的说明" class="headerlink" title="一、使用enum定义枚举类的说明"></a>一、使用enum定义枚举类的说明</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SeasonEnum</span> </span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春风又绿江南岸&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;映日荷花别样红&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋水共长天一色&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;窗含西岭千秋雪&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SeasonEnum</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用enum定义的枚举类默认继承了java.lang.Enum类，因此<strong>不能够继承其他类</strong>，但可以实现接口</li><li>枚举类的构造器只能使用<strong>private</strong>权限修饰符，即不能通过外部生成枚举类对象</li><li>枚举类的所<strong>有实例必须在第一行声明，显式列出（,分割；结尾），列出的实例系统会自动添加public static final修饰</strong></li><li>jdk1.5中可以在switch表达式中使用Enum定义枚举类的对象作为表达式</li></ol><h1 id="二、enum类的主要方法"><a href="#二、enum类的主要方法" class="headerlink" title="二、enum类的主要方法"></a>二、enum类的主要方法</h1><h2 id="1、values"><a href="#1、values" class="headerlink" title="1、values()"></a>1、values()</h2><p>用于返回枚举实例的对象数组，可以方便遍历当前枚举类的所有枚举值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnumValuesMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SeasonEnum[] seasonEnums = SeasonEnum.values();</span><br><span class="line">    <span class="keyword">for</span>(SeasonEnum seasonEnum:seasonEnums)&#123;</span><br><span class="line">    System.out.println(seasonEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn//image-20211216001619105.png" alt="image-20211216001619105"></p><h2 id="2、ordinal"><a href="#2、ordinal" class="headerlink" title="2、ordinal()"></a>2、ordinal()</h2><p>返回枚举实例的序数，从0开始</p><p><img src="http://lzcoder.cn//image-20211216002126994.png" alt="image-20211216002126994"></p><h2 id="3、name"><a href="#3、name" class="headerlink" title="3、name()"></a>3、name()</h2><p>用于返回枚举类型实例名称</p><p><img src="http://lzcoder.cn//image-20211216002352584.png" alt="image-20211216002352584"></p><h2 id="4、values-of"><a href="#4、values-of" class="headerlink" title="4、values of()"></a>4、values of()</h2><p>用于返回指定名称的枚举实例</p><p><img src="http://lzcoder.cn//image-20211216002824596.png" alt="image-20211216002824596"></p><h2 id="5、switch"><a href="#5、switch" class="headerlink" title="5、switch"></a>5、switch</h2><p>用于switch-case语句中</p><p><img src="http://lzcoder.cn//image-20211216003038841.png" alt="image-20211216003038841"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 以往的项目中总会定义一些常量提供使用，当类别较多时并不好理解和维护，jdk5后支持enum使用枚举类，能够更简洁，约束性更强。下面简单介绍下enum枚举类的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="http://example.com/2021/12/15/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2021/12/15/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-12-15T06:40:55.000Z</published>
    <updated>2022-12-19T09:21:20.557Z</updated>
    
    <content type="html"><![CDATA[<p>该记录主要是java8的Lambda表达式以及Stream流的介绍与使用</p><span id="more"></span><h3 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h3><h2 id="1-使用介绍"><a href="#1-使用介绍" class="headerlink" title="1.使用介绍"></a>1.使用介绍</h2><ol><li><p>举例： (o1,o2) -&gt; Integer.compare(o1,o2);</p></li><li><p>格式：</p><p> -&gt; :lambda操作符 或 箭头操作符</p><p> -&gt; 左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）</p><p> -&gt; 右边：lambda体 （其实就是重写的抽象方法的方法体）</p></li><li><p>Lambda表达式的本质：作为函数式接口的实例</p></li><li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上使用 @FunctionalInterface 注解，</p></li><li><p> 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</p></li></ol><p><strong>总结：</strong></p><ul><li>   -&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也可以省略</li><li>   -&gt;右边：lambda体应该使用一对{}包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一对{}和return关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//用lambda表达式开启线程</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;线程开开启了&quot;</span>)).start();</span><br><span class="line">    <span class="comment">//语法格式一：无参，无返回值</span></span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匿名内部类 runnable……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    runnable.run();</span><br><span class="line"></span><br><span class="line">    Runnable r1 = () -&gt; System.out.println(<span class="string">&quot;lambda runnable……&quot;</span>);</span><br><span class="line">    r1.run();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需要一个参数但是没有返回值</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;内部类实现 consumer……&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer consumer1 = (x) -&gt; System.out.println(<span class="string">&quot;lambda 实现consumer&quot;</span>+x);</span><br><span class="line">        consumer1.accept(<span class="string">&quot;lambda &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-java内置的4大核心函数式接口"><a href="#2-java内置的4大核心函数式接口" class="headerlink" title="2.java内置的4大核心函数式接口"></a>2.java内置的4大核心函数式接口</h2><h3 id="（一）消费型接口-Consumer-lt-T-gt-void-accept-T-t"><a href="#（一）消费型接口-Consumer-lt-T-gt-void-accept-T-t" class="headerlink" title="（一）消费型接口 Consumer&lt;T&gt;     void accept(T t)"></a>（一）消费型接口 Consumer&lt;T&gt;     void accept(T t)</h3><blockquote><p>有一个入参，无返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要一个参数但是没有返回值</span></span><br><span class="line">Consumer consumer = <span class="keyword">new</span> Consumer() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;内部类实现 consumer……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">consumer.accept(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">Consumer consumer1 = (x) -&gt; System.out.println(<span class="string">&quot;lambda 实现consumer&quot;</span>+x);</span><br><span class="line">consumer1.accept(<span class="string">&quot;lambda &quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（二-供给型接口-Supplier-lt-T-gt-T-get"><a href="#（二-供给型接口-Supplier-lt-T-gt-T-get" class="headerlink" title="（二) 供给型接口 Supplier&lt;T&gt;     T get()"></a>（二) 供给型接口 Supplier&lt;T&gt;     T get()</h3><blockquote><p>无入参 一个返回值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    //供给型接口</span><br><span class="line">    Supplier&lt;String&gt; supplier = ()-&gt; &#123;</span><br><span class="line">        String s2 =&quot;3&quot;;</span><br><span class="line">        return s2.toUpperCase();</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(&quot;supplier.get() = &quot; + supplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三-函数型接口-Function-lt-T-R-gt-R-apply-T-t"><a href="#（三-函数型接口-Function-lt-T-R-gt-R-apply-T-t" class="headerlink" title="（三) 函数型接口 Function&lt;T,R&gt;   R apply(T t)"></a>（三) 函数型接口 Function&lt;T,R&gt;   R apply(T t)</h3><blockquote><p>一个入参，一个返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//函数型接口</span></span><br><span class="line">    Function&lt;String,String&gt; function = (x)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">        <span class="keyword">return</span> x.toUpperCase(Locale.ROOT);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;function = &quot;</span> + function.apply(<span class="string">&quot;liuzheng&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（四-断定型接口-Predicate-lt-T-gt-boolean-test-T-t"><a href="#（四-断定型接口-Predicate-lt-T-gt-boolean-test-T-t" class="headerlink" title="（四) 断定型接口 Predicate&lt;T&gt;    boolean test(T t)"></a>（四) 断定型接口 Predicate&lt;T&gt;    boolean test(T t)</h3><blockquote><p>一个入参，一个Boolean类型返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//断言型接口</span></span><br><span class="line">    Predicate&lt;String&gt; predicate = (x) -&gt; x.contains(<span class="string">&quot;liuzheng&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;predicate = &quot;</span> + predicate.test(<span class="string">&quot;fdfdliuzh3eng&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3.方法引用"></a>3.方法引用</h2><p><strong>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</strong></p><h3 id="（一）方法引用的本质"><a href="#（一）方法引用的本质" class="headerlink" title="（一）方法引用的本质"></a>（一）方法引用的本质</h3><p>方法引用本质上就是Lambda表达是，而Lambda表达式作为函数式接口的实例，所以方法引用也是函数式接口的实例</p><h3 id="（二）使用方式"><a href="#（二）使用方式" class="headerlink" title="（二）使用方式"></a>（二）使用方式</h3><p>类（对象）::  方法名</p><h3 id="（三）使用情况"><a href="#（三）使用情况" class="headerlink" title="（三）使用情况"></a>（三）使用情况</h3><ol><li><strong>对象 ::  非静态方法</strong></li></ol><blockquote><p>它的形式参数全部传递给该方法作为参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法引用 1</span></span><br><span class="line">    PrintStream out = System.out;</span><br><span class="line">    Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">    consumer.accept(<span class="string">&quot;方法引用&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类 :: 静态方法</strong></li></ol><blockquote><p>它的形式参数全部传递给该方法作为参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; compare = Integer::compare;</span><br><span class="line">System.out.println(<span class="string">&quot;compare = &quot;</span> + compare.compare(<span class="number">1</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>类 :: 非静态方法</strong></li></ol><blockquote><p><strong>第一个参数作为调用者</strong>，后面的参数全部传递给该方法作为参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">    System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">    System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">    System.out.println(func1.apply(employee));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">    System.out.println(func2.apply(employee));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>要求</strong> 针对方法1和方法2，要求接口中抽象方法的形参列表和返回值类型与方法引用的方法形参列表和返回值类型一致</p><h2 id="4-构造器引用"><a href="#4-构造器引用" class="headerlink" title="4.构造器引用"></a>4.构造器引用</h2><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致</p><p>抽象方法的返回值类型即为构造器所属的类的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//Supplier中的T get()</span></span><br><span class="line">   <span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> Supplier&lt;Employee&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> Employee();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">       System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(sup2.get());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="keyword">new</span> Employee(id);</span><br><span class="line">       Employee employee = func1.apply(<span class="number">1001</span>);</span><br><span class="line">       System.out.println(employee);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       Employee employee1 = func2.apply(<span class="number">1002</span>);</span><br><span class="line">       System.out.println(employee1);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="keyword">new</span> Employee(id,name);</span><br><span class="line">       System.out.println(func1.apply(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(func2.apply(<span class="number">1002</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组引用</span></span><br><span class="line">   <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> String[length];</span><br><span class="line">       String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">       System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">       String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">       System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="二、Stream流"><a href="#二、Stream流" class="headerlink" title="二、Stream流"></a>二、Stream流</h1><p><strong>常用操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">userList.stream().collect(Collectors.toMap(user::getUserId, t -&gt; t, (oldvalue, newValue) -&gt; newValue));</span><br><span class="line">参数说明：</span><br><span class="line">1. user::getUserId 作为map的key</span><br><span class="line">2. t-&gt;t value值为对象本身，也可以写 Function.identity()</span><br><span class="line">3. (oldvalue, newValue) -&gt; newValue) 当key值冲突时，key对应的value值覆盖为newValue</span><br></pre></td></tr></table></figure><h2 id="1-概要介绍"><a href="#1-概要介绍" class="headerlink" title="1.概要介绍"></a>1.概要介绍</h2><ul><li>Stream关注的是对数据的运算，与CPU打交道</li><li>Stream 自己不会存储元素</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</li></ul><p><strong>执行流程</strong></p><ol><li>Stream的实例化</li><li>一系列的中间操作（过滤、映射、…)  一个中间操作链，对数据源的数据进行处理</li><li>终止操作</li></ol><p><strong>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</strong></p><h2 id="2-执行流程详解"><a href="#2-执行流程详解" class="headerlink" title="2.执行流程详解"></a>2.执行流程详解</h2><h3 id="（一）实例化"><a href="#（一）实例化" class="headerlink" title="（一）实例化"></a>（一）实例化</h3><h5 id="1-通过集合"><a href="#1-通过集合" class="headerlink" title="1. 通过集合"></a>1. 通过集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式一：通过集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-通过数组"><a href="#2-通过数组" class="headerlink" title="2. 通过数组"></a>2. 通过数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式二：通过数组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">    IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">    Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    Employee e2 = <span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-通过Stream的of"><a href="#3-通过Stream的of" class="headerlink" title="3.通过Stream的of"></a>3.通过Stream的of</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式三：通过Stream的of()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-创建无限流"><a href="#4-创建无限流" class="headerlink" title="4.创建无限流"></a>4.创建无限流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//      迭代</span></span><br><span class="line">    <span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="comment">//遍历前10个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//      生成</span></span><br><span class="line">    <span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）中间链"><a href="#（二）中间链" class="headerlink" title="（二）中间链"></a>（二）中间链</h3><h5 id="1-筛选与切片"><a href="#1-筛选与切片" class="headerlink" title="1.筛选与切片"></a>1.筛选与切片</h5><h6 id="（一）filter"><a href="#（一）filter" class="headerlink" title="（一）filter"></a>（一）filter</h6><p><strong>filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">employees.stream().filter(e-&gt;e.getSalary()&gt;<span class="number">100</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（二）limit"><a href="#（二）limit" class="headerlink" title="（二）limit"></a>（二）limit</h6><p><strong>limit(n)——截断流，使其元素不超过给定数量。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employees.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（三）skip"><a href="#（三）skip" class="headerlink" title="（三）skip"></a>（三）skip</h6><p><strong>skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employees.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（四）distinct"><a href="#（四）distinct" class="headerlink" title="（四）distinct"></a>（四）distinct</h6><p> <strong>distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h5 id="2-映射"><a href="#2-映射" class="headerlink" title="2.映射"></a>2.映射</h5><h6 id="（五）map"><a href="#（五）map" class="headerlink" title="（五）map"></a>（五）map</h6><p> <strong>map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（六）flatMap"><a href="#（六）flatMap" class="headerlink" title="（六）flatMap"></a>（六）flatMap</h6><p><strong>flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line">Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class="line">characterStream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">fromStringToStream</span><span class="params">(String str)</span></span>&#123;<span class="comment">//aa</span></span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Character c : str.toCharArray())&#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（七）peek"><a href="#（七）peek" class="headerlink" title="（七）peek"></a>（七）peek</h6><p>peek和map类似，peek方法接收一个Consumer的入参。了解λ表达式的应该明白 Consumer的实现类 应该只有一个方法，该方法返回类型为void。</p><p>正因为 <code>peek()</code> 不是一个最终操作，不会影响“哪些元素会流过”，所以十分适合在调试的时候，用来打印出流经管道的元素。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">         .filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">         .peek(e -&gt; System.out.println(<span class="string">&quot;Filtered value: &quot;</span> + e))</span><br><span class="line">         .map(String::toUpperCase)</span><br><span class="line">         .peek(e -&gt; System.out.println(<span class="string">&quot;Mapped value: &quot;</span> + e))</span><br><span class="line">         .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h5 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h5><h6 id="（七）sorted"><a href="#（七）sorted" class="headerlink" title="（七）sorted()"></a>（七）sorted()</h6><h6 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">12</span>, <span class="number">43</span>, <span class="number">65</span>, <span class="number">34</span>, <span class="number">87</span>, <span class="number">0</span>, -<span class="number">98</span>, <span class="number">7</span>);</span><br><span class="line">list.stream().sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（八）sorted-Comparator-com"><a href="#（八）sorted-Comparator-com" class="headerlink" title="（八）sorted(Comparator com)"></a>（八）sorted(Comparator com)</h6><p>定制排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    employees.stream().sorted( (e1,e2) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> ageValue = Integer.compare(e1.getAge(),e2.getAge());</span><br><span class="line">       <span class="keyword">if</span>(ageValue != <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> ageValue;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> -Double.compare(e1.getSalary(),e2.getSalary());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-匹配与查找"><a href="#4-匹配与查找" class="headerlink" title="4.匹配与查找"></a>4.匹配与查找</h5><h6 id="（九）-allMatch-Predicate-p"><a href="#（九）-allMatch-Predicate-p" class="headerlink" title="（九） allMatch(Predicate p)"></a>（九） allMatch(Predicate p)</h6><blockquote><p>检查是否匹配所有元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//          练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">        <span class="keyword">boolean</span> allMatch = employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">        System.out.println(allMatch);</span><br></pre></td></tr></table></figure><h6 id="（十）-anyMatch-Predicate-p"><a href="#（十）-anyMatch-Predicate-p" class="headerlink" title="（十） anyMatch(Predicate p)"></a>（十） anyMatch(Predicate p)</h6><blockquote><p>检查是否至少匹配一个元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//         练习：是否存在员工的工资大于 10000</span></span><br><span class="line">        <span class="keyword">boolean</span> anyMatch = employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line">        System.out.println(anyMatch);</span><br></pre></td></tr></table></figure><h6 id="（十一）-noneMatch-Predicate-p"><a href="#（十一）-noneMatch-Predicate-p" class="headerlink" title="（十一） noneMatch(Predicate p)"></a>（十一） noneMatch(Predicate p)</h6><blockquote><p>检查是否没有匹配的元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//          练习：是否存在员工姓“雷”</span></span><br><span class="line">        <span class="keyword">boolean</span> noneMatch = employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">        System.out.println(noneMatch);</span><br></pre></td></tr></table></figure><h6 id="（十二）-findFirst"><a href="#（十二）-findFirst" class="headerlink" title="（十二） findFirst"></a>（十二） findFirst</h6><blockquote><p>返回第一个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        findFirst——返回第一个元素</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().findFirst();</span><br></pre></td></tr></table></figure><h6 id="（十三）-findAny"><a href="#（十三）-findAny" class="headerlink" title="（十三） findAny"></a>（十三） findAny</h6><blockquote><p> 返回当前流中的任意元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();</span><br><span class="line">System.out.println(employee1);</span><br></pre></td></tr></table></figure><h5 id="5-收集"><a href="#5-收集" class="headerlink" title="5. 收集"></a>5. 收集</h5><h6 id="（十四）collect"><a href="#（十四）collect" class="headerlink" title="（十四）collect"></a>（十四）collect</h6><p>将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">employeeList.forEach(System.out::println);</span><br><span class="line">System.out.println();</span><br><span class="line">Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">employeeSet.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h5 id="6-归约"><a href="#6-归约" class="headerlink" title="6.归约"></a>6.归约</h5><h6 id="（十五）reduce"><a href="#（十五）reduce" class="headerlink" title="（十五）reduce"></a>（十五）reduce</h6><p>可以将流中元素反复结合起来，得到一个值。返回 T</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        练习1：计算1-10的自然数的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        Integer sum = list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line"><span class="comment">//        练习2：计算公司所有员工工资的总和</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);</span><br><span class="line"><span class="comment">//        Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span></span><br><span class="line">        Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);</span><br><span class="line">        System.out.println(sumMoney.get());</span><br></pre></td></tr></table></figure><h5 id="7-其它"><a href="#7-其它" class="headerlink" title="7.其它"></a>7.其它</h5><h6 id="（十六）count"><a href="#（十六）count" class="headerlink" title="（十六）count"></a>（十六）count</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">// count——返回流中元素的总个数</span></span><br><span class="line"><span class="keyword">long</span> count = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">5000</span>).count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h6 id="（十七）max"><a href="#（十七）max" class="headerlink" title="（十七）max"></a>（十七）max</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        练习：返回最高的工资：</span></span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());</span><br><span class="line">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class="line">        System.out.println(maxSalary);</span><br></pre></td></tr></table></figure><p>（十八）min</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        练习：返回最低工资的员工</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">        System.out.println(employee);</span><br></pre></td></tr></table></figure><p>（十九）forEach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        forEach(Consumer c)——内部迭代</span></span><br><span class="line">        employees.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1 id="三、Optional类"><a href="#三、Optional类" class="headerlink" title="三、Optional类"></a>三、Optional类</h1><h2 id="1、ofNullable"><a href="#1、ofNullable" class="headerlink" title="1、ofNullable"></a>1、ofNullable</h2><blockquote><p>不管所传入的值为null不为null，创建的时候都不会报错</p></blockquote><p><strong>Optional.ofNullable(..).orElse(..)</strong>  不管所传入的值为null不为null，创建的时候都不会报错底层是一个包装好的三元运算，避免空指针</p><p>示例</p><blockquote><p>结果 = Optional.ofNullable(值1).orElse(值2)    </p></blockquote><p>​        值1不空取值1，值1空了取值2</p><p>避免踩坑 </p><ol><li>字符串不要使用，”” 判定为非空</li><li>Optional.ofNullable(m1()).orElse(m2())    即使 m1 非空，也会调用 m2 ,因此当m2方法有大量计算，或数据操作时，避免使用，可以使用 <strong>orElseGet(）</strong></li></ol><h2 id="2、of"><a href="#2、of" class="headerlink" title="2、of"></a>2、of</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个值为张三的String类型的Optional</span></span><br><span class="line">Optional ofOptional14 = Optional.of(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="comment">//如果我们用of方法创建Optional对象时，所传入的值为null，则抛出NullPointerException如下图所示</span></span><br><span class="line"><span class="comment">// Optional nullOptional15 = Optional.of(null);</span></span><br></pre></td></tr></table></figure><h2 id="3、empty"><a href="#3、empty" class="headerlink" title="3、empty"></a>3、empty</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空的String类型的Optional对象</span></span><br><span class="line">Optional&lt;String&gt; emptyOptional7 = Optional.empty();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出张三</span></span><br><span class="line">Optional stringOptional = Optional.of(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">System.out.println(stringOptional.get());</span><br><span class="line"><span class="comment">//抛出NoSuchElementException异常</span></span><br><span class="line">Optional emptyOptional8 = Optional.empty();</span><br><span class="line"><span class="comment">// System.out.println(emptyOptional8.get());</span></span><br></pre></td></tr></table></figure><h2 id="4、orElse"><a href="#4、orElse" class="headerlink" title="4、orElse"></a>4、orElse</h2><p>如果Optional对象不为空，则返回值，如果为空，则返回指定值，如果此处使用的是函数，则无论 Optional 对象为不为空都将出发方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出张三</span></span><br><span class="line">Optional stringOptional9 = Optional.of(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">System.out.println(stringOptional9.orElse(<span class="string">&quot;liuzhegn&quot;</span>));</span><br><span class="line"><span class="comment">//输出李四</span></span><br><span class="line">Optional emptyOptional11 = Optional.empty();</span><br><span class="line">System.out.println(emptyOptional11.orElse(<span class="string">&quot;李四&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="5、orElseGet"><a href="#5、orElseGet" class="headerlink" title="5、orElseGet"></a>5、orElseGet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional stringOptional12 = Optional.of(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">System.out.println(stringOptional12.orElseGet(() -&gt; <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line">Optional emptyOptional13 = Optional.empty();</span><br><span class="line">System.out.println(emptyOptional13.orElseGet(() -&gt; <span class="string">&quot;orElseGet&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="6、filter"><a href="#6、filter" class="headerlink" title="6、filter"></a>6、filter</h2><p>如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象</p><p>注意Optional中的filter方法和Stream中的filter方法是有点不一样的，Stream中的filter方法是对一堆元素进行过滤，而Optional中的filter方法只是对一个元素进行过滤，可以把Optional看成是最多只包含一个元素的Stream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional stringOptional16 = Optional.of(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">System.out.println(stringOptional16.filter(e -&gt; e.equals(<span class="string">&quot;zhangsan&quot;</span>)).orElse(<span class="string">&quot;王五&quot;</span>));</span><br><span class="line">stringOptional = Optional.empty();</span><br><span class="line">System.out.println(stringOptional.filter(e -&gt; e.equals(<span class="string">&quot;zhangsan&quot;</span>)).orElse(<span class="string">&quot;lisi&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="7、ifPresent"><a href="#7、ifPresent" class="headerlink" title="7、ifPresent"></a>7、ifPresent</h2><p>ifPresent方法的参数是一个Consumer的实现类，Consumer类包含一个抽象方法，该抽象方法对传入的值进行处理，只处理没有返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional stringOptional2 = Optional.of(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">stringOptional2.ifPresent(e-&gt; System.out.println(<span class="string">&quot;我被处理了。。。&quot;</span>+e));</span><br></pre></td></tr></table></figure><h2 id="8、isPresent"><a href="#8、isPresent" class="headerlink" title="8、isPresent"></a>8、isPresent</h2><p>isPresent 如果有值返回true，否则返回false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional stringOptional3 = Optional.of(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> present = stringOptional3.isPresent();</span><br><span class="line">System.out.println(<span class="string">&quot;present = &quot;</span> + present);</span><br></pre></td></tr></table></figure><h2 id="9、map"><a href="#9、map" class="headerlink" title="9、map"></a>9、map</h2><p> map方法执行传入的lambda表达式参数对Optional实例的值进行修改,修改后的返回值仍然是一个Optional对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; stringOptional4 = Optional.of(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">System.out.println(stringOptional4.map(e -&gt; e.toUpperCase()).orElse(<span class="string">&quot;失败&quot;</span>));</span><br><span class="line">stringOptional4 = Optional.empty();</span><br><span class="line">System.out.println(stringOptional4.map(e -&gt; e.toUpperCase()).orElse(<span class="string">&quot;失败&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;该记录主要是java8的Lambda表达式以及Stream流的介绍与使用&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="速查" scheme="http://example.com/tags/%E9%80%9F%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>kafka学习</title>
    <link href="http://example.com/2021/12/15/kafka%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/15/kafka%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-15T06:40:55.000Z</published>
    <updated>2022-12-20T07:53:13.700Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--查看消费组group</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --list</span><br><span class="line"></span><br><span class="line">--查看偏移量情况</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --describe --group test-consumer-group</span><br><span class="line"></span><br><span class="line">--偏移量向前偏移10个</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --topic error_log_collect_topic:0,1 --shift-by -10 --execute</span><br><span class="line"></span><br><span class="line">--将偏移量设置为最早的</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --to-earliest --topic error_log_collect_topic --execute</span><br><span class="line"></span><br><span class="line">--将偏移量设置为最新的</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --to-latest --topic error_log_collect_topic --execute</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="组件" scheme="http://example.com/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="速查" scheme="http://example.com/tags/%E9%80%9F%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引学习</title>
    <link href="http://example.com/2021/12/02/MySQL%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/02/MySQL%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-02T13:43:17.000Z</published>
    <updated>2022-12-19T09:19:25.918Z</updated>
    
    <content type="html"><![CDATA[<p>s索引的学习对于数据库优化有着至关重要的作用，深入理解索引机制，才能更好的优化查询机制</p><span id="more"></span><h1 id="一、索引分类"><a href="#一、索引分类" class="headerlink" title="一、索引分类"></a>一、索引分类</h1><p>索引的使用会影响where条件查询以及order by排序，MySQL索引类型如下</p><ul><li>从存储结构划分：可分为B Tree索引、Hash索引、FuLLTEXT全文索引、R Tree索引</li><li>从应用层次划分：可分为主键索引、普通索引、唯一索引、复合索引、全文索引</li><li>从索引键类型划分：可分为主键索引、辅助索引</li><li>从数据存储和键类型划分：可分为聚簇索引（聚集索引）、非聚簇索引</li></ul><p><img src="http://lzcoder.cn/image-20211206163837167.png" alt="image-20211206163837167"></p><h2 id="1、普通索引"><a href="#1、普通索引" class="headerlink" title="1、普通索引"></a>1、普通索引</h2><p>普通索引是最基本的索引类型，建立在普通字段上，没有任何限制</p><p>创建普通索引的三种方式</p><ol><li>直接添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD INDEX [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名) );</span><br></pre></td></tr></table></figure><h2 id="2、主键索引"><a href="#2、主键索引" class="headerlink" title="2、主键索引"></a>2、主键索引</h2><p>主键索引是一种特殊的唯一值，不允许为空。创建主键索引有两种方式</p><ol><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD PRIMARY KEY (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], PRIMARY KEY (字段名) );</span><br></pre></td></tr></table></figure><h2 id="3、唯一索引"><a href="#3、唯一索引" class="headerlink" title="3、唯一索引"></a>3、唯一索引</h2><p>与普通索引不同的时，唯一索引的列不能有重复值，但可以为空，在创建、修改表列字段属性为唯一约束时，自动添加唯一索引</p><p>创建唯一索引的三种方式</p><ol><li>直接添加唯一索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD UNIQUE INDEX [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (字段名) ;</span><br></pre></td></tr></table></figure><h2 id="4、复合索引"><a href="#4、复合索引" class="headerlink" title="4、复合索引"></a>4、复合索引</h2><p>单一索引是指索引只作用在一列上，复合索引是指用户在多个列上建立索引，这种索引叫复合索引（组合索引），复合索引可以代替多个单一索引，相比多个单一索引复合索引所需的开销更小。 但要注意<strong>最左前缀原则</strong></p><p>创建复合索引的三种方式</p><ol><li>直接添加复合索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index &lt;索引名称&gt; on table(字段名1，字段名2);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD INDEX [索引的名字] (字段名1，字段名2...);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名1，字段名2...) );</span><br></pre></td></tr></table></figure><p>复合索引使用时注意事项：</p><p>什么时候使用复合索引：</p><ul><li>添加复合索引要根据where条件建立，不要过多使用索引，过多无用的索引会影响表新增更新数据</li><li>如果表已经有了(col1,col2)，就没有必要再单独建立(col1)，如果有了（col1）索引，如果需要查询col1和col2条件，可以建立(col1,col2)列复合索引，对查询速度有一定的提高。</li></ul><h2 id="5、全文索引"><a href="#5、全文索引" class="headerlink" title="5、全文索引"></a>5、全文索引</h2><p>查询操作在数据量比较少时，可以使用like模糊查询，但是对于大量的文本数据检索，效率很低。如果使用全文索引，查询速度会比like快很多倍。在MySQL 5.6 以前的版本，只有MyISAM存储引擎支持全文索引，从MySQL 5.6开始MyISAM和InnoDB存储引擎均支持  。</p><p>创建全文索引的三种方式（注意只能对字符串和文本类型列生效）：</p><ol><li>直接添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FULLTEXT INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD FULLTEXT [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], FULLTEXT KEY [索引的名字] (字段名) ;</span><br></pre></td></tr></table></figure><p>与常见的like模糊查询不同，全文索引使用match和against关键字，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where match(username) against(&#x27;aaa&#x27;);</span><br></pre></td></tr></table></figure><p>全文索引使用注意事项：</p><ul><li>全文索引必须在字符串、文本字段上建立。<ul><li>全文索引字段值必须在最小字符和最大字符之间的才会有效。（innodb：3-84；myisam：4-84）</li></ul></li><li>全文索引字段值要进行切词处理，按syntax字符进行切割，例如b+aaa，切分成b和aaa</li><li>全文索引匹配查询，默认使用的是等值匹配，例如a匹配a，不会匹配ab,ac。如果想匹配可以在布尔模式下搜索a*  </li></ul><h1 id="二、索引的原理"><a href="#二、索引的原理" class="headerlink" title="二、索引的原理"></a>二、索引的原理</h1><h1 id="三、索引的分析和优化"><a href="#三、索引的分析和优化" class="headerlink" title="三、索引的分析和优化"></a>三、索引的分析和优化</h1><h2 id="1、Explain"><a href="#1、Explain" class="headerlink" title="1、Explain"></a>1、Explain</h2><p>MySQL提供的explain命令，可以对select语句进行分析，并输出select 查询执行的详细信息，可以供开发人员查看，进而帮助开发人员针对性优化。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from user WHERE id &lt; 3;</span><br></pre></td></tr></table></figure><p>EXPLAIN 命令的输出内容大致如下：  </p><p><img src="http://lzcoder.cn/image-20211206172601998.png" alt="image-20211206172601998"></p><h3 id="（一）select-type"><a href="#（一）select-type" class="headerlink" title="（一）select_type"></a>（一）select_type</h3><p>表示查询的类型，常见的值有以下情况</p><ul><li>SIMPLE：表示查询语句不包含子查询或union  </li><li>PRIMARY：表示此查询是最外层查询</li><li>UNION：表示此查询是UNION的第二个或后续的查询  </li><li>DEPENDENT UNION：UNION中的第二个或后续的查询语句，使用了外面查询结果  </li><li>UNION RESULT：UNION的结果  </li><li>SUBQUERY：SELECT子查询语句  </li><li>SUBQUERY：SELECT子查询语句  </li></ul><p><strong>最常见的查询类型就是SIMPLE，表示我们查询没有子查询也没有用到union查询</strong></p><h3 id="（二）type"><a href="#（二）type" class="headerlink" title="（二）type"></a>（二）type</h3><p>表示存储引擎查询数据时采用的方式。比较重要的一个属性，通过它可以判断出查询是全表扫描还是基于索引的部分扫描。常用属性值如下，从上至下效率依次增强。  </p><ul><li>ALL：表示全表扫描，性能最差。</li><li>index：表示基于索引的全表扫描，先扫描索引再扫描全表数据。</li><li>range：表示使用索引范围查询。使用&gt;、&gt;=、&lt;、&lt;=、in等等。</li><li>ref：表示使用非唯一索引进行单值查询。</li><li>eq_ref：一般情况下出现在多表join查询，表示前面表的每一个记录，都只能匹配后面表的一行结果。</li><li>const：表示使用主键或唯一索引做等值查询，常量查询。</li><li>NULL：表示不用访问表，速度最快  </li></ul><h3 id="（三）possible-keys"><a href="#（三）possible-keys" class="headerlink" title="（三）possible_keys"></a>（三）possible_keys</h3><p>表示查询时能够使用到的索引。注意并不一定会真正使用，显示的是索引名称。  </p><h3 id="（四）key"><a href="#（四）key" class="headerlink" title="（四）key"></a>（四）key</h3><p>表示查询时真正使用到的索引，显示的是索引名称。  </p><h3 id="（五）rows"><a href="#（五）rows" class="headerlink" title="（五）rows"></a>（五）rows</h3><p>MySQL查询优化器会根据统计信息，估算SQL要查询到结果需要扫描多少行记录。原则上rows是越少效率越高，可以直观的了解到SQL效率高低。  </p><h3 id="（六）key-len"><a href="#（六）key-len" class="headerlink" title="（六）key_len"></a>（六）key_len</h3><p>表示查询使用了索引的字节数量。可以判断是否全部使用了组合索引。<br>key_len的计算规则如下：</p><ul><li>字符串类型<br>字符串长度跟字符集有关：latin1=1、gbk=2、utf8=3、utf8mb4=4<br>char(n)：n*字符集长度<br>varchar(n)：n * 字符集长度 + 2字节</li><li>数值类型<br>TINYINT：1个字节<br>SMALLINT：2个字节<br>MEDIUMINT：3个字节<br>INT、FLOAT：4个字节<br>BIGINT、DOUBLE：8个字节</li><li>时间类型<br>DATE：3个字节<br>TIMESTAMP：4个字节<br>DATETIME：8个字节</li><li>字段属性<br>NULL属性占用1个字节，如果一个字段设置了NOT NULL，则没有此项。</li></ul><h3 id="（七）Extra"><a href="#（七）Extra" class="headerlink" title="（七）Extra"></a>（七）Extra</h3><p>Extra表示很多额外的信息，各种操作会在Extra提示相关信息，常见几种如下：</p><ul><li>Using where<br>表示查询需要通过索引回表查询数据。</li><li>Using index<br>表示查询需要通过索引，索引就可以满足所需数据。</li><li>Using filesort<br>表示查询出来的结果需要额外排序，数据量小在内存，大的话在磁盘，因此有Using filesort建议优化。</li><li>Using temprorary<br>查询使用到了临时表，一般出现于去重、分组等操作。  </li></ul><h2 id="2、索引失效的七种情况"><a href="#2、索引失效的七种情况" class="headerlink" title="2、索引失效的七种情况"></a>2、索引失效的七种情况</h2><h3 id="（一）like-‘-XX’"><a href="#（一）like-‘-XX’" class="headerlink" title="（一）like ‘%XX’"></a>（一）like ‘%XX’</h3><h3 id="（二）where-索引列使用了函数"><a href="#（二）where-索引列使用了函数" class="headerlink" title="（二）where 索引列使用了函数"></a>（二）where 索引列使用了函数</h3><h3 id="（三）违反最左前缀原则"><a href="#（三）违反最左前缀原则" class="headerlink" title="（三）违反最左前缀原则"></a>（三）违反最左前缀原则</h3><h3 id="（四）有or关键字"><a href="#（四）有or关键字" class="headerlink" title="（四）有or关键字"></a>（四）有or关键字</h3><h3 id="（五）where-索引列有运算"><a href="#（五）where-索引列有运算" class="headerlink" title="（五）where 索引列有运算"></a>（五）where 索引列有运算</h3><h3 id="（六）需要类型转换"><a href="#（六）需要类型转换" class="headerlink" title="（六）需要类型转换"></a>（六）需要类型转换</h3><h3 id="（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）"><a href="#（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）" class="headerlink" title="（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）"></a>（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）</h3><p>​                    <a href="https://www.cnblogs.com/liehen2046/p/11052666.html">索引失效的7种情况</a></p><h2 id="3、回表查询"><a href="#3、回表查询" class="headerlink" title="3、回表查询"></a>3、回表查询</h2><p>在之前介绍过，InnoDB索引有聚簇索引和辅助索引。聚簇索引的叶子节点存储行记录，InnoDB必须要有，且只有一个。辅助索引的叶子节点存储的是主键值和索引字段值，通过辅助索引无法直接定位行记录，通常情况下，需要扫码两遍索引树。先通过辅助索引定位主键值，然后再通过聚簇索引定位行记录，这就叫做回表查询，它的性能比扫一遍索引树低。<br>总结：<strong>通过索引查询主键值，然后再去聚簇索引查询记录信息</strong>  </p><h2 id="4、索引覆盖"><a href="#4、索引覆盖" class="headerlink" title="4、索引覆盖"></a>4、索引覆盖</h2><p>简单来说，通过索引就能满足查询结果。不需要再去查询行记录。</p><p>在MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为Using index时，能够触发索引覆盖  </p><p>不管是SQL-Server官网，还是MySQL官网，都表达了：<strong>只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快，这就叫做索引覆盖</strong>。<br>实现索引覆盖最常见的方法就是：<strong>将被查询的字段，建立到组合索引</strong>。  </p><h2 id="5、索引与排序"><a href="#5、索引与排序" class="headerlink" title="5、索引与排序"></a>5、索引与排序</h2><p>MySQL支持filesort和index两种方式排序</p><h3 id="（一）filesort"><a href="#（一）filesort" class="headerlink" title="（一）filesort"></a>（一）filesort</h3><p>先把结果查出，然后在缓存或磁盘进行排序操作，效率较低。  </p><ul><li>双路排序</li></ul><p>需要两次磁盘扫描读取，最终得到用户数据。第一次将排序字段读取出来，然后排序；第二次去读取其他字段数据  </p><ul><li>单路排序</li></ul><h3 id="（二）index"><a href="#（二）index" class="headerlink" title="（二）index"></a>（二）index</h3><p>使用index是指利用索引自动实现排序，不需另做排序操作，效率会比较高。  </p><h2 id="六、NULL查询"><a href="#六、NULL查询" class="headerlink" title="六、NULL查询"></a>六、NULL查询</h2><p>问题：如果MySQL的某一列含有NULL值，那么包含该列的索引是否生效？</p><p>对MySQL来说，NULL是一个特殊的值，从概念上来讲，NULL意味着“一个未知值“，它的处理方式与其他值有些不同，比如：不能使用=、&lt;、&gt;这样的运算符，对NULL做算数运算的结果都是NULL,count时不会包括NULL行等，NULL比空字符串需要更多的存储空间等。</p><p>答：可以，虽然MySQL可以再含有NULL的列上使用索引，但是NULL和其它数据还是有区别的，不建议列上允许未NULL值，最好设置为NOT NULL，并给一个默认值，比如0和空字符串 ‘’ 等，如果时datatime类型，也可以设置系统当前时间或某个固定的特殊值，例如’1970-01-01 00:00:00’  。</p><p>注意：设置默认值的时候，例如0，不要和系统数据产生干扰，如果这个字段0本身就有含义，就不能使用了。</p><h1 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h1><h2 id="1：换一个角度看-B-树"><a href="#1：换一个角度看-B-树" class="headerlink" title="1：换一个角度看 B+ 树"></a>1：<a href="https://mp.weixin.qq.com/s/A5gNVXMNE-iIlY3oofXtLw">换一个角度看 B+ 树</a></h2><h2 id="2：为什么-MySQL-采用-B-树作为索引"><a href="#2：为什么-MySQL-采用-B-树作为索引" class="headerlink" title="2：为什么 MySQL 采用 B+ 树作为索引"></a>2：<a href="https://mp.weixin.qq.com/s/w1ZFOug8-Sa7ThtMnlaUtQ">为什么 MySQL 采用 B+ 树作为索引</a></h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;s索引的学习对于数据库优化有着至关重要的作用，深入理解索引机制，才能更好的优化查询机制&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
