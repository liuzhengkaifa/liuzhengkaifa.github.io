<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序小牛</title>
  
  <subtitle>来了就随便看看，虽然没有什么好看的~~</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-21T01:34:34.258Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>coder-Man</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java端实用技术文档汇总</title>
    <link href="http://example.com/2022/07/20/Java%E7%AB%AF%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2022/07/20/Java%E7%AB%AF%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E6%B1%87%E6%80%BB/</id>
    <published>2022-07-20T10:11:58.000Z</published>
    <updated>2022-07-21T01:34:34.258Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lzcoder.cn/book/java_dev_book.pdf">java开发手册-嵩山版</a></p><p><a href="http://lzcoder.cn/book%2Fsoftware_install_guide.pdf">编程环境和软件工具安装手册</a></p><p><a href="http://lzcoder.cn/book%2Fsjms.pdf">设计模式-小傅哥</a></p><p><a href="http://lzcoder.cn/book/alifacebook.pdf">阿里巴巴Java高级架构师面试题总结（2021）</a></p><p><a href="http://lzcoder.cn/book/project_install.pdf">项目部署知道手册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://lzcoder.cn/book/java_dev_book.pdf&quot;&gt;java开发手册-嵩山版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lzcoder.cn/book%2Fsoftware_install_guide.pdf&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>远程调用组件</title>
    <link href="http://example.com/2022/07/08/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2022/07/08/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6/</id>
    <published>2022-07-08T01:47:49.000Z</published>
    <updated>2022-07-08T06:51:29.680Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Feign是Netflix开发的一个轻量级Restflu的HTTP服务客户端（用它来发起请求，远程调用的）</strong>，是以接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用，Feign被广泛应用再Spring Cloud的解决方案中。</p><p>类似于Dubbo，服务消费者拿到服务提供者的接口，然后像调用本地接口方法一样去调用，实际发出的是远程的请求。</p><span id="more"></span><p><strong>本质：封装了Http调用流程，更符合面向接口化编程习惯，类似于Dubbo的服务调用</strong></p><h1 id="一、Feign配置应用"><a href="#一、Feign配置应用" class="headerlink" title="一、Feign配置应用"></a>一、Feign配置应用</h1><p>在效果上：</p><p>Feign = RestTemplate + Ribbon +  Hystrix</p><h2 id="1、消费者工程应用"><a href="#1、消费者工程应用" class="headerlink" title="1、消费者工程应用"></a>1、消费者工程应用</h2><ol><li>引入Feign依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动类添加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启服务发现</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启Feign</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutodeliverFeignApplication8092</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(AutodeliverFeignApplication8092.class,args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此时去掉Hystrix熔断支持注解，<code>@EnableCircuitBreaker  </code>即可包括引⼊的依赖，因为Feign会⾃动引⼊ </p><ol start="3"><li>常见feign接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;sc-service-resume&quot;)</span><span class="comment">// name：调⽤的服务名称，和服务提供者yml⽂件中spring.application.name保持⼀致</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResumeClientFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/resume/openstate/&#123;userId&#125;&quot;,method= RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findResumeOpenState</span><span class="params">(<span class="meta">@PathVariable(value =&quot;userId&quot;)</span> Long userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用feign接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ResumeClientFeign resumeClientFeign; <span class="comment">//声明、注入feingclient</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Integer resumeOpenState = resumeClientFeign.findResumeOpenState(<span class="number">15451321L</span>);  <span class="comment">//方法里直接使用</span></span><br><span class="line">System.out.println(<span class="string">&quot;resumeOpenState = &quot;</span> + resumeOpenState);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、Feign对负载均衡的支持"><a href="#2、Feign对负载均衡的支持" class="headerlink" title="2、Feign对负载均衡的支持"></a>2、Feign对负载均衡的支持</h2><p>Feign本身已经集成了Ribbon依赖和自动配置，我们不需要额外引入依赖，可以通过ribbon.xx来进行全局配置，也可以通过服务名.ribbon.xx来对指定服务进行细节配置</p><ul><li>Feign默认请求处理时长1s，可自定义Feign超时设置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#针对的被调用方微服务名称,不加就是全局生效</span></span><br><span class="line"><span class="attr">sc-service-resume:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment">#请求连接超时时间</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">2000</span></span><br><span class="line">    <span class="comment">#请求处理超时时间</span></span><br><span class="line">    <span class="comment">##########################################Feign超时时长设置</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">3000</span></span><br><span class="line">    <span class="comment">#对所有操作都进行重试</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">####根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例（次数由MaxAutoRetries配置），</span></span><br><span class="line">    <span class="comment">####如果不行，就换一个实例进行访问，如果还不行，再换一次实例访问（更换次数由MaxAutoRetriesNextServer配置），</span></span><br><span class="line">    <span class="comment">####如果依然不行，返回失败信息。</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment">#对当前选中实例重试次数，不包括第一次调用</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">0</span> <span class="comment">#切换实例的重试次数</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RoundRobinRule</span> <span class="comment">#负载策略调整</span></span><br></pre></td></tr></table></figure><h2 id="3、Feign对熔断器的支持"><a href="#3、Feign对熔断器的支持" class="headerlink" title="3、Feign对熔断器的支持"></a>3、Feign对熔断器的支持</h2><ol><li><p>开启Feign对熔断器的支持</p></li><li><p>超时时长</p><ol><li>Feign的超时时长就是上面Ribbon的超时时长设置</li><li>Hystrix超时设置（就按照之前Hystri设置方式就OK)</li></ol><p>超时时长，熔断的时候就是根据这两个时间的最小值来进行的，即处理时长超过了最短的那个超时时间了就熔断进行回退降级逻辑</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启Feign的熔断功能</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="comment">##########################################Hystrix的超时时长设置</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">15000</span></span><br></pre></td></tr></table></figure><p><strong>编写回退逻辑</strong></p><ol><li>编写降级逻辑 类 UserInfoFallbackService 实现 feign接口，添加注解@Comment能被扫描到，实现接口方法</li><li>类添加 fallback = UserInfoFallbackService.class  关联回退处理类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;sc-service-resume&quot;,fallback = ReusmeFailBackService.class,path = &quot;/resume&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResumeClientFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/openstate/&#123;userId&#125;&quot;,method= RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findResumeOpenState</span><span class="params">(<span class="meta">@PathVariable(value =&quot;userId&quot;)</span> Long userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 降级回退逻辑需要定义⼀个类，实现FeignClient接⼝，实现接⼝中的⽅法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//需要被扫描到</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReusmeFailBackService</span> <span class="keyword">implements</span> <span class="title">ResumeClientFeign</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findResumeOpenState</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Feign是Netflix开发的一个轻量级Restflu的HTTP服务客户端（用它来发起请求，远程调用的）&lt;/strong&gt;，是以接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用，Feign被广泛应用再Spring Cloud的解决方案中。&lt;/p&gt;
&lt;p&gt;类似于Dubbo，服务消费者拿到服务提供者的接口，然后像调用本地接口方法一样去调用，实际发出的是远程的请求。&lt;/p&gt;</summary>
    
    
    
    <category term="微服务" scheme="http://example.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>服务注册中心</title>
    <link href="http://example.com/2022/07/07/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://example.com/2022/07/07/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <published>2022-07-07T03:39:36.000Z</published>
    <updated>2022-07-19T06:27:47.526Z</updated>
    
    <content type="html"><![CDATA[<p>分布式微服务项目离不开服务注册与发现，文章通过记录主流服务注册中心，并列举其差异对比进行核心内容学习。主要包含 Nacos、Zookeeper、Eureka、Consul、Etcd 。</p><span id="more"></span><h1 id="一、关于服务注册中心"><a href="#一、关于服务注册中心" class="headerlink" title="一、关于服务注册中心"></a>一、关于服务注册中心</h1><p><strong>目的：服务注册中心本质上是为了解耦服务提供者和服务消费者</strong></p><p><strong>一般原理：</strong></p><p><img src="http://lzcoder.cn/image-20220707115832961.png" alt="image-20220707115832961"></p><p>​          分布式微服务架构中，服务注册中心用于存储服务提供者地址信息、服务发布相关的属性信息，消费者通过主动查询和被动通知的方式获取服务提供者的地址信息，而不再需要通过硬编码方式得到提供者的地址信息。消费者只需要知道当前系统发布了哪些服务，而不需要知道服务具体存在于什么位置，这就是透明化路由。</p><p>步骤一：服务提供者启动服务</p><p>步骤二：服务提供者将相关服务信息主动注册到注册中心</p><p>步骤三：服务消费者获取服务注册信息</p><p>​                服务消费者获取服务信息主要有两种模式</p><ol><li>pull模式：服务消费者可以主动拉取可用的服务提供者清单</li><li>push模式：服务消费者订阅服务（当服务提供者有变化是，注册中心也会主动推送更新后的服务清单给消费者）</li></ol><p>步骤四：服务消费者直接调用服务提供者</p><p>另外，注册中心也需要完成服务提供者的健康监控，当发现服务提供者失效时需要及时剔除</p><h1 id="二、主流服务注册中心"><a href="#二、主流服务注册中心" class="headerlink" title="二、主流服务注册中心"></a>二、主流服务注册中心</h1><h2 id="1、Nacos"><a href="#1、Nacos" class="headerlink" title="1、Nacos"></a>1、Nacos</h2><p>Nacos是一个更易于构建云原生应用的动态<strong>服务发现、配置管理和服务管理</strong>平台。简单来说，Nacos 就是 注册中心 + 配置中心的组合，帮助我们解决微服务的开发中必回设计到的服务注册与发现，服务配置，服务管理等问题。Nacos是Spring Cloud Alibaba 核心组件之一，服务服务注册与发现，还有配置。</p><h2 id="2、Zookeeper"><a href="#2、Zookeeper" class="headerlink" title="2、Zookeeper"></a>2、Zookeeper</h2><p>zookeeper之所以用来做服务注册中心，主要是因为它具有节点变更通知功能，只要客户端监听相关服务节点，服务节点的所有变更，都能及时的通知到监听客户端，这样作为调用方只要使用Zookeeper的客户端就能实现服务节点的订阅和变更通知功能了。另外，Zookeeper的可用性也可以，因为只要半数以上的选举节点存活，整个集群就是可用的。</p><p>​        <strong>zookeeper的本质=存储+监听通知</strong></p><p>zookeeper是一个分布式服务框架，是Apache Hadoop的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理。</p><h2 id="3、Eureka"><a href="#3、Eureka" class="headerlink" title="3、Eureka"></a>3、Eureka</h2><p>由Netflix开源，并被集成到Spring Cloud体系中，它是基于 Restful API风格开发的服务注册与发现组件。</p><h2 id="4、Consul"><a href="#4、Consul" class="headerlink" title="4、Consul"></a>4、Consul</h2><p>COnsul是HashiCorp基于Go语言开发的支持多数据中心分布式高可用的服务发布和注册服务软件，采用Raft算法保证服务的一致性，并且支持健康检查。</p><p><strong>分布式的CAP原则</strong></p><p>C：数据一致性          A：高可用性            P：分区容错性</p><p>p分区容错性是一定会在分布式系统中满足的，C数据一致性和A高可用只能满足一个，因为分布式系统要不就是CP否则就是AP</p><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>对外暴露接口</th></tr></thead><tbody><tr><td>Nacos</td><td>Java</td><td>支持AP/CP切换</td><td>HTTP</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>客户端</td></tr><tr><td>Eureka</td><td>Java</td><td>AP(自我保护机制，保证可用)</td><td>HTTP</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>HTTP/DNS</td></tr></tbody></table><h1 id="三、服务注册中心详解"><a href="#三、服务注册中心详解" class="headerlink" title="三、服务注册中心详解"></a>三、服务注册中心详解</h1><h2 id="1、Nacos-1"><a href="#1、Nacos-1" class="headerlink" title="1、Nacos"></a>1、Nacos</h2><blockquote><p>Nacos 就是 注册中心 + 配置中心的组合 相当于（Eureka + config + Bus)</p></blockquote><p><a href="https://nacos.io/zh-cn/">官网地址</a></p><p><a href="https://github.com/alibaba/Nacos">下载地址</a></p><h3 id="一、功能特性"><a href="#一、功能特性" class="headerlink" title="一、功能特性"></a>一、功能特性</h3><ul><li>服务发现与健康检查</li><li>动态配置管理</li><li>动态DNS服务</li><li>服务和元数据管理（管理平台的角都，nacos也有一个UI界面，可以看到注册的服务以及实例信息（元数据信息）等），动态的服务权重调整，动态服务优雅下线，都可以去做</li></ul><h3 id="二、Nacos单例服务部署"><a href="#二、Nacos单例服务部署" class="headerlink" title="二、Nacos单例服务部署"></a>二、Nacos单例服务部署</h3><ol><li>下载安装包，执行命令启动</li></ol><p>​            <a href="https://nacos.io/zh-cn/docs/quick-start.html">快速开始</a>，准备环境，下载稳定版本包</p><p>执行命令，以单例方式启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone   </span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20220707141826305.png" alt="image-20220707141826305"></p><ol start="2"><li>启动完成访问nacos管理界⾯： <a href="http://127.0.0.1:8848/nacos/#/login%EF%BC%88%E9%BB%98%E8%AE%A4%E7%AB%AF%E2%BC%9D8848%EF%BC%8C%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81">http://127.0.0.1:8848/nacos/#/login（默认端⼝8848，账号和密码</a> nacos/nacos）  </li></ol><p><img src="http://lzcoder.cn/image-20220707141948959.png" alt="image-20220707141948959"></p><h3 id="三、服务注册中心"><a href="#三、服务注册中心" class="headerlink" title="三、服务注册中心"></a>三、服务注册中心</h3><h4 id="1、服务提供者注册到Nacos"><a href="#1、服务提供者注册到Nacos" class="headerlink" title="1、服务提供者注册到Nacos"></a>1、服务提供者注册到Nacos</h4><p>阿里云测试环境：<a href="http://101.132.140.20:18848/nacos">http://101.132.140.20:18848/nacos</a>  </p><ul><li>在项目parent的pom文件增加SCA依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SCA --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在服务提供者工程pom文件增加Nacos客户端配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sc-service-resume</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  <span class="comment">#配置Nacos地址</span></span><br></pre></td></tr></table></figure><ul><li>启动类添加 <code>@EnableDiscoveryClient</code> 注解，开启服务注册发现，启动项目</li></ul><p><img src="http://lzcoder.cn/image-20220707161312286.png" alt="image-20220707161312286"></p><p><img src="http://lzcoder.cn/image-20220707162951972.png" alt="image-20220707162951972"></p><ul><li><p><strong>保护阈值</strong>：可以设置未0-1之间的浮点数，它其实是一个比例值（当前服务健康实例/当前服务总实例数）</p><p><strong>场景</strong>：⼀般流程下， nacos是服务注册中⼼，服务消费者要从nacos获取某⼀个服务的可⽤实例信息，对于服务实例有健康/不健康状态之分， nacos在返回给消费者实例信息的时候，会返回健康实例。这个时候在⼀些⾼并发、⼤流量场景下会存在⼀定的问<br>题如果服务A有100个实例， 98个实例都不健康了，只有2个实例是健康的，如果nacos只返回这两个健康实例的信息的话，那么后续消费者的请求将全部被分配到这两个实例，流量洪峰到来， 2个健康的实例也扛不住了，整个服务A就扛不住，上游的微<br>服务也会导致崩溃，产⽣雪崩效应。</p><p><strong>意义</strong>：当服务A健康实例数/总实例数&lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态为true）</p><p>nacos 将会把该服务所有实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也比造成雪崩要好，牺牲了一些请求，保证了整个系统的一个可用。</p></li></ul><h4 id="2、服务消费者消费服务"><a href="#2、服务消费者消费服务" class="headerlink" title="2、服务消费者消费服务"></a>2、服务消费者消费服务</h4><ul><li>配置同服务提供者</li></ul><p><img src="http://lzcoder.cn/image-20220707170835825.png" alt="image-20220707170835825"></p><p><img src="http://lzcoder.cn/image-20220707170850732.png" alt="image-20220707170850732"></p><h3 id="四、Nacos数据模型"><a href="#四、Nacos数据模型" class="headerlink" title="四、Nacos数据模型"></a>四、Nacos数据模型</h3><p>Namespace命名空间、Group分组、集群这些都是为了进行归类管理，把<strong>服务</strong>和配置文件进行归类，归类后就可以实现一定的效果，比如隔离</p><p>​    比如：对应服务来说，不同命名空间中的服务不能够互相访问调用</p><p><img src="http://lzcoder.cn/image-20220707171210852.png" alt="image-20220707171210852"></p><p><strong>Namespace</strong>：命名空间，对不同的环境进行隔离，例如隔离开发环境、测试环境和生产环境</p><p><strong>Group</strong>：分组，将若干个服务或者若干个配置归集为一组，通常习惯一个系统归为一个组</p><p><strong>Service</strong>：某一个服务，比如用户微服务</p><p><strong>DataId</strong>：配置集或者可以认为是一个配置文件</p><p>Namespace+group+service 相当于坐标，锁定了服务</p><p>Namespace+group+DataId 相当于坐标，锁定了配置文件</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td>Namespace</td><td>代表不同的环境，如开发：dev，测试：test，生产prod</td></tr><tr><td>Group</td><td>代表某项目，例如授信项目</td></tr><tr><td>service</td><td>某个项目中具体的xxx服务</td></tr><tr><td>DataId</td><td>某个项目中具体的xxx配置文件</td></tr></tbody></table><h3 id="五、数据配置中心"><a href="#五、数据配置中心" class="headerlink" title="五、数据配置中心"></a>五、数据配置中心</h3><h4 id="1、编写配置文件"><a href="#1、编写配置文件" class="headerlink" title="1、编写配置文件"></a>1、编写配置文件</h4><p>在Nacos server编写配置文件 示例：sc-service-resume.yaml</p><p><img src="http://lzcoder.cn/image-20220707205011470.png" alt="image-20220707205011470"></p><h4 id="2、改造具体微服务"><a href="#2、改造具体微服务" class="headerlink" title="2、改造具体微服务"></a>2、改造具体微服务</h4><p>使其成为Nacos config client，能够从Nacos中获到配置信息</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.xml 增加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring</span> </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">d2d6d364-3d73-465d-bd14-1f7763a96aeb</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure><p>微服务中通过 Namespace + Group +dataId来锁定配置文件，NameSpace不指定默认public，Group不指定默认DEFAULT_GROUP</p><p><strong>dataId的完整格式如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><ul><li><code>prefix</code>默认为<code>spring.application.name</code>的值，也可以通过配置<code>spring.cloud.nacos.config.prefix</code>来配置</li><li>spring.profile.active即为当前环境对应的profile。当spring.profile.active为空时，对应的连接符 <code>-</code>也将不存在，dataId的拼接就变成 </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><ul><li><code>file-exetension</code>为配置内容的数据格式，可以通过<code>spring.cloud.nacos.config.file-extension</code>来配置，目前只支持<code>properties</code>和<code>yaml</code>类型</li></ul><h4 id="3、编写类使用Nacos配置"><a href="#3、编写类使用Nacos配置" class="headerlink" title="3、编写类使用Nacos配置"></a>3、编写类使用Nacos配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/resume&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span>   <span class="comment">//可根据Nacos配置值动态刷新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResumeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResumeService resumeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lz.message&#125;&quot;)</span>    <span class="comment">//获取Nacos对应属性值</span></span><br><span class="line">    <span class="keyword">private</span> String lzMessage;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/viewconfig&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">viewConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;lzMessage = &quot;</span> + lzMessage);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message=======》&quot;</span>+lzMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、扩展使用多个配置"><a href="#4、扩展使用多个配置" class="headerlink" title="4、扩展使用多个配置"></a>4、扩展使用多个配置</h4><p>使用ext-fonfig</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sc-service-resume</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">d2d6d364-3d73-465d-bd14-1f7763a96aeb</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="string">ext-config[0]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">sc-service-resume-2.yaml</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">ext-config[2]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">sc-service-resume-3.yaml</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="5、Nachos数据持久化"><a href="#5、Nachos数据持久化" class="headerlink" title="5、Nachos数据持久化"></a>5、Nachos数据持久化</h4><p>Nacos默认使用嵌入式数据库进行数据存储，它支持改为外部Mysql存储</p><ol><li>新建数据库 nacos_config，数据库初始化脚本文件 <code>$&#123;nacoshome/conf/nacos-mysql.sql&#125;</code></li><li>修改<code>$&#123;nacoshome/conf/applicaion.properties&#125;</code>增加Mysql数据源配置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?</span></span><br><span class="line"><span class="attr">characterEncoding</span>=<span class="string">utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;au</span></span><br><span class="line"><span class="attr">toReconnect</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h2 id="2、Eureka"><a href="#2、Eureka" class="headerlink" title="2、Eureka"></a>2、Eureka</h2><h3 id="一、基础架构"><a href="#一、基础架构" class="headerlink" title="一、基础架构"></a>一、基础架构</h3><p><img src="http://lzcoder.cn/image-20220708180524528.png" alt="image-20220708180524528"></p><ol><li>服务提供者：client，项目启动后，会向Eureka Server注册中心注册，并通过心跳来续约保持节点联系</li><li>Eureka Server注册中心：需要自己创建工程，client需要引入eureka client的相关jar，并进行相关配置，微服务才能和Eureka Server建立联系</li><li>客户端消费者：客户端消费者会定期拉取Eureka Server注册中心服务列表，并以缓存形式保存</li></ol><h3 id="二、交互流程及原理"><a href="#二、交互流程及原理" class="headerlink" title="二、交互流程及原理"></a>二、交互流程及原理</h3><p><img src="http://lzcoder.cn/image-20220708181105244.png" alt="image-20220708181105244"></p><p>Eureka包含两个组件：Eureka Server 和 Eureka Client，Eureka是一个Java客户端，用于简化与Eureka Server的交互；Eureka Server提供服务发现的能力，各个微服务启动时，会通过Eureka Client向Eureka Server 注册自己的信息（例如网络信息），Eureka Server会存储该服务的信息</p><ol><li>图中us-east-1c、us-east-1d、us-east-1e 代表不同的地区也就是不同的机房</li><li>图中每一个Eureka Server都是一个集群</li><li>图中Application Service 作为服务提供者向Eureka Server中注册服务，Eureka Server接收到注册事件会在集群和分区中进行数据同步，Application Client作为消费端（服务消费者）可以从Eureka Server中获取到服务注册信息，进行服务调用</li><li>微服务启动后，会周期性的向Eureka Server发送心跳（默认周期为30秒）</li><li>Eureka Server在一定时间内没有接收到某个微服务的心跳，Eureka Server 将会注销该微服务节点（默认90秒）</li><li>每个Eureka Server同时也是Eureka Client，多个Eureka Server之间通过复制的方式完成服务注册列表的同步</li><li>Eureka Client<strong>会缓存Eureka Server中的信息。即使所有的EureKa Server节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者</strong></li></ol><p><strong>Eureka通过心跳检测、健康检查和客户端缓存等机制，提高系统的灵活性、可伸缩性和可用性</strong></p><h3 id="三、搭建单例Eureka-Server-服务注册中心"><a href="#三、搭建单例Eureka-Server-服务注册中心" class="headerlink" title="三、搭建单例Eureka Server 服务注册中心"></a>三、搭建单例Eureka Server 服务注册中心</h3><h4 id="1、创建一个maven项目，引入依赖"><a href="#1、创建一个maven项目，引入依赖" class="headerlink" title="1、创建一个maven项目，引入依赖"></a>1、创建一个maven项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring boot 父启动器依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lz.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Eureka server依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引⼊Jaxb，开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10-b140310.1920<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引⼊Jaxb，结束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、启动类添加注解-EnableEurekaServer"><a href="#2、启动类添加注解-EnableEurekaServer" class="headerlink" title="2、启动类添加注解 EnableEurekaServer"></a>2、启动类添加注解 EnableEurekaServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//声明当前项目为Eureka服务</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="3、添加配置文件-application-yaml"><a href="#3、添加配置文件-application-yaml" class="headerlink" title="3、添加配置文件 application.yaml"></a>3、添加配置文件 application.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lz-eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 自己就是server 不用注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>  <span class="comment"># 自己是server 就不需要从server获取服务列表</span></span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h4><p>访问：<a href="http://localhost:9527/">http://localhost:9527/</a> 即可启动</p><h3 id="四、注册生产者"><a href="#四、注册生产者" class="headerlink" title="四、注册生产者"></a>四、注册生产者</h3><h4 id="1、创建一个maven项目，引入依赖-1"><a href="#1、创建一个maven项目，引入依赖-1" class="headerlink" title="1、创建一个maven项目，引入依赖"></a>1、创建一个maven项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、application-yaml配置文件"><a href="#2、application-yaml配置文件" class="headerlink" title="2、application.yaml配置文件"></a>2、application.yaml配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://101.132.140.20:9527/eureka/</span><br><span class="line">    instance:</span><br><span class="line">      prefer-ip-address: true</span><br><span class="line">      instance-id: $&#123;spring.cloud.client.ipaddress&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;:@project.version@</span><br></pre></td></tr></table></figure><h4 id="3、启动类添加注解"><a href="#3、启动类添加注解" class="headerlink" title="3、启动类添加注解"></a>3、启动类添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><h3 id="五、注册消费者"><a href="#五、注册消费者" class="headerlink" title="五、注册消费者"></a>五、注册消费者</h3><p><strong>消费者注册同生产者注册</strong></p><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@SpringBootApplication</span></span><br><span class="line">  <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoDeliverApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          SpringApplication.run(AutoDeliverApplication.class,args);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动类注入RestTemplate</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//控制类使用</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//1.获取eureka中注册的user-service的实例列表</span></span><br><span class="line">  List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;sc-service-resume&quot;</span>);</span><br><span class="line">  <span class="comment">//2.获取实例，就拿第一个</span></span><br><span class="line">  ServiceInstance serviceInstance = instances.get(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//3.根据实例的信息拼接请求地址</span></span><br><span class="line">  String host = serviceInstance.getHost();</span><br><span class="line">  <span class="keyword">int</span> port = serviceInstance.getPort();</span><br><span class="line">  String url = <span class="string">&quot;http://&quot;</span>+host+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/resume/openstate/&quot;</span>+userId;</span><br><span class="line">  <span class="comment">//4.消费者直接调用提供者</span></span><br><span class="line">  Integer forObject = restTemplate.getForObject(url, Integer.class);</span><br><span class="line">  System.out.println(<span class="string">&quot;===========&gt;&gt;&gt;&gt;调用建立微服务，获取到的用户:&quot;</span>+userId+<span class="string">&quot;forObject = &quot;</span> + forObject);</span><br><span class="line">  <span class="keyword">return</span> forObject;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;分布式微服务项目离不开服务注册与发现，文章通过记录主流服务注册中心，并列举其差异对比进行核心内容学习。主要包含 Nacos、Zookeeper、Eureka、Consul、Etcd 。&lt;/p&gt;</summary>
    
    
    
    <category term="微服务" scheme="http://example.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ学习记录</title>
    <link href="http://example.com/2022/04/02/RocketMQ%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/04/02/RocketMQ%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-02T07:12:39.000Z</published>
    <updated>2022-07-21T01:17:35.483Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章旨在主要记录如何快速上手rocketmq</p><span id="more"></span><p>参考博文：</p><p><a href="https://www.php.cn/faq/453886.html">消息中间件的使用场景有哪些</a></p><p><a href="https://www.cnblogs.com/luckyplj/p/16007605.html">RocketMq安装(windows环境)与Rocketmq-dashboard的web管理页面部署</a></p><p><a href="https://blog.csdn.net/datastructure18/article/details/124538735">RocketMQ消息存储之刷盘机制（原理篇）</a></p><p><a href="https://blog.csdn.net/sangjunhong/article/details/124147696">RabbitMQ的ack机制</a></p><h1 id="一、生产者示例"><a href="#一、生产者示例" class="headerlink" title="一、生产者示例"></a>一、生产者示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lz.coder.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年07月19日 17:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rocketmq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRocket</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMq&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMq</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1 获取消息生产者</span></span><br><span class="line">        DefaultMQProducer defaultMQProducer = getRocketMqProducer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 启动生产者</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            defaultMQProducer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3 构建消息对象，主要是设置消息的主题、标签、内容</span></span><br><span class="line">        JSONObject jsonObject = generateMsgContent();</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;lucky-topic&quot;</span>, <span class="string">&quot;lucky-tag&quot;</span>, jsonObject.toString().getBytes());</span><br><span class="line">        <span class="comment">// 4 发送消息</span></span><br><span class="line">        SendResult result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = defaultMQProducer.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;SendResult--&gt;&quot;</span> + result);</span><br><span class="line">        <span class="comment">// TODO 6 关闭生产者</span></span><br><span class="line">        defaultMQProducer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取配置文件中设置的rocketmq相关属性，创建消息生产者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultMQProducer <span class="title">getRocketMqProducer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String mqAddress = <span class="string">&quot;127.0.0.1:9876&quot;</span>;</span><br><span class="line">        String groupId = <span class="string">&quot;FLEP_FILE&quot;</span>;</span><br><span class="line">        String msgTimeout = <span class="string">&quot;10000&quot;</span>;</span><br><span class="line">        String retryWhenSendFailed = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">        <span class="comment">// 1 创建消息生产者，指定生成组名</span></span><br><span class="line">        DefaultMQProducer defaultMQProducer = <span class="keyword">new</span> DefaultMQProducer(groupId);</span><br><span class="line">        <span class="comment">// 2 指定NameServer的地址</span></span><br><span class="line">        defaultMQProducer.setNamesrvAddr(mqAddress);</span><br><span class="line">        <span class="comment">// 3 设置消息超时时间</span></span><br><span class="line">        defaultMQProducer.setSendMsgTimeout(Integer.parseInt(msgTimeout));</span><br><span class="line">        <span class="comment">// 4 同步发送消息，如果SendMsgTimeout时间内没有发送成功，则重试retryWhenSendFailed次</span></span><br><span class="line">        defaultMQProducer.setRetryTimesWhenSendFailed(Integer.parseInt(retryWhenSendFailed));</span><br><span class="line">        <span class="keyword">return</span> defaultMQProducer;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟生成消息体的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JSONObject <span class="title">generateMsgContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JSONObject jsonObject=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        Random random=<span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> fileId = random.nextInt(<span class="number">10000</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;fileId&quot;</span>,String.valueOf(fileId));</span><br><span class="line">        LocalDateTime localDateTime=LocalDateTime.now();</span><br><span class="line">        String fileCreateDate = localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        jsonObject.put(<span class="string">&quot;fileCreateDate&quot;</span>,fileCreateDate );</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、消费者示例"><a href="#二、消费者示例" class="headerlink" title="二、消费者示例"></a>二、消费者示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lz.coder.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年07月19日 18:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rocketmq2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveRocketMsg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/receiveMqMsg&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMqMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1 获取消息消费者</span></span><br><span class="line">        DefaultMQPushConsumer defaultMQPushConsumer = getRocketMqConsumer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 进行订阅：注册回调函数，编写处理消息的逻辑</span></span><br><span class="line">        defaultMQPushConsumer.registerMessageListener((List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext context) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// try catch(throwable)确保不会因为业务逻辑的异常，导致消息出现重复消费的现象</span></span><br><span class="line">            <span class="comment">// org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService.ConsumeRequest.run()中会对Throwable进行捕获，</span></span><br><span class="line">            <span class="comment">//并且返回ConsumeConcurrentlyStatus.RECONSUME_LATER</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到消息--》&quot;</span> + list);</span><br><span class="line">                <span class="keyword">for</span> (MessageExt messageExt : list) &#123;</span><br><span class="line">                    String message=<span class="keyword">new</span> String(messageExt.getBody(),RemotingHelper.DEFAULT_CHARSET);</span><br><span class="line">                    JSONObject object=JSONObject.parseObject(message);</span><br><span class="line">                    String fileId = (String) object.get(<span class="string">&quot;fileId&quot;</span>);</span><br><span class="line">                    String fileCreateDate = (String) object.get(<span class="string">&quot;fileCreateDate&quot;</span>);</span><br><span class="line">                    log.info(fileId+<span class="string">&quot;:&quot;</span>+fileCreateDate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 启动消费者</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            defaultMQPushConsumer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者启动成功。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultMQPushConsumer <span class="title">getRocketMqConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String mqAddress = <span class="string">&quot;127.0.0.1:9876&quot;</span>;</span><br><span class="line">        String consumerGroup = <span class="string">&quot;FLEP-CONSUMER-TEST&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 创建消费者，指定所属的消费者组名</span></span><br><span class="line">        DefaultMQPushConsumer defaultMQPushConsumer = <span class="keyword">new</span> DefaultMQPushConsumer(consumerGroup);</span><br><span class="line">        <span class="comment">// 2 指定NameServer的地址</span></span><br><span class="line">        defaultMQPushConsumer.setNamesrvAddr(mqAddress);</span><br><span class="line">        <span class="comment">// 3 指定消费者订阅的主题和标签</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            defaultMQPushConsumer.subscribe(<span class="string">&quot;lucky-topic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultMQPushConsumer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章旨在主要记录如何快速上手rocketmq&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>xxl-job任务调度中心使用</title>
    <link href="http://example.com/2022/02/09/xxl-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/02/09/xxl-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-09T07:52:07.000Z</published>
    <updated>2022-07-07T03:31:37.379Z</updated>
    
    <content type="html"><![CDATA[<p>使用开源xxl-job分布式任务调度平台 实现定时任务统一调度管理，开发迅速、学习简单、轻量级、易扩展。</p><span id="more"></span><p>主要参考官方文档内容</p><p><a href="https://www.xuxueli.com/xxl-job/">官方文档</a></p><p><a href="https://github.com/xuxueli/xxl-job">github源码仓库地址</a></p><h1 id="xxl-架构图"><a href="#xxl-架构图" class="headerlink" title="xxl-架构图"></a>xxl-架构图</h1><p><img src="http://lzcoder.cn/image-20220707112919996.png" alt="image-20220707112919996"></p><p>对于一些老项目，可以采用 httpJobHandler方式，通过接口方式实现定时任务实现，也可以作为心跳检查监控项目运行是否正常</p><p><img src="http://lzcoder.cn/image-20220707113010978.png" alt="image-20220707113010978"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用开源xxl-job分布式任务调度平台 实现定时任务统一调度管理，开发迅速、学习简单、轻量级、易扩展。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MyBatisPlus使用</title>
    <link href="http://example.com/2021/12/28/MyBatisPlus%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/12/28/MyBatisPlus%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-28T03:21:02.000Z</published>
    <updated>2022-04-11T06:01:30.925Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis-Plus是MyBatis的增强版，简称（MP），在MyBatis的基础上只做增强，不做改变，为简化而生，提高开发效率。</p><span id="more"></span><h1 id="一、MyBatis-Plus简介"><a href="#一、MyBatis-Plus简介" class="headerlink" title="一、MyBatis-Plus简介"></a>一、MyBatis-Plus简介</h1><p><a href="http://mp.baomidou.com/">官网地址</a></p><p><a href="https://github.com/baomidou/mybatis-plus">GitHub</a></p><p><a href="https://gitee.com/baomidou/mybatis-plus">Gitee</a><br><a href="https://baomidou.com/pages/24112f">文档发布地址</a>  </p><h2 id="1-框架结构"><a href="#1-框架结构" class="headerlink" title="1.框架结构"></a>1.框架结构</h2><p><img src="http://lzcoder.cn/mybatis-plus-framework.jpg" alt="framework"></p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3.支持数据库"></a>3.支持数据库</h2><blockquote><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h1 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h1><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1.数据准备"></a>1.数据准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class="line">    use `mybatis_plus`;</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">    `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="2-工程环境准备"><a href="#2-工程环境准备" class="headerlink" title="2.工程环境准备"></a>2.工程环境准备</h2><ol><li>创建一个SpringBoot项目</li><li>导入pom依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置application.yml，添加数据源</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment"># 配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="comment"># 配置连接数据库信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>MySQL5.7版本的url：<br>jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false<br>MySQL8.0版本的url：<br>jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false  </p></blockquote><ol start="4"><li>编写实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>编写mapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Repository 为了让idea不显示错误</li><li>BaseMapper是MyBatis-Plus提供的模板mapper，包含了基本的CRUD操作，泛型为要操作的实体类型</li></ul><ol start="6"><li>添加扫描</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.lz.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、基本CRUD方法"><a href="#三、基本CRUD方法" class="headerlink" title="三、基本CRUD方法"></a>三、基本CRUD方法</h1><h2 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(&quot;coll&quot;)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(&quot;cm&quot;)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; ts = <span class="keyword">this</span>.selectList(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(ts)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ts.size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionUtils.mpe(<span class="string">&quot;One record is expected, but the query result is multiple records&quot;</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ts.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">    Long count = <span class="keyword">this</span>.selectCount(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> != count &amp;&amp; count &gt; <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Long <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;P extends IPage&lt;T&gt;&gt; <span class="function">P <span class="title">selectPage</span><span class="params">(P page, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;P extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; <span class="function">P <span class="title">selectMapsPage</span><span class="params">(P page, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2-增加"><a href="#2-增加" class="headerlink" title="2.增加"></a>2.增加</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(&quot;cm&quot;)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(&quot;coll&quot;)</span> Collection&lt;?&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-修改"><a href="#4-修改" class="headerlink" title="4.修改"></a>4.修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(&quot;et&quot;)</span> T entity)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;et&quot;)</span> T entity, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="四、通用service"><a href="#四、通用service" class="headerlink" title="四、通用service"></a>四、通用service</h1><ul><li>通用 Service CRUD 封装<a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java"> IService</a>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li><li>泛型 <code>T</code> 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li><li>对象 <code>Wrapper</code> 为 <a href="https://baomidou.com/01.%E6%8C%87%E5%8D%97/02.%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/wrapper.html">条件构造器</a></li></ul><h2 id="1-save"><a href="#1-save" class="headerlink" title="1.save"></a>1.save</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2-saveOrUpdate"><a href="#2-saveOrUpdate" class="headerlink" title="2.saveOrUpdate"></a>2.saveOrUpdate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="3-remove"><a href="#3-remove" class="headerlink" title="3.remove"></a>3.remove</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-update"><a href="#4-update" class="headerlink" title="4.update"></a>4.update</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="五、常用注解"><a href="#五、常用注解" class="headerlink" title="五、常用注解"></a>五、常用注解</h1><h2 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h2><blockquote><p>在实体类类型上添加@TableName(“t_user”)，标识实体类对应的表  </p></blockquote><h2 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h2><blockquote><p>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id </p><p>在实体类中uid属性上通过@TableId将其标识为主键    </p></blockquote><p><strong>常用的主键策略</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>IdType.ASSIGN_ID（默 认）</td><td>基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td>IdType.AUTO</td><td>使用数据库的自增策略，注意，该类型请确保数据库设置了id自增， 否则无效</td></tr></tbody></table><h2 id="3-TableField"><a href="#3-TableField" class="headerlink" title="3.@TableField"></a>3.@TableField</h2><blockquote><p>MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格  </p><p>如实体类属性name，表中字段username<br>此时需要在实体类属性上使用@TableField(“username”)设置属性所对应的字段名  </p></blockquote><h2 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4.@TableLogic"></a>4.@TableLogic</h2><p>物理删除：从数据库表中真实删除数据</p><p>逻辑删除：通过数据库表字段值区分数据状态为已删除和未删除</p><p><strong>通过@TableLogic注解实现逻辑删除</strong></p><ol><li>表添加字段用于存储删除状态，且设置默认值0</li></ol><p><img src="http://lzcoder.cn/image-20220405092838361.png" alt="image-20220405092838361"></p><ol start="2"><li>实体类添加该对应字段，并在该字段上添加注解@TableLogic，即实现逻辑删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、条件构造器和常用接口"><a href="#六、条件构造器和常用接口" class="headerlink" title="六、条件构造器和常用接口"></a>六、条件构造器和常用接口</h1><h2 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1.Wrapper介绍"></a>1.Wrapper介绍</h2><p><img src="http://lzcoder.cn/image-20220405093616098.png" alt="image-20220405093616098"></p><ul><li>Wrapper ： 条件构造抽象类，最顶端父类<ul><li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<ul><li>QueryWrapper ： 查询条件封装</li><li>UpdateWrapper ： Update 条件封装</li><li>AbstractLambdaWrapper ： 使用Lambda 语法<ul><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper<ul><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper  </li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2.QueryWrapper"></a>2.QueryWrapper</h2><h3 id="（一）组装查询条件"><a href="#（一）组装查询条件" class="headerlink" title="（一）组装查询条件"></a>（一）组装查询条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含a，年龄在20到30之间，并且邮箱不为null的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE</span></span><br><span class="line">    is_deleted=<span class="number">0</span> AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">    .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）组装删除条件"><a href="#（二）组装删除条件" class="headerlink" title="（二）组装删除条件"></a>（二）组装删除条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除email为空的用户</span></span><br><span class="line"><span class="comment">//DELETE FROM t_user WHERE (email IS NULL)</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="comment">//条件构造器也可以构建删除语句的条件</span></span><br><span class="line"><span class="keyword">int</span> result = userMapper.delete(queryWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br></pre></td></tr></table></figure><h3 id="（三）条件优先级"><a href="#（三）条件优先级" class="headerlink" title="（三）条件优先级"></a>（三）条件优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND age &gt; ? OR</span></span><br><span class="line">    email IS NULL)</span><br><span class="line">    queryWrapper</span><br><span class="line">    .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    .or()</span><br><span class="line">    .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(user, queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND (age &gt; ? OR</span></span><br><span class="line">    email IS NULL))</span><br><span class="line">    <span class="comment">//lambda表达式内的逻辑优先运算</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(user, queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（四）组装Select子句"><a href="#（四）组装Select子句" class="headerlink" title="（四）组装Select子句"></a>（四）组装Select子句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询用户信息的username和age字段</span></span><br><span class="line">    <span class="comment">//SELECT username,age FROM t_user</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值</span></span><br><span class="line">    为<span class="keyword">null</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（五）组装排序条件"><a href="#（五）组装排序条件" class="headerlink" title="（五）组装排序条件"></a>（五）组装排序条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">queryWrapper</span><br><span class="line">.orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">.orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（六）实现子查询"><a href="#（六）实现子查询" class="headerlink" title="（六）实现子查询"></a>（六）实现子查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询id小于等于3的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE (id IN</span></span><br><span class="line">    (select id from t_user where id &lt;= <span class="number">3</span>))</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from t_user where id &lt;= 3&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（七）常用的条件参数"><a href="#（七）常用的条件参数" class="headerlink" title="（七）常用的条件参数"></a>（七）常用的条件参数</h3><table><thead><tr><th>查询方式</th><th>说明</th></tr></thead><tbody><tr><td>eq</td><td>等于 =</td></tr><tr><td>ne</td><td>不等于&lt;&gt;</td></tr><tr><td>gt</td><td>大于&gt;</td></tr><tr><td>ge</td><td>大于等于&gt;=</td></tr><tr><td>lt</td><td>小于&lt;</td></tr><tr><td>le</td><td>小于等于</td></tr><tr><td>like</td><td>模糊查询LIKE ‘%值%’</td></tr><tr><td>likeLeft</td><td>Like ‘%值’</td></tr><tr><td>likeRigth</td><td>Like ‘值%’</td></tr><tr><td>notLike</td><td>模糊查询 NOT LIKE</td></tr><tr><td>in</td><td>in(v0,v1……)</td></tr><tr><td>notin</td><td>not in (v0,v1……)</td></tr><tr><td>inSql</td><td>in (SQL语句)</td></tr><tr><td>notInSql</td><td>not in (SQL语句)</td></tr><tr><td>isNull</td><td>NULL值查询</td></tr><tr><td>isNotNull</td><td>not Null值查询</td></tr><tr><td>groupBy</td><td>group by</td></tr><tr><td>orderBy</td><td>排序</td></tr><tr><td>orderByAsc</td><td>orderByAsc</td></tr><tr><td>exists</td><td>EXISTS 条件语句</td></tr><tr><td>between</td><td>between</td></tr><tr><td>last</td><td>无视优化规则直接拼接到 sql 的最后 !!!只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</td></tr></tbody></table><h2 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将（年龄大于20或邮箱为null）并且用户名中包含有a的用户信息修改</span></span><br><span class="line">    <span class="comment">//组装set子句以及修改条件</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//lambda表达式内的逻辑优先运算</span></span><br><span class="line">    updateWrapper</span><br><span class="line">    .set(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">    .set(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;user@atguigu.com&quot;</span>)</span><br><span class="line">    .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="comment">//这里必须要创建User对象，否则无法应用自动填充。如果没有自动填充，可以设置为null</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET username=?, age=?,email=? WHERE (username LIKE ? AND</span></span><br><span class="line">    (age &gt; ? OR email IS NULL))</span><br><span class="line">    <span class="comment">//User user = new User();</span></span><br><span class="line">    <span class="comment">//user.setName(&quot;张三&quot;);</span></span><br><span class="line">    <span class="comment">//int result = userMapper.update(user, updateWrapper);</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?,email=? WHERE (username LIKE ? AND (age &gt; ? OR</span></span><br><span class="line">    email IS NULL))</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(<span class="keyword">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Condition"><a href="#4-Condition" class="headerlink" title="4.Condition"></a>4.Condition</h2><blockquote><p>先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08UseCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义查询条件，有可能为null（用户未输入或未选择）</span></span><br><span class="line">    String username = <span class="keyword">null</span>;</span><br><span class="line">    Integer ageBegin = <span class="number">10</span>;</span><br><span class="line">    Integer ageEnd = <span class="number">24</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//StringUtils.isNotBlank()判断某字符串是否不为空且长度不为0且不由空白符(whitespace)</span></span><br><span class="line">    构成</span><br><span class="line">    queryWrapper</span><br><span class="line">    .like(StringUtils.isNotBlank(username), <span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .ge(ageBegin != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin)</span><br><span class="line">    .le(ageEnd != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE (age &gt;=</span></span><br><span class="line">    ? AND age &lt;= ?)</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义查询条件，有可能为null（用户未输入）</span></span><br><span class="line">    String username = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    Integer ageBegin = <span class="number">10</span>;</span><br><span class="line">    Integer ageEnd = <span class="number">24</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//避免使用字符串表示字段，防止运行时错误</span></span><br><span class="line">    queryWrapper</span><br><span class="line">    .like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">    .ge(ageBegin != <span class="keyword">null</span>, User::getAge, ageBegin)</span><br><span class="line">    .le(ageEnd != <span class="keyword">null</span>, User::getAge, ageEnd);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//组装set子句</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper</span><br><span class="line">    .set(User::getAge, <span class="number">18</span>)</span><br><span class="line">    .set(User::getEmail, <span class="string">&quot;user@atguigu.com&quot;</span>)</span><br><span class="line">    .like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    .and(i -&gt; i.lt(User::getAge, <span class="number">24</span>).or().isNull(User::getEmail)); <span class="comment">//lambda</span></span><br><span class="line">    表达式内的逻辑优先运算</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、插件"><a href="#七、插件" class="headerlink" title="七、插件"></a>七、插件</h1><h2 id="一、分页插件"><a href="#一、分页插件" class="headerlink" title="一、分页插件"></a>一、分页插件</h2><blockquote><p>Mybatis-Plus自带分页插件，只需简单配置即可实现</p></blockquote><p><strong>添加配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span> <span class="comment">//可以将主类中的注解移到此处</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span></span><br><span class="line">        PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//获取分页数据</span></span><br><span class="line">    List&lt;User&gt; list = page.getRecords();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示的条数：&quot;</span>+page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span>+page.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span>+page.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Sql实现分页</p><ol><li>UserMapper接口定义接口方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">**</span><br><span class="line">* 根据年龄查询用户列表，分页显示</span><br><span class="line">* <span class="meta">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位</span><br><span class="line">* <span class="meta">@param</span> age 年龄</span><br><span class="line">* <span class="meta">@return</span></span><br><span class="line">*/</span><br><span class="line"><span class="function">I</span></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">Integer age)</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>UserMapper.xml添加SQL</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SQL片段，记录基础字段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;BaseColumns&quot;</span>&gt;</span>id,username,age,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--IPage&lt;User&gt; selectPageVo(Page&lt;User&gt; page, Integer age);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;BaseColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> FROM t_user WHERE age &gt; #</span><br><span class="line">&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、乐观锁"><a href="#二、乐观锁" class="headerlink" title="二、乐观锁"></a>二、乐观锁</h2><p>悲观锁：在进行写操作是，会将数据列锁起来，等当前连接操作完下一个连接才可以继续操作</p><p>乐观锁：不会锁表，会在执行时检查数据是否被修改过，如果被修改过则获重新获取数据再进行操作</p><p><strong>乐观锁实现流程</strong></p><ol><li>数据库中添加version字段  </li><li>取出记录时，获取当前version  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,`name`,price,`version` <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>更新时，version + 1，如果where语句中的version版本不对，则更新失败</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE product <span class="keyword">SET</span> price<span class="operator">=</span>price<span class="operator">+</span><span class="number">50</span>, `version`<span class="operator">=</span>`version` <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> `version`<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>  <strong>MyBatis-Plus实现乐观锁</strong></p><ol><li>修改实体类，对应版本号字段添加@Version注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatisplus.entity;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.Version;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加乐观锁插件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Date:2022/2/14</span></span><br><span class="line"><span class="comment"> * Author:liuzheng</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="八、代码生成器"><a href="#八、代码生成器" class="headerlink" title="八、代码生成器"></a>八、代码生成器</h1><h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-快速生成"><a href="#2-快速生成" class="headerlink" title="2.快速生成"></a>2.快速生成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastAutoGeneratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis_plus?</span></span><br><span class="line"><span class="string">        characterEncoding=utf-8&amp;userSSL=false&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .globalConfig(builder -&gt; &#123;</span><br><span class="line">        builder.author(<span class="string">&quot;atguigu&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">        <span class="comment">//.enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">        .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">        .outputDir(<span class="string">&quot;D://mybatis_plus&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .packageConfig(builder -&gt; &#123;</span><br><span class="line">        builder.parent(<span class="string">&quot;com.atguigu&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">        .moduleName(<span class="string">&quot;mybatisplus&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">        .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;D://mybatis_plus&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .strategyConfig(builder -&gt; &#123;</span><br><span class="line">        builder.addInclude(<span class="string">&quot;t_user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">        .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .templateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine()) <span class="comment">// 使用Freemarker</span></span><br><span class="line">        引擎模板，默认的是Velocity引擎模板</span><br><span class="line">        .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、多数据源"><a href="#九、多数据源" class="headerlink" title="九、多数据源"></a>九、多数据源</h1><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置application.yml</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment"># 配置数据源类型</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment"># 设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">   <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="comment"># 配置连接数据库信息</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://101.132.140.20:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">lz1024cx</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="comment"># 配置连接数据库信息</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://101.132.140.20:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">lz1024cx</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用数据源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;master&quot;)</span> <span class="comment">//指定所操作的数据源,也可以使用在方法上</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span></span></span><br><span class="line"><span class="class"><span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、MyBatisX插件"><a href="#十、MyBatisX插件" class="headerlink" title="十、MyBatisX插件"></a>十、MyBatisX插件</h1><p><a href="https://baomidou.com/pages/ba5b24/">用法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyBatis-Plus是MyBatis的增强版，简称（MP），在MyBatis的基础上只做增强，不做改变，为简化而生，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="MyBatisPlus" scheme="http://example.com/tags/MyBatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务和锁</title>
    <link href="http://example.com/2021/12/22/MySQL%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/"/>
    <id>http://example.com/2021/12/22/MySQL%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</id>
    <published>2021-12-22T05:51:34.000Z</published>
    <updated>2021-12-31T02:52:28.522Z</updated>
    
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>工具方法集合</title>
    <link href="http://example.com/2021/12/16/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2021/12/16/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/</id>
    <published>2021-12-16T02:15:51.000Z</published>
    <updated>2022-05-24T03:58:28.396Z</updated>
    
    <content type="html"><![CDATA[<p>项目上总会遇到一些通用的方法，每次使用去找不免会花费不必要的时间，这篇博客旨在不断积累有用的工具方法</p><span id="more"></span><h1 id="一、时间处理"><a href="#一、时间处理" class="headerlink" title="一、时间处理"></a>一、时间处理</h1><h2 id="1、常规使用"><a href="#1、常规使用" class="headerlink" title="1、常规使用"></a>1、常规使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDateUtilMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//localDateTime 方法</span></span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前时刻 = &quot;</span> + now);<span class="comment">//当前时刻 = 2021-12-16T10:09:30.898</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前年份 = &quot;</span> + now.getYear());<span class="comment">//当前年份 = 2021</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前月份值 = &quot;</span> + now.getMonthValue());<span class="comment">//当前月份值 = 12</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getMonth() = &quot;</span> + now.getMonth());<span class="comment">//now.getMonth() = DECEMBER</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getDayOfMonth() = &quot;</span> + now.getDayOfMonth());<span class="comment">//now.getDayOfMonth() = 16</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getDayOfWeek() = &quot;</span> + now.getDayOfWeek());<span class="comment">//now.getDayOfWeek() = THURSDAY</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getChronology() = &quot;</span> + now.getChronology());<span class="comment">//now.getChronology() = ISO</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getHour() = &quot;</span> + now.getHour());<span class="comment">//now.getHour() = 10</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getSecond() = &quot;</span> + now.getSecond());<span class="comment">//now.getSecond() = 30</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getNano() = &quot;</span> + now.getNano());<span class="comment">//now.getNano() = 898000000</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getMinute() = &quot;</span> + now.getMinute());<span class="comment">//now.getMinute() = 9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//format  DateTimeFormatter 时间格式化</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.ISO_DATE));<span class="comment">//2021-12-16</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));<span class="comment">//20211216</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd&quot;</span>)));<span class="comment">//2021/12/16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析时间字符串</span></span><br><span class="line">    LocalDateTime parseDate = LocalDateTime.parse(<span class="string">&quot;2002--01--02 11:21&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy--MM--dd HH:mm&quot;</span>));</span><br><span class="line">    System.out.println(parseDate.format(DateTimeFormatter.BASIC_ISO_DATE));<span class="comment">//20020102</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、JSON转换"><a href="#二、JSON转换" class="headerlink" title="二、JSON转换"></a>二、JSON转换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xunzhi.scrm.utils.helper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jdk8.Jdk8Module;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.<span class="keyword">module</span>.paramnames.ParameterNamesModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonUtils</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">JacksonUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJsonString</span><span class="params">(Object object)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper().registerModule(<span class="keyword">new</span> JavaTimeModule())</span><br><span class="line">.registerModule(<span class="keyword">new</span> ParameterNamesModule()).registerModule(<span class="keyword">new</span> Jdk8Module())</span><br><span class="line">.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line"><span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">toJavaObject</span><span class="params">(String jsonString, Class&lt;T&gt; valueType)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper().registerModule(<span class="keyword">new</span> JavaTimeModule())</span><br><span class="line">.registerModule(<span class="keyword">new</span> ParameterNamesModule()).registerModule(<span class="keyword">new</span> Jdk8Module())</span><br><span class="line">.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line"><span class="keyword">return</span> mapper.readValue(jsonString, valueType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">toJavaObject</span><span class="params">(String jsonString, TypeReference&lt;T&gt; typeReference)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper().registerModule(<span class="keyword">new</span> JavaTimeModule())</span><br><span class="line">.registerModule(<span class="keyword">new</span> ParameterNamesModule()).registerModule(<span class="keyword">new</span> Jdk8Module())</span><br><span class="line">.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line"><span class="keyword">return</span> mapper.readValue(jsonString, typeReference);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目上总会遇到一些通用的方法，每次使用去找不免会花费不必要的时间，这篇博客旨在不断积累有用的工具方法&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>enum定义枚举类使用</title>
    <link href="http://example.com/2021/12/15/enum%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/12/15/enum%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-15T15:57:54.000Z</published>
    <updated>2022-01-04T01:46:57.026Z</updated>
    
    <content type="html"><![CDATA[<p> 以往的项目中总会定义一些常量提供使用，当类别较多时并不好理解和维护，jdk5后支持enum使用枚举类，能够更简洁，约束性更强。下面简单介绍下enum枚举类的使用。</p><span id="more"></span><h1 id="一、使用enum定义枚举类的说明"><a href="#一、使用enum定义枚举类的说明" class="headerlink" title="一、使用enum定义枚举类的说明"></a>一、使用enum定义枚举类的说明</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SeasonEnum</span> </span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春风又绿江南岸&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;映日荷花别样红&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋水共长天一色&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;窗含西岭千秋雪&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SeasonEnum</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用enum定义的枚举类默认继承了java.lang.Enum类，因此<strong>不能够继承其他类</strong>，但可以实现接口</li><li>枚举类的构造器只能使用<strong>private</strong>权限修饰符，即不能通过外部生成枚举类对象</li><li>枚举类的所<strong>有实例必须在第一行声明，显式列出（,分割；结尾），列出的实例系统会自动添加public static final修饰</strong></li><li>jdk1.5中可以在switch表达式中使用Enum定义枚举类的对象作为表达式</li></ol><h1 id="二、enum类的主要方法"><a href="#二、enum类的主要方法" class="headerlink" title="二、enum类的主要方法"></a>二、enum类的主要方法</h1><h2 id="1、values"><a href="#1、values" class="headerlink" title="1、values()"></a>1、values()</h2><p>用于返回枚举实例的对象数组，可以方便遍历当前枚举类的所有枚举值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnumValuesMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SeasonEnum[] seasonEnums = SeasonEnum.values();</span><br><span class="line">    <span class="keyword">for</span>(SeasonEnum seasonEnum:seasonEnums)&#123;</span><br><span class="line">    System.out.println(seasonEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn//image-20211216001619105.png" alt="image-20211216001619105"></p><h2 id="2、ordinal"><a href="#2、ordinal" class="headerlink" title="2、ordinal()"></a>2、ordinal()</h2><p>返回枚举实例的序数，从0开始</p><p><img src="http://lzcoder.cn//image-20211216002126994.png" alt="image-20211216002126994"></p><h2 id="3、name"><a href="#3、name" class="headerlink" title="3、name()"></a>3、name()</h2><p>用于返回枚举类型实例名称</p><p><img src="http://lzcoder.cn//image-20211216002352584.png" alt="image-20211216002352584"></p><h2 id="4、values-of"><a href="#4、values-of" class="headerlink" title="4、values of()"></a>4、values of()</h2><p>用于返回指定名称的枚举实例</p><p><img src="http://lzcoder.cn//image-20211216002824596.png" alt="image-20211216002824596"></p><h2 id="5、switch"><a href="#5、switch" class="headerlink" title="5、switch"></a>5、switch</h2><p>用于switch-case语句中</p><p><img src="http://lzcoder.cn//image-20211216003038841.png" alt="image-20211216003038841"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 以往的项目中总会定义一些常量提供使用，当类别较多时并不好理解和维护，jdk5后支持enum使用枚举类，能够更简洁，约束性更强。下面简单介绍下enum枚举类的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="http://example.com/2021/12/15/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2021/12/15/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-12-15T06:40:55.000Z</published>
    <updated>2022-05-26T06:33:32.484Z</updated>
    
    <content type="html"><![CDATA[<p>该记录主要是java8的Lambda表达式以及Stream流的介绍与使用</p><span id="more"></span><h3 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h3><h2 id="1-使用介绍"><a href="#1-使用介绍" class="headerlink" title="1.使用介绍"></a>1.使用介绍</h2><ol><li><p>举例： (o1,o2) -&gt; Integer.compare(o1,o2);</p></li><li><p>格式：</p><p> -&gt; :lambda操作符 或 箭头操作符</p><p> -&gt; 左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）</p><p> -&gt; 右边：lambda体 （其实就是重写的抽象方法的方法体）</p></li><li><p>Lambda表达式的本质：作为函数式接口的实例</p></li><li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上使用 @FunctionalInterface 注解，</p></li><li><p> 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</p></li></ol><p><strong>总结：</strong></p><ul><li>   -&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也可以省略</li><li>   -&gt;右边：lambda体应该使用一对{}包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一对{}和return关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//用lambda表达式开启线程</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;线程开开启了&quot;</span>)).start();</span><br><span class="line">    <span class="comment">//语法格式一：无参，无返回值</span></span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匿名内部类 runnable……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    runnable.run();</span><br><span class="line"></span><br><span class="line">    Runnable r1 = () -&gt; System.out.println(<span class="string">&quot;lambda runnable……&quot;</span>);</span><br><span class="line">    r1.run();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需要一个参数但是没有返回值</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;内部类实现 consumer……&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer consumer1 = (x) -&gt; System.out.println(<span class="string">&quot;lambda 实现consumer&quot;</span>+x);</span><br><span class="line">        consumer1.accept(<span class="string">&quot;lambda &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-java内置的4大核心函数式接口"><a href="#2-java内置的4大核心函数式接口" class="headerlink" title="2.java内置的4大核心函数式接口"></a>2.java内置的4大核心函数式接口</h2><h3 id="（一）消费型接口-Consumer-lt-T-gt-void-accept-T-t"><a href="#（一）消费型接口-Consumer-lt-T-gt-void-accept-T-t" class="headerlink" title="（一）消费型接口 Consumer&lt;T&gt;     void accept(T t)"></a>（一）消费型接口 Consumer&lt;T&gt;     void accept(T t)</h3><blockquote><p>有一个入参，无返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要一个参数但是没有返回值</span></span><br><span class="line">Consumer consumer = <span class="keyword">new</span> Consumer() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;内部类实现 consumer……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">consumer.accept(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">Consumer consumer1 = (x) -&gt; System.out.println(<span class="string">&quot;lambda 实现consumer&quot;</span>+x);</span><br><span class="line">consumer1.accept(<span class="string">&quot;lambda &quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（二-供给型接口-Supplier-lt-T-gt-T-get"><a href="#（二-供给型接口-Supplier-lt-T-gt-T-get" class="headerlink" title="（二) 供给型接口 Supplier&lt;T&gt;     T get()"></a>（二) 供给型接口 Supplier&lt;T&gt;     T get()</h3><blockquote><p>无入参 一个返回值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    //供给型接口</span><br><span class="line">    Supplier&lt;String&gt; supplier = ()-&gt; &#123;</span><br><span class="line">        String s2 =&quot;3&quot;;</span><br><span class="line">        return s2.toUpperCase();</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(&quot;supplier.get() = &quot; + supplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三-函数型接口-Function-lt-T-R-gt-R-apply-T-t"><a href="#（三-函数型接口-Function-lt-T-R-gt-R-apply-T-t" class="headerlink" title="（三) 函数型接口 Function&lt;T,R&gt;   R apply(T t)"></a>（三) 函数型接口 Function&lt;T,R&gt;   R apply(T t)</h3><blockquote><p>一个入参，一个返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//函数型接口</span></span><br><span class="line">    Function&lt;String,String&gt; function = (x)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">        <span class="keyword">return</span> x.toUpperCase(Locale.ROOT);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;function = &quot;</span> + function.apply(<span class="string">&quot;liuzheng&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（四-断定型接口-Predicate-lt-T-gt-boolean-test-T-t"><a href="#（四-断定型接口-Predicate-lt-T-gt-boolean-test-T-t" class="headerlink" title="（四) 断定型接口 Predicate&lt;T&gt;    boolean test(T t)"></a>（四) 断定型接口 Predicate&lt;T&gt;    boolean test(T t)</h3><blockquote><p>一个入参，一个Boolean类型返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//断言型接口</span></span><br><span class="line">    Predicate&lt;String&gt; predicate = (x) -&gt; x.contains(<span class="string">&quot;liuzheng&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;predicate = &quot;</span> + predicate.test(<span class="string">&quot;fdfdliuzh3eng&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3.方法引用"></a>3.方法引用</h2><p><strong>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</strong></p><h3 id="（一）方法引用的本质"><a href="#（一）方法引用的本质" class="headerlink" title="（一）方法引用的本质"></a>（一）方法引用的本质</h3><p>方法引用本质上就是Lambda表达是，而Lambda表达式作为函数式接口的实例，所以方法引用也是函数式接口的实例</p><h3 id="（二）使用方式"><a href="#（二）使用方式" class="headerlink" title="（二）使用方式"></a>（二）使用方式</h3><p>类（对象）::  方法名</p><h3 id="（三）使用情况"><a href="#（三）使用情况" class="headerlink" title="（三）使用情况"></a>（三）使用情况</h3><ol><li><strong>对象 ::  非静态方法</strong></li></ol><blockquote><p>它的形式参数全部传递给该方法作为参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法引用 1</span></span><br><span class="line">    PrintStream out = System.out;</span><br><span class="line">    Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">    consumer.accept(<span class="string">&quot;方法引用&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类 :: 静态方法</strong></li></ol><blockquote><p>它的形式参数全部传递给该方法作为参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; compare = Integer::compare;</span><br><span class="line">System.out.println(<span class="string">&quot;compare = &quot;</span> + compare.compare(<span class="number">1</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>类 :: 非静态方法</strong></li></ol><blockquote><p><strong>第一个参数作为调用者</strong>，后面的参数全部传递给该方法作为参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">    System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">    System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">    System.out.println(func1.apply(employee));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">    System.out.println(func2.apply(employee));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>要求</strong> 针对方法1和方法2，要求接口中抽象方法的形参列表和返回值类型与方法引用的方法形参列表和返回值类型一致</p><h2 id="4-构造器引用"><a href="#4-构造器引用" class="headerlink" title="4.构造器引用"></a>4.构造器引用</h2><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致</p><p>抽象方法的返回值类型即为构造器所属的类的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//Supplier中的T get()</span></span><br><span class="line">   <span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> Supplier&lt;Employee&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> Employee();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">       System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(sup2.get());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="keyword">new</span> Employee(id);</span><br><span class="line">       Employee employee = func1.apply(<span class="number">1001</span>);</span><br><span class="line">       System.out.println(employee);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       Employee employee1 = func2.apply(<span class="number">1002</span>);</span><br><span class="line">       System.out.println(employee1);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="keyword">new</span> Employee(id,name);</span><br><span class="line">       System.out.println(func1.apply(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(func2.apply(<span class="number">1002</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组引用</span></span><br><span class="line">   <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> String[length];</span><br><span class="line">       String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">       System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">       String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">       System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="二、Stream流"><a href="#二、Stream流" class="headerlink" title="二、Stream流"></a>二、Stream流</h1><p><strong>常用操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">userList.stream().collect(Collectors.toMap(user::getUserId, t -&gt; t, (oldvalue, newValue) -&gt; newValue));</span><br><span class="line">参数说明：</span><br><span class="line">1. user::getUserId 作为map的key</span><br><span class="line">2. t-&gt;t value值为对象本身，也可以写 Function.identity()</span><br><span class="line">3. (oldvalue, newValue) -&gt; newValue) 当key值冲突时，key对应的value值覆盖为newValue</span><br></pre></td></tr></table></figure><h2 id="1-概要介绍"><a href="#1-概要介绍" class="headerlink" title="1.概要介绍"></a>1.概要介绍</h2><ul><li>Stream关注的是对数据的运算，与CPU打交道</li><li>Stream 自己不会存储元素</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</li></ul><p><strong>执行流程</strong></p><ol><li>Stream的实例化</li><li>一系列的中间操作（过滤、映射、…)  一个中间操作链，对数据源的数据进行处理</li><li>终止操作</li></ol><p><strong>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</strong></p><h2 id="2-执行流程详解"><a href="#2-执行流程详解" class="headerlink" title="2.执行流程详解"></a>2.执行流程详解</h2><h3 id="（一）实例化"><a href="#（一）实例化" class="headerlink" title="（一）实例化"></a>（一）实例化</h3><h5 id="1-通过集合"><a href="#1-通过集合" class="headerlink" title="1. 通过集合"></a>1. 通过集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式一：通过集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-通过数组"><a href="#2-通过数组" class="headerlink" title="2. 通过数组"></a>2. 通过数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式二：通过数组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">    IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">    Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    Employee e2 = <span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-通过Stream的of"><a href="#3-通过Stream的of" class="headerlink" title="3.通过Stream的of"></a>3.通过Stream的of</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式三：通过Stream的of()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-创建无限流"><a href="#4-创建无限流" class="headerlink" title="4.创建无限流"></a>4.创建无限流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//      迭代</span></span><br><span class="line">    <span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="comment">//遍历前10个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//      生成</span></span><br><span class="line">    <span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）中间链"><a href="#（二）中间链" class="headerlink" title="（二）中间链"></a>（二）中间链</h3><h5 id="1-筛选与切片"><a href="#1-筛选与切片" class="headerlink" title="1.筛选与切片"></a>1.筛选与切片</h5><h6 id="（一）filter"><a href="#（一）filter" class="headerlink" title="（一）filter"></a>（一）filter</h6><p><strong>filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">employees.stream().filter(e-&gt;e.getSalary()&gt;<span class="number">100</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（二）limit"><a href="#（二）limit" class="headerlink" title="（二）limit"></a>（二）limit</h6><p><strong>limit(n)——截断流，使其元素不超过给定数量。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employees.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（三）skip"><a href="#（三）skip" class="headerlink" title="（三）skip"></a>（三）skip</h6><p><strong>skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employees.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（四）distinct"><a href="#（四）distinct" class="headerlink" title="（四）distinct"></a>（四）distinct</h6><p> <strong>distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h5 id="2-映射"><a href="#2-映射" class="headerlink" title="2.映射"></a>2.映射</h5><h6 id="（五）map"><a href="#（五）map" class="headerlink" title="（五）map"></a>（五）map</h6><p> <strong>map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（六）flatMap"><a href="#（六）flatMap" class="headerlink" title="（六）flatMap"></a>（六）flatMap</h6><p><strong>flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line">Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class="line">characterStream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">fromStringToStream</span><span class="params">(String str)</span></span>&#123;<span class="comment">//aa</span></span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Character c : str.toCharArray())&#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（七）peek"><a href="#（七）peek" class="headerlink" title="（七）peek"></a>（七）peek</h6><p>peek和map类似，peek方法接收一个Consumer的入参。了解λ表达式的应该明白 Consumer的实现类 应该只有一个方法，该方法返回类型为void。</p><p>正因为 <code>peek()</code> 不是一个最终操作，不会影响“哪些元素会流过”，所以十分适合在调试的时候，用来打印出流经管道的元素。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">         .filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">         .peek(e -&gt; System.out.println(<span class="string">&quot;Filtered value: &quot;</span> + e))</span><br><span class="line">         .map(String::toUpperCase)</span><br><span class="line">         .peek(e -&gt; System.out.println(<span class="string">&quot;Mapped value: &quot;</span> + e))</span><br><span class="line">         .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h5 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h5><h6 id="（七）sorted"><a href="#（七）sorted" class="headerlink" title="（七）sorted()"></a>（七）sorted()</h6><h6 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">12</span>, <span class="number">43</span>, <span class="number">65</span>, <span class="number">34</span>, <span class="number">87</span>, <span class="number">0</span>, -<span class="number">98</span>, <span class="number">7</span>);</span><br><span class="line">list.stream().sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="（八）sorted-Comparator-com"><a href="#（八）sorted-Comparator-com" class="headerlink" title="（八）sorted(Comparator com)"></a>（八）sorted(Comparator com)</h6><p>定制排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    employees.stream().sorted( (e1,e2) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> ageValue = Integer.compare(e1.getAge(),e2.getAge());</span><br><span class="line">       <span class="keyword">if</span>(ageValue != <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> ageValue;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> -Double.compare(e1.getSalary(),e2.getSalary());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-匹配与查找"><a href="#4-匹配与查找" class="headerlink" title="4.匹配与查找"></a>4.匹配与查找</h5><h6 id="（九）-allMatch-Predicate-p"><a href="#（九）-allMatch-Predicate-p" class="headerlink" title="（九） allMatch(Predicate p)"></a>（九） allMatch(Predicate p)</h6><blockquote><p>检查是否匹配所有元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//          练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">        <span class="keyword">boolean</span> allMatch = employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">        System.out.println(allMatch);</span><br></pre></td></tr></table></figure><h6 id="（十）-anyMatch-Predicate-p"><a href="#（十）-anyMatch-Predicate-p" class="headerlink" title="（十） anyMatch(Predicate p)"></a>（十） anyMatch(Predicate p)</h6><blockquote><p>检查是否至少匹配一个元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//         练习：是否存在员工的工资大于 10000</span></span><br><span class="line">        <span class="keyword">boolean</span> anyMatch = employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line">        System.out.println(anyMatch);</span><br></pre></td></tr></table></figure><h6 id="（十一）-noneMatch-Predicate-p"><a href="#（十一）-noneMatch-Predicate-p" class="headerlink" title="（十一） noneMatch(Predicate p)"></a>（十一） noneMatch(Predicate p)</h6><blockquote><p>检查是否没有匹配的元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//          练习：是否存在员工姓“雷”</span></span><br><span class="line">        <span class="keyword">boolean</span> noneMatch = employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">        System.out.println(noneMatch);</span><br></pre></td></tr></table></figure><h6 id="（十二）-findFirst"><a href="#（十二）-findFirst" class="headerlink" title="（十二） findFirst"></a>（十二） findFirst</h6><blockquote><p>返回第一个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        findFirst——返回第一个元素</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().findFirst();</span><br></pre></td></tr></table></figure><h6 id="（十三）-findAny"><a href="#（十三）-findAny" class="headerlink" title="（十三） findAny"></a>（十三） findAny</h6><blockquote><p> 返回当前流中的任意元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();</span><br><span class="line">System.out.println(employee1);</span><br></pre></td></tr></table></figure><h5 id="5-收集"><a href="#5-收集" class="headerlink" title="5. 收集"></a>5. 收集</h5><h6 id="（十四）collect"><a href="#（十四）collect" class="headerlink" title="（十四）collect"></a>（十四）collect</h6><p>将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">employeeList.forEach(System.out::println);</span><br><span class="line">System.out.println();</span><br><span class="line">Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">employeeSet.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h5 id="6-归约"><a href="#6-归约" class="headerlink" title="6.归约"></a>6.归约</h5><h6 id="（十五）reduce"><a href="#（十五）reduce" class="headerlink" title="（十五）reduce"></a>（十五）reduce</h6><p>可以将流中元素反复结合起来，得到一个值。返回 T</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        练习1：计算1-10的自然数的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        Integer sum = list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line"><span class="comment">//        练习2：计算公司所有员工工资的总和</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);</span><br><span class="line"><span class="comment">//        Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span></span><br><span class="line">        Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);</span><br><span class="line">        System.out.println(sumMoney.get());</span><br></pre></td></tr></table></figure><h5 id="7-其它"><a href="#7-其它" class="headerlink" title="7.其它"></a>7.其它</h5><h6 id="（十六）count"><a href="#（十六）count" class="headerlink" title="（十六）count"></a>（十六）count</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">// count——返回流中元素的总个数</span></span><br><span class="line"><span class="keyword">long</span> count = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">5000</span>).count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h6 id="（十七）max"><a href="#（十七）max" class="headerlink" title="（十七）max"></a>（十七）max</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        练习：返回最高的工资：</span></span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());</span><br><span class="line">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class="line">        System.out.println(maxSalary);</span><br></pre></td></tr></table></figure><p>（十八）min</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        练习：返回最低工资的员工</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">        System.out.println(employee);</span><br></pre></td></tr></table></figure><p>（十九）forEach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        forEach(Consumer c)——内部迭代</span></span><br><span class="line">        employees.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;该记录主要是java8的Lambda表达式以及Stream流的介绍与使用&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>kafka学习</title>
    <link href="http://example.com/2021/12/15/kafka%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/15/kafka%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-15T06:40:55.000Z</published>
    <updated>2021-12-15T16:39:35.425Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--查看消费组group</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --list</span><br><span class="line"></span><br><span class="line">--查看偏移量情况</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --describe --group test-consumer-group</span><br><span class="line"></span><br><span class="line">--偏移量向前偏移10个</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --topic error_log_collect_topic:0,1 --shift-by -10 --execute</span><br><span class="line"></span><br><span class="line">--将偏移量设置为最早的</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --to-earliest --topic error_log_collect_topic --execute</span><br><span class="line"></span><br><span class="line">--将偏移量设置为最新的</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --to-latest --topic error_log_collect_topic --execute</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL索引学习</title>
    <link href="http://example.com/2021/12/02/MySQL%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/02/MySQL%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-02T13:43:17.000Z</published>
    <updated>2022-01-04T01:48:37.077Z</updated>
    
    <content type="html"><![CDATA[<p>s索引的学习对于数据库优化有着至关重要的作用，深入理解索引机制，才能更好的优化查询机制</p><span id="more"></span><h1 id="一、索引分类"><a href="#一、索引分类" class="headerlink" title="一、索引分类"></a>一、索引分类</h1><p>索引的使用会影响where条件查询以及order by排序，MySQL索引类型如下</p><ul><li>从存储结构划分：可分为B Tree索引、Hash索引、FuLLTEXT全文索引、R Tree索引</li><li>从应用层次划分：可分为主键索引、普通索引、唯一索引、复合索引、全文索引</li><li>从索引键类型划分：可分为主键索引、辅助索引</li><li>从数据存储和键类型划分：可分为聚簇索引（聚集索引）、非聚簇索引</li></ul><p><img src="http://lzcoder.cn/image-20211206163837167.png" alt="image-20211206163837167"></p><h2 id="1、普通索引"><a href="#1、普通索引" class="headerlink" title="1、普通索引"></a>1、普通索引</h2><p>普通索引是最基本的索引类型，建立在普通字段上，没有任何限制</p><p>创建普通索引的三种方式</p><ol><li>直接添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD INDEX [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名) );</span><br></pre></td></tr></table></figure><h2 id="2、主键索引"><a href="#2、主键索引" class="headerlink" title="2、主键索引"></a>2、主键索引</h2><p>主键索引是一种特殊的唯一值，不允许为空。创建主键索引有两种方式</p><ol><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD PRIMARY KEY (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], PRIMARY KEY (字段名) );</span><br></pre></td></tr></table></figure><h2 id="3、唯一索引"><a href="#3、唯一索引" class="headerlink" title="3、唯一索引"></a>3、唯一索引</h2><p>与普通索引不同的时，唯一索引的列不能有重复值，但可以为空，在创建、修改表列字段属性为唯一约束时，自动添加唯一索引</p><p>创建唯一索引的三种方式</p><ol><li>直接添加唯一索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD UNIQUE INDEX [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (字段名) ;</span><br></pre></td></tr></table></figure><h2 id="4、复合索引"><a href="#4、复合索引" class="headerlink" title="4、复合索引"></a>4、复合索引</h2><p>单一索引是指索引只作用在一列上，复合索引是指用户在多个列上建立索引，这种索引叫复合索引（组合索引），复合索引可以代替多个单一索引，相比多个单一索引复合索引所需的开销更小。 但要注意<strong>最左前缀原则</strong></p><p>创建复合索引的三种方式</p><ol><li>直接添加复合索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index &lt;索引名称&gt; on table(字段名1，字段名2);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD INDEX [索引的名字] (字段名1，字段名2...);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名1，字段名2...) );</span><br></pre></td></tr></table></figure><p>复合索引使用时注意事项：</p><p>什么时候使用复合索引：</p><ul><li>添加复合索引要根据where条件建立，不要过多使用索引，过多无用的索引会影响表新增更新数据</li><li>如果表已经有了(col1,col2)，就没有必要再单独建立(col1)，如果有了（col1）索引，如果需要查询col1和col2条件，可以建立(col1,col2)列复合索引，对查询速度有一定的提高。</li></ul><h2 id="5、全文索引"><a href="#5、全文索引" class="headerlink" title="5、全文索引"></a>5、全文索引</h2><p>查询操作在数据量比较少时，可以使用like模糊查询，但是对于大量的文本数据检索，效率很低。如果使用全文索引，查询速度会比like快很多倍。在MySQL 5.6 以前的版本，只有MyISAM存储引擎支持全文索引，从MySQL 5.6开始MyISAM和InnoDB存储引擎均支持  。</p><p>创建全文索引的三种方式（注意只能对字符串和文本类型列生效）：</p><ol><li>直接添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FULLTEXT INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD FULLTEXT [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], FULLTEXT KEY [索引的名字] (字段名) ;</span><br></pre></td></tr></table></figure><p>与常见的like模糊查询不同，全文索引使用match和against关键字，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where match(username) against(&#x27;aaa&#x27;);</span><br></pre></td></tr></table></figure><p>全文索引使用注意事项：</p><ul><li>全文索引必须在字符串、文本字段上建立。<ul><li>全文索引字段值必须在最小字符和最大字符之间的才会有效。（innodb：3-84；myisam：4-84）</li></ul></li><li>全文索引字段值要进行切词处理，按syntax字符进行切割，例如b+aaa，切分成b和aaa</li><li>全文索引匹配查询，默认使用的是等值匹配，例如a匹配a，不会匹配ab,ac。如果想匹配可以在布尔模式下搜索a*  </li></ul><h1 id="二、索引的原理"><a href="#二、索引的原理" class="headerlink" title="二、索引的原理"></a>二、索引的原理</h1><h1 id="三、索引的分析和优化"><a href="#三、索引的分析和优化" class="headerlink" title="三、索引的分析和优化"></a>三、索引的分析和优化</h1><h2 id="1、Explain"><a href="#1、Explain" class="headerlink" title="1、Explain"></a>1、Explain</h2><p>MySQL提供的explain命令，可以对select语句进行分析，并输出select 查询执行的详细信息，可以供开发人员查看，进而帮助开发人员针对性优化。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from user WHERE id &lt; 3;</span><br></pre></td></tr></table></figure><p>EXPLAIN 命令的输出内容大致如下：  </p><p><img src="http://lzcoder.cn/image-20211206172601998.png" alt="image-20211206172601998"></p><h3 id="（一）select-type"><a href="#（一）select-type" class="headerlink" title="（一）select_type"></a>（一）select_type</h3><p>表示查询的类型，常见的值有以下情况</p><ul><li>SIMPLE：表示查询语句不包含子查询或union  </li><li>PRIMARY：表示此查询是最外层查询</li><li>UNION：表示此查询是UNION的第二个或后续的查询  </li><li>DEPENDENT UNION：UNION中的第二个或后续的查询语句，使用了外面查询结果  </li><li>UNION RESULT：UNION的结果  </li><li>SUBQUERY：SELECT子查询语句  </li><li>SUBQUERY：SELECT子查询语句  </li></ul><p><strong>最常见的查询类型就是SIMPLE，表示我们查询没有子查询也没有用到union查询</strong></p><h3 id="（二）type"><a href="#（二）type" class="headerlink" title="（二）type"></a>（二）type</h3><p>表示存储引擎查询数据时采用的方式。比较重要的一个属性，通过它可以判断出查询是全表扫描还是基于索引的部分扫描。常用属性值如下，从上至下效率依次增强。  </p><ul><li>ALL：表示全表扫描，性能最差。</li><li>index：表示基于索引的全表扫描，先扫描索引再扫描全表数据。</li><li>range：表示使用索引范围查询。使用&gt;、&gt;=、&lt;、&lt;=、in等等。</li><li>ref：表示使用非唯一索引进行单值查询。</li><li>eq_ref：一般情况下出现在多表join查询，表示前面表的每一个记录，都只能匹配后面表的一行结果。</li><li>const：表示使用主键或唯一索引做等值查询，常量查询。</li><li>NULL：表示不用访问表，速度最快  </li></ul><h3 id="（三）possible-keys"><a href="#（三）possible-keys" class="headerlink" title="（三）possible_keys"></a>（三）possible_keys</h3><p>表示查询时能够使用到的索引。注意并不一定会真正使用，显示的是索引名称。  </p><h3 id="（四）key"><a href="#（四）key" class="headerlink" title="（四）key"></a>（四）key</h3><p>表示查询时真正使用到的索引，显示的是索引名称。  </p><h3 id="（五）rows"><a href="#（五）rows" class="headerlink" title="（五）rows"></a>（五）rows</h3><p>MySQL查询优化器会根据统计信息，估算SQL要查询到结果需要扫描多少行记录。原则上rows是越少效率越高，可以直观的了解到SQL效率高低。  </p><h3 id="（六）key-len"><a href="#（六）key-len" class="headerlink" title="（六）key_len"></a>（六）key_len</h3><p>表示查询使用了索引的字节数量。可以判断是否全部使用了组合索引。<br>key_len的计算规则如下：</p><ul><li>字符串类型<br>字符串长度跟字符集有关：latin1=1、gbk=2、utf8=3、utf8mb4=4<br>char(n)：n*字符集长度<br>varchar(n)：n * 字符集长度 + 2字节</li><li>数值类型<br>TINYINT：1个字节<br>SMALLINT：2个字节<br>MEDIUMINT：3个字节<br>INT、FLOAT：4个字节<br>BIGINT、DOUBLE：8个字节</li><li>时间类型<br>DATE：3个字节<br>TIMESTAMP：4个字节<br>DATETIME：8个字节</li><li>字段属性<br>NULL属性占用1个字节，如果一个字段设置了NOT NULL，则没有此项。</li></ul><h3 id="（七）Extra"><a href="#（七）Extra" class="headerlink" title="（七）Extra"></a>（七）Extra</h3><p>Extra表示很多额外的信息，各种操作会在Extra提示相关信息，常见几种如下：</p><ul><li>Using where<br>表示查询需要通过索引回表查询数据。</li><li>Using index<br>表示查询需要通过索引，索引就可以满足所需数据。</li><li>Using filesort<br>表示查询出来的结果需要额外排序，数据量小在内存，大的话在磁盘，因此有Using filesort建议优化。</li><li>Using temprorary<br>查询使用到了临时表，一般出现于去重、分组等操作。  </li></ul><h2 id="2、索引失效的七种情况"><a href="#2、索引失效的七种情况" class="headerlink" title="2、索引失效的七种情况"></a>2、索引失效的七种情况</h2><h3 id="（一）like-‘-XX’"><a href="#（一）like-‘-XX’" class="headerlink" title="（一）like ‘%XX’"></a>（一）like ‘%XX’</h3><h3 id="（二）where-索引列使用了函数"><a href="#（二）where-索引列使用了函数" class="headerlink" title="（二）where 索引列使用了函数"></a>（二）where 索引列使用了函数</h3><h3 id="（三）违反最左前缀原则"><a href="#（三）违反最左前缀原则" class="headerlink" title="（三）违反最左前缀原则"></a>（三）违反最左前缀原则</h3><h3 id="（四）有or关键字"><a href="#（四）有or关键字" class="headerlink" title="（四）有or关键字"></a>（四）有or关键字</h3><h3 id="（五）where-索引列有运算"><a href="#（五）where-索引列有运算" class="headerlink" title="（五）where 索引列有运算"></a>（五）where 索引列有运算</h3><h3 id="（六）需要类型转换"><a href="#（六）需要类型转换" class="headerlink" title="（六）需要类型转换"></a>（六）需要类型转换</h3><h3 id="（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）"><a href="#（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）" class="headerlink" title="（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）"></a>（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）</h3><p>​                    <a href="https://www.cnblogs.com/liehen2046/p/11052666.html">索引失效的7种情况</a></p><h2 id="3、回表查询"><a href="#3、回表查询" class="headerlink" title="3、回表查询"></a>3、回表查询</h2><p>在之前介绍过，InnoDB索引有聚簇索引和辅助索引。聚簇索引的叶子节点存储行记录，InnoDB必须要有，且只有一个。辅助索引的叶子节点存储的是主键值和索引字段值，通过辅助索引无法直接定位行记录，通常情况下，需要扫码两遍索引树。先通过辅助索引定位主键值，然后再通过聚簇索引定位行记录，这就叫做回表查询，它的性能比扫一遍索引树低。<br>总结：<strong>通过索引查询主键值，然后再去聚簇索引查询记录信息</strong>  </p><h2 id="4、索引覆盖"><a href="#4、索引覆盖" class="headerlink" title="4、索引覆盖"></a>4、索引覆盖</h2><p>简单来说，通过索引就能满足查询结果。不需要再去查询行记录。</p><p>在MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为Using index时，能够触发索引覆盖  </p><p>不管是SQL-Server官网，还是MySQL官网，都表达了：<strong>只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快，这就叫做索引覆盖</strong>。<br>实现索引覆盖最常见的方法就是：<strong>将被查询的字段，建立到组合索引</strong>。  </p><h2 id="5、索引与排序"><a href="#5、索引与排序" class="headerlink" title="5、索引与排序"></a>5、索引与排序</h2><p>MySQL支持filesort和index两种方式排序</p><h3 id="（一）filesort"><a href="#（一）filesort" class="headerlink" title="（一）filesort"></a>（一）filesort</h3><p>先把结果查出，然后在缓存或磁盘进行排序操作，效率较低。  </p><ul><li>双路排序</li></ul><p>需要两次磁盘扫描读取，最终得到用户数据。第一次将排序字段读取出来，然后排序；第二次去读取其他字段数据  </p><ul><li>单路排序</li></ul><h3 id="（二）index"><a href="#（二）index" class="headerlink" title="（二）index"></a>（二）index</h3><p>使用index是指利用索引自动实现排序，不需另做排序操作，效率会比较高。  </p><h2 id="六、NULL查询"><a href="#六、NULL查询" class="headerlink" title="六、NULL查询"></a>六、NULL查询</h2><p>问题：如果MySQL的某一列含有NULL值，那么包含该列的索引是否生效？</p><p>对MySQL来说，NULL是一个特殊的值，从概念上来讲，NULL意味着“一个未知值“，它的处理方式与其他值有些不同，比如：不能使用=、&lt;、&gt;这样的运算符，对NULL做算数运算的结果都是NULL,count时不会包括NULL行等，NULL比空字符串需要更多的存储空间等。</p><p>答：可以，虽然MySQL可以再含有NULL的列上使用索引，但是NULL和其它数据还是有区别的，不建议列上允许未NULL值，最好设置为NOT NULL，并给一个默认值，比如0和空字符串 ‘’ 等，如果时datatime类型，也可以设置系统当前时间或某个固定的特殊值，例如’1970-01-01 00:00:00’  。</p><p>注意：设置默认值的时候，例如0，不要和系统数据产生干扰，如果这个字段0本身就有含义，就不能使用了。</p><h1 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h1><h2 id="1：换一个角度看-B-树"><a href="#1：换一个角度看-B-树" class="headerlink" title="1：换一个角度看 B+ 树"></a>1：<a href="https://mp.weixin.qq.com/s/A5gNVXMNE-iIlY3oofXtLw">换一个角度看 B+ 树</a></h2><h2 id="2：为什么-MySQL-采用-B-树作为索引"><a href="#2：为什么-MySQL-采用-B-树作为索引" class="headerlink" title="2：为什么 MySQL 采用 B+ 树作为索引"></a>2：<a href="https://mp.weixin.qq.com/s/w1ZFOug8-Sa7ThtMnlaUtQ">为什么 MySQL 采用 B+ 树作为索引</a></h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;s索引的学习对于数据库优化有着至关重要的作用，深入理解索引机制，才能更好的优化查询机制&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL时间查询不走索引了？</title>
    <link href="http://example.com/2021/11/29/MySQL%E6%97%B6%E9%97%B4%E6%9F%A5%E8%AF%A2%E4%B8%8D%E8%B5%B0%E7%B4%A2%E5%BC%95%E4%BA%86%EF%BC%9F/"/>
    <id>http://example.com/2021/11/29/MySQL%E6%97%B6%E9%97%B4%E6%9F%A5%E8%AF%A2%E4%B8%8D%E8%B5%B0%E7%B4%A2%E5%BC%95%E4%BA%86%EF%BC%9F/</id>
    <published>2021-11-29T14:53:22.000Z</published>
    <updated>2022-01-04T01:49:47.247Z</updated>
    
    <content type="html"><![CDATA[<p>今天在根据时间查询表数据时，赶紧查询效率慢，于是在时间字段加了普通索引，然而查询效率仍然慢，于是Explain下发现走的仍然是全表扫描，为什么呢？加了索引为什么没生效？索引的失效条件好像也没说有时间相关内容，本着追根溯源的求知欲，于是有了这篇短记。</p><span id="more"></span><h1 id="一、情景复现"><a href="#一、情景复现" class="headerlink" title="一、情景复现"></a>一、情景复现</h1><p>数据表<code>error_log_info</code>大约有87760条数据记录</p><p>通过添加普通索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX error_date_index on error_log_info(errordate);</span><br></pre></td></tr></table></figure><p>为errordate字段添加了索引，然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from error_log_info where errordate &gt; &#x27;2021-11-29 12:00:22&#x27;;</span><br></pre></td></tr></table></figure><p>explain结果发现 type:ALL，走的是全表扫描查询，key为空代表未使用索引，rows:82247行，估计的扫描行数近似于全表行数。显示在该查询中确实没有走建立的时间索引而是走了全表扫描</p><p><img src="http://lzcoder.cn/image-20211129230326737.png" alt="image-20211129230326737"></p><p>然后我将时间缩短，让查询出的记录数变少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from error_log_info where errordate &gt; &#x27;2021-11-29 22:00:22&#x27;;</span><br></pre></td></tr></table></figure><p><img src="http://lzcoder.cn/image-20211129231057523.png" alt="image-20211129231057523"></p><p>explain结果发现type:range，没有走全表扫描查询，key：error_date_index走了添加的时间索引，rows:2847,显示预估的扫描行数也比之前少了很多，这种情况下发现确实又走了索引。</p><p>到底是什么情况，只是查询的范围不一样，为什么会有时走索引有事不走呢？</p><h1 id="二、索引失效的几种原因"><a href="#二、索引失效的几种原因" class="headerlink" title="二、索引失效的几种原因"></a>二、索引失效的几种原因</h1><p>先回顾下几种使得索引失效的原因：</p><ol><li>where中索引列有运算</li><li>where中索引使用了函数方法</li><li>复合索引未用左列字段</li><li>like 以 %开头</li><li>条件有or关键字</li><li>需要类型转换</li><li>MySQL觉得全表扫描更快</li></ol><p>几种不推荐使用索引的场景：</p><ol><li>数据唯一性差（一个字段的取值只有几种时）的字段不要使用索引</li><li>频繁更新的字段</li><li>字段不在where语句出现时不要添加索引,如果where后含IS NULL /IS NOT NULL/ like ‘%输入符%’等条件，不建议使用索引</li><li> where 子句里对索引列使用不等于（&lt;&gt;），使用索引效果一般</li></ol><p><a href="https://www.cnblogs.com/liehen2046/p/11052666.html">点击跳转参考博客</a></p><h1 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h1><p>经过查证官网</p><p><img src="http://lzcoder.cn/image-20211129232313911.png" alt="image-20211129232313911"></p><p>大意是：</p><blockquote><p>Each table index is queried, and the best index is used unless the optimizer believes that it is more efficient to use a table scan.</p></blockquote><p>表中的每个索引都会被访问，当中最佳的那个则会被使用，除非优化器认为使用全表查询比使用所有查询更高效。(也就是上面列的第七条)</p><blockquote><p>At one time, a scan was used based on whether the best index spanned more than 30% of the table, but a fixed percentage no longer determines the choice between using an index or a scan.</p></blockquote><p>曾经，是否进行全表扫描取决于使用最好的索引查出来的数据是否超过表的30%的数据，但是现在这个固定百分比(30%)不再决定使用索引还是全表扫描了。</p><blockquote><p>The optimizer now is more complex and bases its estimate on additional factors such as table size, number of rows, and I/O block size.</p></blockquote><p>优化器现在变得更复杂，它考虑的因素更多，比如表大小、行数量、IO块大小。</p><p>通俗点讲：</p><p>我们建的索引并不是总会起作用的，中间有查询优化器插足，它会判断一个查询SQL是否走索引查得更快，若是，就走索引，否则做全表扫描。</p><p>以前有个百分比(30%)决定SQL是走索引还是走全表扫描，就是说如果总共有100行记录，走索引查询出来的记录超过30条，那还不如不走索引了。</p><p>但是现在MySQL不这么干了，不只通过这个百分比来决定走不走索引，而是要参考更多因素来做决定。</p><p><strong>最终得出的结论是，索引失效并不是因为字段类型为时间类型，而是因为查询优化器会对SQL的执行计划进行判断，选择一个最优最快的查询方式，当走索引的代价高于全表扫描时就不会采取走索引的方式去执行SQL。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在根据时间查询表数据时，赶紧查询效率慢，于是在时间字段加了普通索引，然而查询效率仍然慢，于是Explain下发现走的仍然是全表扫描，为什么呢？加了索引为什么没生效？索引的失效条件好像也没说有时间相关内容，本着追根溯源的求知欲，于是有了这篇短记。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="索引" scheme="http://example.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>错误日志收集预警功能开发（一）</title>
    <link href="http://example.com/2021/11/28/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%A2%84%E8%AD%A6%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/11/28/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%A2%84%E8%AD%A6%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-11-28T13:53:34.000Z</published>
    <updated>2022-01-04T01:50:31.702Z</updated>
    
    <content type="html"><![CDATA[<p>该功能要实现检测日志输出内容，实时摘取错误日志片段，存放数据库中~</p><p>后续可进一步开发实现，错误信息分析，邮件预警等功能</p><span id="more"></span><h1 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h1><ol><li>从服务器上检测程序运行输出的日志内容，将日志内容中Exception错误的内容块收取</li><li>将收取的错误信息存放到MySQL数据库中</li></ol><h1 id="二、选用技术点"><a href="#二、选用技术点" class="headerlink" title="二、选用技术点"></a>二、选用技术点</h1><h2 id="1-FileBeat"><a href="#1-FileBeat" class="headerlink" title="1. FileBeat"></a>1. FileBeat</h2><p>采用fileBeat用于检测日志信息，获取日志中错误信息内容块，作为生产者传递给KafKa</p><h2 id="2-Kafka"><a href="#2-Kafka" class="headerlink" title="2. Kafka"></a>2. Kafka</h2><p>用于错误信息的收取，fileBeat传递内容后，通过kafka进行错误信息的传递</p><h2 id="3-SpringBoot-Mybatis-plus-MySQL-MAVEN"><a href="#3-SpringBoot-Mybatis-plus-MySQL-MAVEN" class="headerlink" title="3. SpringBoot+Mybatis-plus+MySQL+MAVEN"></a>3. SpringBoot+Mybatis-plus+MySQL+MAVEN</h2><p>开启kafka消费者监听，实时接受kafka获取的错误日志信息，格式化后入库</p><h1 id="三、实现步骤"><a href="#三、实现步骤" class="headerlink" title="三、实现步骤"></a>三、实现步骤</h1><h2 id="1、使用FileBeat实现日志的正则抓取"><a href="#1、使用FileBeat实现日志的正则抓取" class="headerlink" title="1、使用FileBeat实现日志的正则抓取"></a>1、使用FileBeat实现日志的正则抓取</h2><ol><li>所在Linux服务器执行以下命令下载安装fielBeat</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取filebeat文件</span><br><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-linux-x86_64.tar.gz</span><br><span class="line">解压filebeat压缩包</span><br><span class="line">tar -zxf kafka_2.12-3.0.0.tgz -C /opt/</span><br></pre></td></tr></table></figure><ol start="2"><li><p>修改配置文件</p><p>cd filebeat-7.15.2-linux-x86_64/ 进入目录</p><p>修改filebeat.yml文件，关注以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 限制一个cpu核心，避免在日志较频繁时可能导致CPU满载</span><br><span class="line">max_procs: 1</span><br><span class="line"></span><br><span class="line"># 监测的日志路径</span><br><span class="line">paths:</span><br><span class="line">  - /home/weblogic/base_domain/logs/nohup/nohup*.log</span><br><span class="line"></span><br><span class="line"># 匹配日志的行信息，例如找到以Excepton和Error开头的错误  </span><br><span class="line">include_lines: [&#x27;ERROR&#x27;,&#x27;^(\w&#123;1,&#125;\.)&#123;1,&#125;(.*Exception|.*Error)&#123;1&#125;&#x27;]</span><br><span class="line"></span><br><span class="line">### Multiline options</span><br><span class="line"># 根据实际日志情况进行多行匹配，获取的是错误多行信息</span><br><span class="line">multiline.type: pattern</span><br><span class="line">multiline.pattern: &#x27;^(\w&#123;1,&#125;\.)&#123;1,&#125;(.*Exception|.*Error)&#123;1&#125;|^[[:space:]]+(at|\.&#123;3&#125;)[[:space:]]+\b|^Caused by:&#x27;</span><br><span class="line">multiline.negate: false</span><br><span class="line">multiline.match: after</span><br><span class="line"></span><br><span class="line"># -------------------------------kafka Output-----------------------------------</span><br><span class="line">output.kafka:</span><br><span class="line">  # initial brokers for reading cluster metadata</span><br><span class="line">  hosts: [&quot;101.132.XXX.XX:9092&quot;]</span><br><span class="line"></span><br><span class="line">  # message topic selection + partitioning</span><br><span class="line">  topic: &#x27;error_log_collect_topic&#x27;</span><br><span class="line">  partition.round_robin:</span><br><span class="line">    reachable_only: false</span><br><span class="line">  version: 2.0.0</span><br><span class="line">  required_acks: 1</span><br><span class="line">  compression: gzip</span><br><span class="line">  max_message_bytes: 1000000  </span><br></pre></td></tr></table></figure></li><li><p>filebeat启动</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c filebeat配置文件</span><br></pre></td></tr></table></figure><p>​    也可以后台启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./filebeat -e -c filebeat.yml -d <span class="string">&quot;publish&quot;</span> &gt; /dev/null &gt;2&amp; &gt;1 &amp;</span><br></pre></td></tr></table></figure><p>关于nohup具体用法，查看章节四</p><h2 id="2、使用kafka获取错误日志信息"><a href="#2、使用kafka获取错误日志信息" class="headerlink" title="2、使用kafka获取错误日志信息"></a>2、使用kafka获取错误日志信息</h2><p><a href="https://www.orchome.com/66">kafka中文教程</a></p><p>kafka的使用，要求先要安装好jdk以及zookeeper,kafka3.0.0自带zookeeper,也可以自行单独安装zookee。</p><ol><li>所在Linux服务器执行以下命令下载安装Kafka</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取kafka文件包</span><br><span class="line">wget http://archive.apache.org/dist/kafka/3.0.0/kafka_2.12-3.0.0.tgz</span><br><span class="line">解压</span><br><span class="line">tar kafka_2.12-3.0.0.tgz</span><br></pre></td></tr></table></figure><ol start="2"><li>配置环境变量</li></ol><p><code>vim /etc/profile</code>  添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export KAFKA_HOME=/opt/kafka_2.12-3.0.0</span><br><span class="line">export PATH=$PATH:$KAFKA_HOME/bin</span><br></pre></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><p><code>vim /opt/kafka_2.12-3.0.0/config/server.properties</code></p><p>在内容中修改或者添加以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listeners=PLAINTEXT://:9092</span><br><span class="line">advertised.listeners=PLAINTEXT://101.132.140.20:9092</span><br></pre></td></tr></table></figure><p>同时需要关注<code>zookeeper.connect</code>属性值是否是正确的，如果是本机的zookeeper一般是localhost:2181</p><ol start="4"><li>启动</li></ol><p>启动参数 -daemon 指定后台启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--启动zookeeper</span><br><span class="line">zookeeper-server-start.sh -daemon /opt/kafka_2.12-3.0.0/config/zookeeper.properties</span><br><span class="line">--启动kafka</span><br><span class="line">kafka-server-start.sh -daemon /opt/kafka_2.12-3.0.0/config/server.properties</span><br><span class="line"></span><br><span class="line">--生产者</span><br><span class="line">kafka-console-producer.sh --broker-list localhost:9092 --topic error_log_collect_topic</span><br><span class="line">--消费者</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic error_log_collect_topic --from-beginning</span><br></pre></td></tr></table></figure><ol start="5"><li>创建和查看主题</li></ol><p>创建一个名为“test”的Topic，只有一个分区和一个备份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure><p>创建好之后，可以通过运行以下命令，查看已创建的topic信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --describe --topic test --bootstrap-server localhost:9092</span><br><span class="line">Topic:test  PartitionCount:1    ReplicationFactor:1 Configs:</span><br><span class="line">Topic: test Partition: 0    Leader: 0   Replicas: 0 Isr: 0</span><br></pre></td></tr></table></figure><h2 id="3、SpringBoot-MySQL-Mybatis-Plus"><a href="#3、SpringBoot-MySQL-Mybatis-Plus" class="headerlink" title="3、SpringBoot+MySQL+Mybatis-Plus"></a>3、SpringBoot+MySQL+Mybatis-Plus</h2><h3 id="（—）SpingBoot相关"><a href="#（—）SpingBoot相关" class="headerlink" title="（—）SpingBoot相关"></a>（—）SpingBoot相关</h3><p>新增Module模块tool-log处理kafka获取的信息</p><p>修改pom.xml，注意以下内容</p><ol><li>是否配置了&lt;parent&gt;&lt;/parent&gt;属性</li><li>&lt;dependency&gt;是否依赖了需要的模块</li><li>这个Module另外需要的依赖是否引入</li><li>parent的pom.xml中module是否有这个新module</li><li>SpringBoot主类Module的pom.xml是否依赖了这个新的Module</li></ol><h4 id="1-application-yml配置文件添加kafka信息"><a href="#1-application-yml配置文件添加kafka信息" class="headerlink" title="1. application.yml配置文件添加kafka信息"></a>1. application.yml配置文件添加kafka信息</h4><p>在SpringBoot入口配置Module的resources目录下的application.yml添加以下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line"> kafka:</span><br><span class="line">    consumer:</span><br><span class="line">      enable-auto-commit: true</span><br><span class="line">      auto-offset-reset: earliest</span><br><span class="line">      bootstrap-servers: 101.132.140.20:9092</span><br><span class="line">      group-id: test-consumer-group</span><br></pre></td></tr></table></figure><h4 id="2-application-yml配置文件添加日志数据源"><a href="#2-application-yml配置文件添加日志数据源" class="headerlink" title="2. application.yml配置文件添加日志数据源"></a>2. application.yml配置文件添加日志数据源</h4><p>主要是配置 log数据源，作为后面持久层入库的数据源连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        loginUsername: admin</span><br><span class="line">        loginPassword: 123456</span><br><span class="line">    dynamic:</span><br><span class="line">      druid: #以下是全局默认值，可以全局更改</span><br><span class="line">        minIdle: 5</span><br><span class="line">        maxActive: 20</span><br><span class="line">        filters: stat,wall # 注意这个值和druid原生不一致，默认启动了stat,wall</span><br><span class="line">        stat:</span><br><span class="line">          merge-sql: true</span><br><span class="line">          log-slow-sql: true</span><br><span class="line">      datasource:</span><br><span class="line">        log:</span><br><span class="line">          url: jdbc:mysql://101.132.XXX.XX:3306/XXX</span><br><span class="line">          username: root</span><br><span class="line">          password: XXX</span><br><span class="line">          driverClassName: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><h4 id="3-使用-mybatis-generator-逆向工程生成文件"><a href="#3-使用-mybatis-generator-逆向工程生成文件" class="headerlink" title="3. 使用 mybatis-generator 逆向工程生成文件"></a>3. 使用 <code>mybatis-generator</code> 逆向工程生成文件</h4><p>将生成的文件转移到新的Module中去，注意MyBatis-plus配置在SpringBoot启动类上的Mapper的扫描路径，那么在转移文件的时候，新的Module也要新建这样一层包路径，将相关的mapper文件放进去</p><img src="http://lzcoder.cn/image-20211129114914329.png" alt="image-20211129114914329" style="zoom:67%;"><p><img src="http://lzcoder.cn/image-20211129115109503.png" alt="image-20211129115109503"></p><h4 id="4-业务代码编写"><a href="#4-业务代码编写" class="headerlink" title="4. 业务代码编写"></a>4. 业务代码编写</h4><h5 id="1-编写kafka消费者监听类"><a href="#1-编写kafka消费者监听类" class="headerlink" title="1.  编写kafka消费者监听类"></a>1.  编写kafka消费者监听类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ErrorMsgCollect &#123; </span><br><span class="line">    @Autowired</span><br><span class="line">    ParseErrorInfoMessage parseErrorInfoMessage;</span><br><span class="line">    </span><br><span class="line">    @KafkaListener(topics = &quot;error_log_collect_topic&quot;)</span><br><span class="line">    public void onMessage(ConsumerRecord&lt;Integer,String&gt; record)&#123;</span><br><span class="line">        ErrorLogInfo errorLogInfo = new ErrorLogInfo();</span><br><span class="line">        System.out.println(&quot;消费者收到的消息==&quot;+record.topic()+&quot;\t&quot;+record.partition()+&quot;\t&quot;+record.offset()+&quot;\t&quot;+record.key()+&quot;\t&quot;+record.value());</span><br><span class="line">        parseErrorInfoMessage.parseMessage(record.value(), errorLogInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-编写数据解析类，和数据存库"><a href="#2-编写数据解析类，和数据存库" class="headerlink" title="2.  编写数据解析类，和数据存库"></a>2.  编写数据解析类，和数据存库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ParseErrorInfoMessage &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    ErrorLogInfoService errorLogInfoService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析错误信息</span><br><span class="line">     * @param errorInfo</span><br><span class="line">     * @param errorLogInfo</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public ErrorLogInfo parseMessage(String errorInfo, ErrorLogInfo errorLogInfo)&#123;</span><br><span class="line">        //textMp();</span><br><span class="line">        JSONObject errorInfoObject = JSONObject.parseObject(errorInfo);</span><br><span class="line">        //获取错误日志时间</span><br><span class="line">        String errDate = errorInfoObject.get(&quot;@timestamp&quot;).toString();</span><br><span class="line">        errorLogInfo.setErrordate(DateUtil.parse(errDate));</span><br><span class="line"></span><br><span class="line">        //获取日志位置</span><br><span class="line">        JSONObject logInfoObject = (JSONObject)errorInfoObject.get(&quot;log&quot;);</span><br><span class="line">        JSONObject fileObject = (JSONObject)logInfoObject.get(&quot;file&quot;);</span><br><span class="line">        errorLogInfo.setLogpath(fileObject.get(&quot;path&quot;).toString());</span><br><span class="line">        //获取日志所在服务器ip</span><br><span class="line">        JSONObject hostObject = (JSONObject)errorInfoObject.get(&quot;host&quot;);</span><br><span class="line">        JSONArray ipArr = hostObject.getJSONArray(&quot;ip&quot;);</span><br><span class="line">        errorLogInfo.setIpaddr(ipArr.get(0).toString());</span><br><span class="line">        //获取错误日志信息</span><br><span class="line">        Object errMessage = errorInfoObject.get(&quot;message&quot;);</span><br><span class="line">        errorLogInfo.setMessage(errMessage.toString());</span><br><span class="line">        errorLogInfo.setAdddate(new Date());</span><br><span class="line">        saveErrorLogInfo(errorLogInfo);</span><br><span class="line">        return errorLogInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//入库</span><br><span class="line">    public void saveErrorLogInfo(ErrorLogInfo errorLogInfo)&#123;</span><br><span class="line">        boolean save = errorLogInfoService.save(errorLogInfo);</span><br><span class="line">        System.out.println(&quot;插入提示：&quot; + save );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-注意："><a href="#3-注意：" class="headerlink" title="3. 注意："></a>3. 注意：</h5><p>在对应的mapper文件上方提交@DS(“XX”)，指定使用的数据源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">@DS(&quot;log&quot;)</span><br><span class="line">public interface ErrorLogInfoMapper extends BaseMapper&lt;ErrorLogInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成代码编写开发，通过SpringBoot启动类即可启动</p><h3 id="（二）MySQL"><a href="#（二）MySQL" class="headerlink" title="（二）MySQL"></a>（二）MySQL</h3><p>mysql相关下载安装参考文档：<a href="https://www.lanzouw.com/inlnNwzydfe">点击下载</a> 密码：lzlz</p><p>建立数据库，确定表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `error_log_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增逐渐ID&#x27;</span>,</span><br><span class="line">  `ipaddr` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;IP地址&#x27;</span>,</span><br><span class="line">  `logpath` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日志地址&#x27;</span>,</span><br><span class="line">  `message` text COMMENT <span class="string">&#x27;错误信息&#x27;</span>,</span><br><span class="line">  `errordate` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;错误日志时间&#x27;</span>,</span><br><span class="line">  `adddate` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日志入库时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `error_date_index` (`errordate`),</span><br><span class="line">  FULLTEXT KEY `error_info_index` (`message`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">50426</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><h3 id="（三）项目部署"><a href="#（三）项目部署" class="headerlink" title="（三）项目部署"></a>（三）项目部署</h3><h4 id="1、安装配置maven"><a href="#1、安装配置maven" class="headerlink" title="1、安装配置maven"></a>1、安装配置maven</h4><p>这一步骤有无皆可，可以本地打包上传</p><p>将maven二进制文件包上传到服务器解压后，添加到环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAVEN_HOME=/usr/local/src/apache-maven-3.6.3</span><br><span class="line">PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><p>然后输入 source /etc/profile 使得环境变量生效</p><p>输入 mvn -version 测试，配置是否成功</p><p>配置 maven的setting.xml文件</p><ol><li>本地仓库地址</li><li>阿里云镜像</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;/home/b2b/repository&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h4 id="2、上传源码"><a href="#2、上传源码" class="headerlink" title="2、上传源码"></a>2、上传源码</h4><p>将源码上传到服务器上</p><h4 id="3、使用maven打包"><a href="#3、使用maven打包" class="headerlink" title="3、使用maven打包"></a>3、使用maven打包</h4><p>将目录切到源码的parent层级下，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>进行先clean再打包的操作</p><p>打包完成，在SpringBoot启动类模块，target文件夹下，找到生成的jar文件，在该层级执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar b2btool-web-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure><p>nohup 会将输出的日志后台输出到 nohub.out文件中</p><p>至此项目部署完成</p><h1 id="四、具体细节"><a href="#四、具体细节" class="headerlink" title="四、具体细节"></a>四、具体细节</h1><h2 id="1、mabits-generator逆向工程使用"><a href="#1、mabits-generator逆向工程使用" class="headerlink" title="1、mabits-generator逆向工程使用"></a>1、mabits-generator逆向工程使用</h2><p>pom.xml 依赖导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mp代码生成器--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--为实体类自动添加getter、setter、toString等方法--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--数据库连接驱动--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>编写generator代码生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusGenerator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//作者名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHOR = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">    <span class="comment">//表table的前缀，不加到生成的类名中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">&quot;t_&quot;</span>;</span><br><span class="line">    <span class="comment">//功能模块名称，生成的文件会存放到模块下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE_NAME = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="comment">//要生成的表名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] TABLES= &#123;<span class="string">&quot;想生成代码的表名&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_URL = <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_USERNAME = <span class="string">&quot;数据库用户名&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_PASSWORD = <span class="string">&quot;数据库密码&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_PACKAGE = <span class="string">&quot;com.liu.test.mybatis.demo&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前项目路径</span></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator generator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//数据库配置</span></span><br><span class="line">        configDataSource(generator);</span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        configGlobal(generator, projectPath);</span><br><span class="line">        <span class="comment">//包相关配置</span></span><br><span class="line">        configPackage(generator);</span><br><span class="line">        <span class="comment">//策略配置</span></span><br><span class="line">        configStrategy(generator);</span><br><span class="line">        <span class="comment">//自定义配置</span></span><br><span class="line">        cofnigCustom(generator, projectPath);</span><br><span class="line">        <span class="comment">//模版引擎配置</span></span><br><span class="line">        configTemplate(generator);</span><br><span class="line"> </span><br><span class="line">        generator.execute();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 进行数据库相关配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:27</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configDataSource</span><span class="params">(AutoGenerator generator)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数据源配置</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setUrl(JDBC_URL);</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class="line">        <span class="comment">// dataSourceConfig.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dataSourceConfig.setDriverName(JDBC_DRIVER);</span><br><span class="line">        dataSourceConfig.setUsername(JDBC_USERNAME);</span><br><span class="line">        dataSourceConfig.setPassword(JDBC_PASSWORD);</span><br><span class="line">        generator.setDataSource(dataSourceConfig);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 进行全局配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> projectPath :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:28</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configGlobal</span><span class="params">(AutoGenerator generator, String projectPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//生成文件输出存放路径 = 当前项目路径 + 想存放到项目中的路径</span></span><br><span class="line">        String fileOutputPatch = projectPath.concat(<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        globalConfig.setOutputDir(fileOutputPatch);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//设置作者</span></span><br><span class="line">        globalConfig.setAuthor(AUTHOR);</span><br><span class="line">        <span class="comment">//生成完后是否打开输出目录</span></span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//是否覆盖生成过的已有文件</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//是否开启activeRecord模式</span></span><br><span class="line">        globalConfig.setActiveRecord(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 是否在xml中添加二级缓存配置,默认false</span></span><br><span class="line">        globalConfig.setEnableCache(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// XML文件返回对象定义ResultMap</span></span><br><span class="line">        globalConfig.setBaseResultMap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// XML返回对象字段列表columList</span></span><br><span class="line">        globalConfig.setBaseColumnList(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置主键字段类型</span></span><br><span class="line">        globalConfig.setIdType(IdType.INPUT);</span><br><span class="line">        <span class="comment">//生成的文件名字定义，%s 会自动填充表实体属性</span></span><br><span class="line">        globalConfig.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setEntityName(<span class="string">&quot;%s&quot;</span>);</span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        globalConfig.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        globalConfig.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        <span class="comment">//开启 swagger2 模式,实体属性 Swagger2 注解,默认false</span></span><br><span class="line">        globalConfig.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">        generator.setGlobalConfig(globalConfig);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 各个包配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:34</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configPackage</span><span class="params">(AutoGenerator generator)</span> </span>&#123;</span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setModuleName(MODULE_NAME);</span><br><span class="line">        packageConfig.setParent(BASE_PACKAGE);<span class="comment">//包路径</span></span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        packageConfig.setXml(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        generator.setPackageInfo(packageConfig);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 策略配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:34</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configStrategy</span><span class="params">(AutoGenerator generator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">//全局大写命名</span></span><br><span class="line">        <span class="comment">//strategy.setCapitalMode(true)</span></span><br><span class="line">        <span class="comment">//全局下划线命名</span></span><br><span class="line">        <span class="comment">//strategy.setDbColumnUnderline(true)</span></span><br><span class="line">        <span class="comment">//表的前缀</span></span><br><span class="line">        strategy.setTablePrefix(PREFIX);</span><br><span class="line">        <span class="comment">//表名下划线转为驼峰</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//字段名下划线转为驼峰</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//生成哪些表</span></span><br><span class="line">        strategy.setInclude(TABLES);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置模版引擎的类型 freemarker使用ftl文件，velocity使用vm文件</span></span><br><span class="line">        generator.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line"><span class="comment">//        generator.setTemplateEngine(new VelocityTemplateEngine());</span></span><br><span class="line">        <span class="comment">//是否使用lombok</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置是否restful控制器</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置布尔类型字段是否去掉is前缀</span></span><br><span class="line">        strategy.setEntityBooleanColumnRemoveIsPrefix(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 自定义实体父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperEntityClass(&quot;com.baomidou.demo.TestEntity&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义实体，公共字段</span></span><br><span class="line">        <span class="comment">// strategy.setSuperEntityColumns(new String[] &#123; &quot;test_id&quot;, &quot;age&quot; &#125;);</span></span><br><span class="line">        <span class="comment">// 自定义 mapper 父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperMapperClass(&quot;com.baomidou.demo.TestMapper&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义 service 父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperServiceClass(&quot;com.baomidou.demo.TestService&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义 service 实现类父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperServiceImplClass(&quot;com.baomidou.demo.TestServiceImpl&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义 controller 父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperControllerClass(&quot;com.baomidou.demo.TestController&quot;);</span></span><br><span class="line">        <span class="comment">// 【实体】是否生成字段常量（默认 false）</span></span><br><span class="line">        <span class="comment">// public static final String ID = &quot;test_id&quot;;</span></span><br><span class="line">        <span class="comment">// strategy.setEntityColumnConstant(true);</span></span><br><span class="line">        <span class="comment">// 【实体】是否为构建者模型（默认 false）</span></span><br><span class="line">        <span class="comment">// public User setName(String name) &#123;this.name = name; return this;&#125;</span></span><br><span class="line">        <span class="comment">// strategy.setEntityBuilderModel(true);</span></span><br><span class="line">        generator.setStrategy(strategy);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 自定义配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> projectPath :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:55</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cofnigCustom</span><span class="params">(AutoGenerator generator, String projectPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//自定义输出文件名 ， 如果 Entity 设置了前后缀、此处 xml 的名称会跟着发生变化</span></span><br><span class="line">                <span class="keyword">return</span> projectPath.concat(<span class="string">&quot;/src/main/resources/mapper/&quot;</span>).concat(MODULE_NAME).concat(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                        .concat(tableInfo.getEntityName()).concat(<span class="string">&quot;Mapper&quot;</span>).concat(StringPool.DOT_XML);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">       <span class="comment">/* cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录&quot;);</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        generator.setCfg(cfg);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 模版引擎配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:59</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configTemplate</span><span class="params">(AutoGenerator generator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模板引擎配置 默认是VelocityTemplateEngine</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"> </span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        generator.setTemplate(templateConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这样配置后就可右键运行生成代码了，只不过是最原始的代码，模版是官方的默认模版。</p><p>根据自己使用的模版引擎来编写模版。模版在项目中存放到resources目录下的templates目录中，如图：</p><p><img src="http://lzcoder.cn/image-20211129130453647.png" alt="image-20211129130453647"></p><h2 id="2、FastJson解析数据"><a href="#2、FastJson解析数据" class="headerlink" title="2、FastJson解析数据"></a>2、FastJson解析数据</h2><p>将获取的数据转化为JSON对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONObject jsonObject = JSONObject.parseObject(jsonStr);</span><br></pre></td></tr></table></figure><ol><li>对于暴漏的键值对可以直接通过get方法获取，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取错误日志时间</span><br><span class="line">String errDate = errorInfoObject.get(&quot;@timestamp&quot;).toString();</span><br></pre></td></tr></table></figure><ol start="2"><li>对于键值对，值仍是JSON对象的，获取后仍将类型转换为JSONObject，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取日志位置</span><br><span class="line">JSONObject logInfoObject = (JSONObject)errorInfoObject.get(&quot;log&quot;);</span><br><span class="line">JSONObject fileObject = (JSONObject)logInfoObject.get(&quot;file&quot;);</span><br><span class="line">errorLogInfo.setLogpath(fileObject.get(&quot;path&quot;).toString());</span><br></pre></td></tr></table></figure><ol start="3"><li>对于值是数组的，获取其数组对象，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取日志所在服务器ip</span><br><span class="line">JSONObject hostObject = (JSONObject)errorInfoObject.get(&quot;host&quot;);</span><br><span class="line">JSONArray ipArr = hostObject.getJSONArray(&quot;ip&quot;);</span><br><span class="line">errorLogInfo.setIpaddr(ipArr.get(0).toString());</span><br></pre></td></tr></table></figure><h2 id="3、nohup"><a href="#3、nohup" class="headerlink" title="3、nohup"></a>3、nohup</h2><h3 id="（一）作用"><a href="#（一）作用" class="headerlink" title="（一）作用"></a>（一）作用</h3><p>nohup命令用于不挂断地运行命令（关闭当前session不会中断改程序，只能通过kill等命令删除）。<br>使用nohup命令提交作业，如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 &amp; echo $! &gt; command.pid</span><br></pre></td></tr></table></figure><p>&amp;用于后台执行程序，但是关闭当前session程序也会结束</p><h3 id="（二）2-gt-amp-1-amp-详解"><a href="#（二）2-gt-amp-1-amp-详解" class="headerlink" title="（二）2&gt;&amp;1 &amp;详解"></a>（二）2&gt;&amp;1 &amp;详解</h3><p>bash中：</p><ul><li>0 代表STDIN_FILENO 标准输入（一般是键盘），</li><li>1 代表STDOUT_FILENO 标准输出（一般是显示屏，准确的说是用户终端控制台），</li><li>2 三代表STDERR_FILENO (标准错误（出错信息输出）。</li></ul><p>&gt; 直接把内容生成到指定文件，会覆盖原来文件中的内容[ls &gt; test.txt],<br>&gt;&gt; 尾部追加，不会覆盖原有内容 [ls &gt;&gt; test.txt],<br>&lt; 将指定文件的内容作为前面命令的参数[cat &lt; text.sh]</p><p><strong>2&gt;&amp;1就是用来将标准错误2重定向到标准输出1中的。此处1前面的&amp;就是为了让bash将1解释成标准输出而不是文件1。至于最后一个&amp;，则是让bash在后台执行。</strong></p><h3 id="（三）-dev-null-2-gt-amp-1"><a href="#（三）-dev-null-2-gt-amp-1" class="headerlink" title="（三）/dev/null 2&gt;&amp;1"></a>（三）/dev/null 2&gt;&amp;1</h3><p>可以把/dev/null 可以看作”黑洞”. 它等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到.<br>/dev/null 2&gt;&amp;1则表示吧标准输出和错误输出都放到这个“黑洞”，表示什么也不输出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;该功能要实现检测日志输出内容，实时摘取错误日志片段，存放数据库中~&lt;/p&gt;
&lt;p&gt;后续可进一步开发实现，错误信息分析，邮件预警等功能&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="kafka" scheme="http://example.com/tags/kafka/"/>
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
    <category term="filebeat" scheme="http://example.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>Typora配合PicGo使用七牛云实现图片云存储</title>
    <link href="http://example.com/2021/11/24/Typora%E9%85%8D%E5%90%88PicGo%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2021/11/24/Typora%E9%85%8D%E5%90%88PicGo%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%BA%91%E5%AD%98%E5%82%A8/</id>
    <published>2021-11-24T01:19:19.000Z</published>
    <updated>2022-01-04T01:51:36.381Z</updated>
    
    <content type="html"><![CDATA[<p>之前分享了《hexo搭配typora在文档中插入图片上传到github》，github作为代码存储仓库，放置图片总有些不合适，况且由于网络原因，加载效果并不是很好，因此，在这里推荐大家使用Typora+PicGO+七牛云来实现图片的云存储</p><span id="more"></span><h1 id="一、工具说明"><a href="#一、工具说明" class="headerlink" title="一、工具说明"></a>一、工具说明</h1><h2 id="1、Typora"><a href="#1、Typora" class="headerlink" title="1、Typora"></a>1、Typora</h2><p>typora大家都不陌生，是一款MarkDown语法的编辑工具，用来写笔记比较方便</p><p>具体介绍和获取方式，可以参照我的<a href="https://liuzhengkaifa.github.io/2021/11/10/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/#more">实用工具介绍</a></p><h2 id="2、PicGo"><a href="#2、PicGo" class="headerlink" title="2、PicGo"></a>2、PicGo</h2><p>PicGo是一个用于快速上传图片并获取图片 URL 链接的工具，这个工具在GitHub上是开源的，我们可以访问直接下载</p><p><a href="https://github.com/Molunerfinn/PicGo">PicGo开源GitHub点击跳转</a></p><h2 id="3、七牛云"><a href="#3、七牛云" class="headerlink" title="3、七牛云"></a>3、七牛云</h2><p>七牛云存储用来存储图片，通过typora实用PicGo实际上是将图片上传到七牛云提供的云存储服务器上，然后我们通过图片访问url就能快速访问图片</p><h1 id="二、使用操作"><a href="#二、使用操作" class="headerlink" title="二、使用操作"></a>二、使用操作</h1><h2 id="1、下载工具和七牛云注册"><a href="#1、下载工具和七牛云注册" class="headerlink" title="1、下载工具和七牛云注册"></a>1、下载工具和七牛云注册</h2><ul><li>下载<a href="https://liuzhengkaifa.github.io/2021/11/10/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/#more">Typora</a>和<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></li></ul><p>Typora进入官网下载即可，正常安装</p><p>PicGo进入GItHub网站，点击下载安装的<strong>应用</strong>，然后再新的页面下载exe可执行文件即可</p><p><img src="http://lzcoder.cn/image-20211124093453034.png" alt="image-20211124093453034"></p><p><img src="http://lzcoder.cn/image-20211124093527306.png" alt="image-20211124093527306"></p><p>软件正常安装即可，需要记住安装的地址，后面需要配置使用</p><ul><li>注册七牛云账户</li></ul><p><a href="https://portal.qiniu.com/">点击跳转官网</a></p><p>注册认证完成后，在对象存储&gt;&gt;空间管理&gt;&gt;新建一个空间，后续备用</p><p><img src="http://lzcoder.cn/image-20211124093850230.png" alt="image-20211124093850230"></p><h2 id="2、配置PicGo"><a href="#2、配置PicGo" class="headerlink" title="2、配置PicGo"></a>2、配置PicGo</h2><p>软件安装完成后，打开PicGo</p><p>将七牛云个人中心的 <code>AK</code> 和 <code>SK</code>，分别配置到 PicGo &gt;&gt; 图床设置&gt;&gt;七牛图床  对应位置</p><p><img src="http://lzcoder.cn/image-20211124094120923.png" alt="image-20211124094120923"></p><p>然后在打开七牛云新建的空间，依次将空间名称、域名地址配到PicGo中（注意，域名配置中，需要添加http://或者https://），这里需要记一下，空间的存储区域在哪个位置，例如我的在华南。</p><p><img src="http://lzcoder.cn/image-20211124094500089.png" alt="image-20211124094500089"></p><p>然后对照这张表将对应的地域简称填到PicGo的存储区域中，至此，PicGo完成配置</p><p><img src="http://lzcoder.cn/image-20211124094707432.png" alt="image-20211124094707432"></p><h2 id="3、Typora配置"><a href="#3、Typora配置" class="headerlink" title="3、Typora配置"></a>3、Typora配置</h2><p>Typora依次选择格式&gt;&gt;图像&gt;&gt;全局图像设置</p><p><img src="http://lzcoder.cn/image-20211124094940026.png" alt="image-20211124094940026"></p><p>在偏好设置处，先将 插入图片时改为上传图片，在上传服务设定处，选择上传服务为PicGo(app)，PicGo路径选择PicGo的安装路径</p><p>最后点击验证图片上产选项，如果成功的话至此所有配置完成。</p><p><img src="http://lzcoder.cn/image-20211124095057680.png" alt="image-20211124095057680"></p><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>打开Typora,随便粘贴一张图片，看路径是否是配置的七牛云地址，以及图片是否能够正常显示。如果不能的话看看PicGo是否配置出错，例如协议是否加对了，将https://和http://切换试下。</p><p><img src="http://lzcoder.cn/image-20211124095443295.png" alt="image-20211124095443295"></p><p>至此完成配置使用，大家愉快的耍起来吧~</p><h2 id="5、问题"><a href="#5、问题" class="headerlink" title="5、问题"></a>5、问题</h2><p>这是看资源加载会发现本是http的数据资源会被强制加载成https</p><p><img src="http://lzcoder.cn/image-20211124103733805.png" alt="image-20211124103733805"></p><p>如果此页面图片无法正常显示，请点击<a href="https://blog.csdn.net/qq_40875577/article/details/120000269?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link">解决方案</a>：</p><p><img src="http://lzcoder.cn/image-20211124154552264-16377401145391.png" alt="image-20211124154552264"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前分享了《hexo搭配typora在文档中插入图片上传到github》，github作为代码存储仓库，放置图片总有些不合适，况且由于网络原因，加载效果并不是很好，因此，在这里推荐大家使用Typora+PicGO+七牛云来实现图片的云存储&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习记录（一）</title>
    <link href="http://example.com/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-11-22T03:20:34.000Z</published>
    <updated>2021-11-29T06:50:58.213Z</updated>
    
    <content type="html"><![CDATA[<p>之前对MySQL也有过学习，但仅仅停留在会用的层面，下面通过这次学习，希望对MySQL有个更深入的认识</p><span id="more"></span><h1 id="一、MySQL发展历程"><a href="#一、MySQL发展历程" class="headerlink" title="一、MySQL发展历程"></a>一、MySQL发展历程</h1><h2 id="1-历史节点"><a href="#1-历史节点" class="headerlink" title="1. 历史节点"></a>1. 历史节点</h2><p>mysql发展主要有以下几个标志性节点</p><ol><li>1996年发布MySQL 1.0</li><li>2005年发布MySQL 5.0版本，这是一个里程碑意义版本，支持了Oracle的许多功能</li><li>2008年和2009年，大鱼吃小鱼，小鱼吃虾米，先后sum公司收购了MySQL AB 公司，Oracle公司收购了sun公司</li></ol><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122112418273.png" alt="image-20211122112418273"></p><p>MySQL主流分支架构</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122112950491.png" alt="image-20211122112950491"></p><h2 id="2-应用架构演变"><a href="#2-应用架构演变" class="headerlink" title="2. 应用架构演变"></a>2. 应用架构演变</h2><h3 id="（一）V1-0-单机架构"><a href="#（一）V1-0-单机架构" class="headerlink" title="（一）V1.0 单机架构"></a>（一）V1.0 单机架构</h3><p>一个小型的网站，一台数据库服务器就能够满足数据的读取和写入，一般会把所有的数据写入一个MySQL instance中</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122113421008.png" alt="image-20211122113421008"></p><h4 id="瓶颈"><a href="#瓶颈" class="headerlink" title="瓶颈"></a>瓶颈</h4><ol><li>数据量不能太大，并发访问能力弱</li><li>服务器挂点，系统就会崩溃无法访问</li></ol><h3 id="（二）主从架构"><a href="#（二）主从架构" class="headerlink" title="（二）主从架构"></a>（二）主从架构</h3><p>同步2台或多台服务器，一台M主库承担写压力，多台S子库承担读压力，对于写少读多的系统，采用主从架构能够解决数据库服务器读写压力多大的问题</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122153612805.png" alt="image-20211122153612805"></p><h4 id="瓶颈-1"><a href="#瓶颈-1" class="headerlink" title="瓶颈"></a>瓶颈</h4><p>​        数据量不能太大，对于写要求比较高的场景，写服务器超出承受</p><h3 id="（三）分库分表"><a href="#（三）分库分表" class="headerlink" title="（三）分库分表"></a>（三）分库分表</h3><p>分库分表分垂直拆分和水平拆分，垂直拆分每个库都拥有完整的数据，水平拆分每个库拥有1/n数据，</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122154500491.png" alt="image-20211122154500491"></p><p>水平拆分如何拆分、客户端请求怎么路由以及如何保持数据的一致性是个难题</p><h3 id="（四）云数据库"><a href="#（四）云数据库" class="headerlink" title="（四）云数据库"></a>（四）云数据库</h3><p>云数据库可以为公司节约成本，具有一定的优势，例如弹性扩容、便于管理，服务提供商提供详细的技术支撑</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122160213031.png" alt="image-20211122160213031"></p><h1 id="二、MySQL架构原理"><a href="#二、MySQL架构原理" class="headerlink" title="二、MySQL架构原理"></a>二、MySQL架构原理</h1><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122160856653.png" alt="image-20211122160856653"></p><p>MySQL架构自顶向下可分为网络连接层、服务层、存储引擎层、和系统文件层</p><h2 id="1、网络连接层"><a href="#1、网络连接层" class="headerlink" title="1、网络连接层"></a>1、网络连接层</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前对MySQL也有过学习，但仅仅停留在会用的层面，下面通过这次学习，希望对MySQL有个更深入的认识&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据库表结构文档生成工具</title>
    <link href="http://example.com/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</id>
    <published>2021-11-21T07:41:11.000Z</published>
    <updated>2021-11-21T08:21:22.851Z</updated>
    
    <content type="html"><![CDATA[<p>偶然间，发现了一个非常好用的项目，这个项目能够快速的将数据库表结构以文档形式导出，解决了之前项目要验收写数据库设计文档时的困扰。有了这个工具的加持，一键导出系统表结构，对快速理解项目的整体情况有很大帮助~~，有兴趣的小伙伴可以看看。</p><span id="more"></span><h1 id="一、项目来源"><a href="#一、项目来源" class="headerlink" title="一、项目来源"></a>一、项目来源</h1><p>项目来源于GItHub上的一个开源项目，作者将这个项目命名为 <code>screw</code>，含义为螺丝钉，寓意为：工具虽小，但作用很大，是开发中重要的工具</p><p>GitHub地址：<a href="https://github.com/pingfangushi/screw">点击跳转</a></p><h1 id="二、具体使用"><a href="#二、具体使用" class="headerlink" title="二、具体使用"></a>二、具体使用</h1><h2 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h2><p>新建一个Maven项目，在pom.xml文件中添加依赖，拉下相关jar包</p><p>下面示例添加了<code>mysql</code>和<code>oracle</code>两个驱动依赖，可根据项目情况自行选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.smallbun.screw&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;screw-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- HikariCP --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mysql driver--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.40&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;21.1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2、新建JAVA文件"><a href="#2、新建JAVA文件" class="headerlink" title="2、新建JAVA文件"></a>2、新建JAVA文件</h2><p>新建一个Test.java普通的java类，将代码拷贝到main方法中，导入相关jar包。</p><p>修改配置信息</p><ol><li><p>连接驱动</p><ol><li>mysql：<code>com.mysql.jdbc.Driver</code></li><li>oracle：<code>oracle.jdbc.driver.OracleDriver</code></li></ol></li><li><p>jdbcUrl</p><ol><li>mysql：<code>jdbc:mysql://127.0.0.1:3306/health?characterEncoding=UTF-8</code></li><li>oracle：<code>jdbc:oracle:thin:@xxx.xx.x.xx:1521:xxx?characterEncoding=UTF-8</code></li></ol></li><li><p>username和password</p><p>配置数据源的账号和密码</p></li><li><p>fileOutputDir</p></li></ol><p>​        配置文档输出路径地址</p><ol start="5"><li><p>fileType     </p><p>文档输出类型，默认 <code>EngineFileType.HTML</code>以网页形式输出，可以修改</p><ol><li>EngineFileType.HTML ：HTML文件    </li><li>EngineFileType.WORD：WORD文件    </li><li>EngineFileType.MD  Markdown文件    </li></ol></li><li><p>fileName</p></li></ol><p>​        输出文件名自定义修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">import cn.smallbun.screw.core.Configuration;</span><br><span class="line">import cn.smallbun.screw.core.engine.EngineConfig;</span><br><span class="line">import cn.smallbun.screw.core.engine.EngineFileType;</span><br><span class="line">import cn.smallbun.screw.core.engine.EngineTemplateType;</span><br><span class="line">import cn.smallbun.screw.core.execute.DocumentationExecute;</span><br><span class="line">import cn.smallbun.screw.core.process.ProcessConfig;</span><br><span class="line">import com.zaxxer.hikari.HikariConfig;</span><br><span class="line">import com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     文档生成</span><br><span class="line">    */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //数据源</span><br><span class="line">        HikariConfig hikariConfig = new HikariConfig();</span><br><span class="line">        hikariConfig.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        hikariConfig.setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/health?characterEncoding=UTF-8&quot;);</span><br><span class="line">        hikariConfig.setUsername(&quot;root&quot;);</span><br><span class="line">        hikariConfig.setPassword(&quot;Gepoint&quot;);</span><br><span class="line">        //设置可以获取tables remarks信息</span><br><span class="line">        hikariConfig.addDataSourceProperty(&quot;useInformationSchema&quot;, &quot;true&quot;);</span><br><span class="line">        hikariConfig.setMinimumIdle(2);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(5);</span><br><span class="line">        DataSource dataSource = new HikariDataSource(hikariConfig);</span><br><span class="line">        //生成配置</span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                //生成文件路径</span><br><span class="line">                .fileOutputDir(&quot;D:\\project\\screw\\&quot;)</span><br><span class="line">                //打开目录</span><br><span class="line">                .openOutputDir(true)</span><br><span class="line">                //文件类型</span><br><span class="line">                .fileType(EngineFileType.HTML)</span><br><span class="line">                //生成模板实现</span><br><span class="line">                .produceType(EngineTemplateType.freemarker)</span><br><span class="line">                //自定义文件名称</span><br><span class="line">                .fileName(&quot;数据库表结构文档&quot;).build();</span><br><span class="line"></span><br><span class="line">        //忽略表</span><br><span class="line">        ArrayList&lt;String&gt; ignoreTableName = new ArrayList&lt;&gt;();</span><br><span class="line">        ignoreTableName.add(&quot;test_user&quot;);</span><br><span class="line">        ignoreTableName.add(&quot;test_group&quot;);</span><br><span class="line">        //忽略表前缀</span><br><span class="line">        ArrayList&lt;String&gt; ignorePrefix = new ArrayList&lt;&gt;();</span><br><span class="line">        ignorePrefix.add(&quot;test_&quot;);</span><br><span class="line">        //忽略表后缀</span><br><span class="line">        ArrayList&lt;String&gt; ignoreSuffix = new ArrayList&lt;&gt;();</span><br><span class="line">        ignoreSuffix.add(&quot;_test&quot;);</span><br><span class="line">        ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">                //指定生成逻辑、当存在指定表、指定表前缀、指定表后缀时，将生成指定表，其余表不生成、并跳过忽略表配置</span><br><span class="line">                //根据名称指定表生成</span><br><span class="line">                .designatedTableName(new ArrayList&lt;&gt;())</span><br><span class="line">                //根据表前缀生成</span><br><span class="line">                .designatedTablePrefix(new ArrayList&lt;&gt;())</span><br><span class="line">                //根据表后缀生成</span><br><span class="line">                .designatedTableSuffix(new ArrayList&lt;&gt;())</span><br><span class="line">                //忽略表名</span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                //忽略表前缀</span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                //忽略表后缀</span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line">        //配置</span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                //版本</span><br><span class="line">                .version(&quot;1.0.0&quot;)</span><br><span class="line">                //描述</span><br><span class="line">                .description(&quot;数据库设计文档生成&quot;)</span><br><span class="line">                //数据源</span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                //生成配置</span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                //生成配置</span><br><span class="line">                .produceConfig(processConfig)</span><br><span class="line">                .build();</span><br><span class="line">        //执行生成</span><br><span class="line">        new DocumentationExecute(config).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、执行代码"><a href="#三、执行代码" class="headerlink" title="三、执行代码"></a>三、执行代码</h1><p>执行完成后，在配置的路径下即生成对应格式的文档</p><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><p><img src="/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/image-20211121161543086.png" alt="image-20211121161543086"></p><h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p><img src="/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/image-20211121161606503.png" alt="image-20211121161606503"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;偶然间，发现了一个非常好用的项目，这个项目能够快速的将数据库表结构以文档形式导出，解决了之前项目要验收写数据库设计文档时的困扰。有了这个工具的加持，一键导出系统表结构，对快速理解项目的整体情况有很大帮助~~，有兴趣的小伙伴可以看看。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>一致性Hash算法及在Nginx负载均衡策略上的应用</title>
    <link href="http://example.com/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2021-11-20T00:55:49.000Z</published>
    <updated>2021-11-20T03:07:05.193Z</updated>
    
    <content type="html"><![CDATA[<p>博文介绍了普通hash算法、一致性hash算法、一致性hash算法在Nginx负载均衡策略中的应用，文章主要来源拉钩高薪训练营相关内容+自己的理解，条理清晰，能够帮助理解hash算法到底在查询和存储过程或者是负载均衡中到底起了什么样的作用，为什么会有那么高的效率?有兴趣的小伙伴可以了解下</p><span id="more"></span><h1 id="一、普通Hash算法"><a href="#一、普通Hash算法" class="headerlink" title="一、普通Hash算法"></a>一、普通Hash算法</h1><h2 id="1、哈希算法的用处"><a href="#1、哈希算法的用处" class="headerlink" title="1、哈希算法的用处"></a>1、哈希算法的用处</h2><p>哈希算法主要用于数据查询、存储、安全加密等领域，例如Java中的HashTable,Git中的索引，MD5、SHA等</p><h2 id="2、为什么要使用Hash算法"><a href="#2、为什么要使用Hash算法" class="headerlink" title="2、为什么要使用Hash算法"></a>2、为什么要使用Hash算法</h2><p>查询效率高，hash算法设计好的话，使用hash算法查询时间复杂度能够达到n(1)，即实现一次查询。</p><h2 id="3、Hash算法到底是什么"><a href="#3、Hash算法到底是什么" class="headerlink" title="3、Hash算法到底是什么"></a>3、Hash算法到底是什么</h2><p>hash算法不是一种算法，而是<strong>一类算法</strong>。</p><p>主要都是实现：<strong>给一个任意大小的数据生成一个固定长度的数据，作为它的一个映射，一一对应</strong>。</p><p>下面通过一个最普通简单的hash算法（除留余数法）来理解下hash算法：</p><p>就是给定一个固定长度的数组，和一个数</p><p>hash算法：就是将这个数对数组长度进行求模（即求余数），得到的结果就是哈希值</p><p>那么这个数和这个哈希值就建立了一一对应的关系，将这个数即可存放在数组下标值为它的哈希值的数组中，因此，判断这个数组有没有这个值时，只需要计算出这个值的hash值，直接根据数组下标查询是否为空即可得出结论。</p><p><strong>问题</strong>：上面是最简单的hash算法，肯定会有问题出现，如多个数据通过求余数得到的结果一直，怎么都存在一个下标处，这就产生了hash冲突，解决的方法有开发寻址法，和拉链法，后面会讲到。这只是个示例，实际的hash算法要复杂很多，而且hash算法的研究一直在持续~</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120092911825.png" alt="image-20211120092911825"></p><ol><li>开发寻址法</li></ol><p>如果数据是1， 6， 7， 8，把这4个数据存储到上⾯的数组中 </p><p>开发寻址法的解决策略：</p><p>1 放进去了， 6再来的时候，向前或者向后找空闲位置存放</p><p>缺陷:</p><p>如果数组⻓度定义好了⽐如10，⻓度不能扩展，来了11个数据，不管Hash冲突不冲突，肯定存不下这么多数据 </p><ol start="2"><li>拉链法</li></ol><p>数据⻓度定义好了，怎么存储更多内容呢，算好Hash值，在数组元素存储位置放了⼀个链表  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120093204024.png" alt="image-20211120093204024"></p><p>如果Hash算法设计的⽐较好的话，那么查询效率会更接近于O(1)，如果Hash算法设计的⽐较low，那么<br>查询效率就会很低了  </p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120093237536.png" alt="image-20211120093237536" style="zoom:50%;"><p>因此，Hahs表的查询效率高不高取决于Hash算法，Hash算法能够让数据平均分布，既能够节省空间，又能够提高查询效率。Hash算法的研究是一门很高深的学问，甚至很多数学见也在研究中。</p><p>HashCode就是通过一种hash算法得出的。</p><h1 id="二、一致性哈希算法"><a href="#二、一致性哈希算法" class="headerlink" title="二、一致性哈希算法"></a>二、一致性哈希算法</h1><h2 id="1、普通Hash算法的弊端"><a href="#1、普通Hash算法的弊端" class="headerlink" title="1、普通Hash算法的弊端"></a>1、普通Hash算法的弊端</h2><p>例如Nginx自带的负载均衡策略ip_hash来说，根据IP地址的局域网段通过hash算法，将访问同一网段的客户端请求转发到同一台实现负载均衡的服务器上，虽然这样会避免session一致性问题，但是当其中一台服务器宕机了，根据求模得到的hash值便要重新计算，重新得到的hash值会将之前部分客户端请求转发到其它服务器上，从而会丢失sesssion登录信息等。</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120094829847.png" alt="image-20211120094829847"></p><p>因为搭建了集群的服务器生产情况下，后台服务器很多，访问的客户端也有很多，所以一台宕机或者新增一台服务器影响会是很大的。缩容和扩容都会存在这样的问题，大量的用户请求会被转发到其它服务器上，保存在之前服务器中的会话信息便会丢失。</p><h2 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h2><h3 id="（一）Hash算法在分布式架构中的应用场景："><a href="#（一）Hash算法在分布式架构中的应用场景：" class="headerlink" title="（一）Hash算法在分布式架构中的应用场景："></a>（一）Hash算法在分布式架构中的应用场景：</h3><p>​        hash算法在分布式集群产品中都有应用，比如分布式集群架构Redis,Hadoop,ElasticSearch，Mysql分库分表， Nginx负载均衡等 </p><h3 id="（二）应用场景归纳"><a href="#（二）应用场景归纳" class="headerlink" title="（二）应用场景归纳"></a>（二）应用场景归纳</h3><ol><li>请求的负载均衡（比如Nginx的ip_hash）</li></ol><p>Nginx的ip_hash在上面已经描述过了，虽然有弊端，但是也是实现了在客户端IP地址不变的情况下，将其发出的请求始终路由到同一台服务器上，实现会话粘滞，避免处理session共享问题</p><p>如果没有ip_hash策略，怎么实现会话粘滞</p><p>​    可以维护⼀张映射表，存储客户端IP或者sessionid与具体⽬标服务器的映射关系  </p><p>​    &lt;ip,tomcat1&gt;<br>缺点</p><ol><li>那么，在客户端很多的情况下，映射表⾮常⼤，浪费内存空间</li><li>客户端上下线，⽬标服务器上下线，都会导致重新维护映射表，映射表维护成本很大</li></ol><p>如果使⽤哈希算法，事情就简单很多，我们可以对ip地址或者sessionid进⾏计算哈希值，哈希值与服务<br>器数量进⾏取模运算，得到的值就是当前请求应该被路由到的服务器编号，如此，同⼀个客户端ip发送<br>过来的请求就可以路由到同⼀个⽬标服务器，实现会话粘滞。 </p><ol start="2"><li>分布式存储</li></ol><p>以分布式内存数据库Redis为例,集群中有redis1， redis2， redis3 三台Redis服务器那么,在进⾏数据存储时,&lt;key1,value1&gt;数据存储到哪个服务器当中呢？针对key进⾏hash处理hash(key1)%3=index, 使⽤余数index锁定存储的具体服务器节点  </p><h3 id="（三）什么是一致性Hash算法"><a href="#（三）什么是一致性Hash算法" class="headerlink" title="（三）什么是一致性Hash算法"></a>（三）什么是一致性Hash算法</h3><p>一致性hash算法的思路：</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120101023499.png" alt="image-20211120101023499"></p><p>有这样一条直线，起始从0开始，结束为2的32次方-1，这也是Integer整数的取值范围，我们把它相当于地址，我们将这样一条线弯曲闭成一个环形，这样一个圆环我们就称之为<strong>hash环</strong>，我们把服务器的ip地址或者主机名求hash值然后对应到hash环上，那么针对客户端ip地址进行hash求值，对应到环上的某个位置，然后如何确定一个客户端的请求该由那一台服务器处理呢，即可按照hash环的顺时针方向，最近的服务器即处理来自hash环上的客户端请求</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120101639305.png" alt="image-20211120101639305"></p><p>这样的话，当hash环上的服务区3宕机下线，原来请求路由到3上的客户端会被转发到服务器4，而其它客户端请求则不会收到影响，使得请求的迁移达到了最小，对客户端的影响也降低了，这样的算法对于分布式来说是非常合适的</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120102036135.png" alt="image-20211120102036135"></p><p>增加服务器5之后，原来路由到3的部分客户端路由到新增服务器5上，对于其他客户端没有影响只是这⼀⼩部分受影响（请求的迁移达到了最⼩，这样的算法对分布式集群来说⾮常合适的，避免了⼤量请求迁移 ）  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120102153533.png" alt="image-20211120102153533"></p><ol><li>优势</li></ol><p>如前所述，每⼀台服务器负责⼀段，⼀致性哈希算法对于节点的增减都只需重定位环空间中的⼀⼩部分数据，具有较好的容错性和可扩展性。  </p><ol start="2"><li>弊端</li></ol><p>但是，⼀致性哈希算法在服务节点太少时，容易因为节点分部不均匀⽽造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，节点2只能负责⾮常⼩的⼀段，⼤量的客户端请求落在了节点1上，这就是数据（请求）倾斜问题  </p><h4 id="1、增加虚拟节点"><a href="#1、增加虚拟节点" class="headerlink" title="1、增加虚拟节点"></a>1、增加虚拟节点</h4><p>为了解决这种数据倾斜问题，⼀致性哈希算法引⼊了虚拟节点机制，即对每⼀个服务节点计算多个哈希，每个计算结果位置都放置⼀个此服务节点，称为虚拟节点  </p><p>具体做法可以在服务器ip或主机名的后⾯增加编号来实现。⽐如，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “节点1的ip#1”、 “节点1的ip#2”、 “节点1的ip#3”、 “节点2的ip#1”、 “节点2的ip#2”、 “节点2的ip#3”的哈希值，于是形成六个虚拟节点，当客户端被路由到虚拟节点的时候其实是被路由到该虚拟节点所对应的真实节点  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120102503565.png" alt="image-20211120102503565"></p><h2 id="3、手写实现简单hash算法和一致性hash算法"><a href="#3、手写实现简单hash算法和一致性hash算法" class="headerlink" title="3、手写实现简单hash算法和一致性hash算法"></a>3、手写实现简单hash算法和一致性hash算法</h2><h3 id="（一）普通hash算法实现"><a href="#（一）普通hash算法实现" class="headerlink" title="（一）普通hash算法实现"></a>（一）普通hash算法实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class GeneralHash &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1.定义客户端IP</span><br><span class="line">        String[] clients = new String[]&#123;&quot;192.168.0.1&quot;,&quot;192.168.0.2&quot;,&quot;192.168.0.3&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        //2.定义服务器数量</span><br><span class="line">        int serverCount = 5;</span><br><span class="line"></span><br><span class="line">        //使用hash(ip)%serverCount = index 根据index索引锁定应该路由到的tomcat服务器</span><br><span class="line">        for (String client:clients) &#123;</span><br><span class="line">            int client_hash = Math.abs(client.hashCode());</span><br><span class="line">            int index = client_hash%serverCount;</span><br><span class="line">            System.out.println(client+&quot;请求被转发到了服务器：&quot;+index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）一致性hash算法不带虚拟节点"><a href="#（二）一致性hash算法不带虚拟节点" class="headerlink" title="（二）一致性hash算法不带虚拟节点"></a>（二）一致性hash算法不带虚拟节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class ConsistentHashNoVirtual &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //step1 初始化：把服务器节点IP的哈希值对应到哈希环上</span><br><span class="line">        // 定义服务器ip</span><br><span class="line">        String[] tomcatServers = new String[]&#123;&quot;123.111.0.0&quot;,&quot;123.101.3.1&quot;,&quot;111.20.35.2&quot;,&quot;123.98.26.3&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        SortedMap&lt;Integer,String&gt; hashServerMap = new TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for(String tomcatServer: tomcatServers) &#123;</span><br><span class="line">            // 求出每一个ip的hash值，对应到hash环上，存储hash值与ip的对应关系</span><br><span class="line">            int serverHash = Math.abs(tomcatServer.hashCode());</span><br><span class="line">            // 存储hash值与ip的对应关系</span><br><span class="line">            hashServerMap.put(serverHash,tomcatServer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //step2 针对客户端IP求出hash值</span><br><span class="line">        // 定义客户端IP</span><br><span class="line">        String[] clients = new String[]&#123;&quot;10.78.12.3&quot;,&quot;113.25.63.1&quot;,&quot;126.12.3.8&quot;&#125;;</span><br><span class="line">        for(String client : clients) &#123;</span><br><span class="line">            int clientHash = Math.abs(client.hashCode());</span><br><span class="line">            //step3 针对客户端,找到能够处理当前客户端请求的服务器（哈希环上顺时针最近）</span><br><span class="line">            // 根据客户端ip的哈希值去找出哪一个服务器节点能够处理（）</span><br><span class="line">            SortedMap&lt;Integer, String&gt; integerStringSortedMap = hashServerMap.tailMap(clientHash);</span><br><span class="line">            if(integerStringSortedMap.isEmpty()) &#123;</span><br><span class="line">                // 取哈希环上的顺时针第一台服务器</span><br><span class="line">                Integer firstKey = hashServerMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                Integer firstKey = integerStringSortedMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三）一致性hash算法带虚拟节点"><a href="#（三）一致性hash算法带虚拟节点" class="headerlink" title="（三）一致性hash算法带虚拟节点"></a>（三）一致性hash算法带虚拟节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class ConsistentHashWithVirtual &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //step1 初始化：把服务器节点IP的哈希值对应到哈希环上</span><br><span class="line">        // 定义服务器ip</span><br><span class="line">        String[] tomcatServers = new String[]&#123;&quot;123.111.0.0&quot;,&quot;123.101.3.1&quot;,&quot;111.20.35.2&quot;,&quot;123.98.26.3&quot;&#125;;</span><br><span class="line">        SortedMap&lt;Integer,String&gt; hashServerMap = new TreeMap&lt;&gt;();</span><br><span class="line">        // 定义针对每个真实服务器虚拟出来几个节点</span><br><span class="line">        int virtaulCount = 3;</span><br><span class="line">        for(String tomcatServer: tomcatServers) &#123;</span><br><span class="line">            // 求出每一个ip的hash值，对应到hash环上，存储hash值与ip的对应关系</span><br><span class="line">            int serverHash = Math.abs(tomcatServer.hashCode());</span><br><span class="line">            // 存储hash值与ip的对应关系</span><br><span class="line">            hashServerMap.put(serverHash,tomcatServer);</span><br><span class="line"></span><br><span class="line">            // 处理虚拟节点</span><br><span class="line">            for(int i = 0; i &lt; virtaulCount; i++) &#123;</span><br><span class="line">                int virtualHash = Math.abs((tomcatServer + &quot;#&quot; + i).hashCode());</span><br><span class="line">                hashServerMap.put(virtualHash,&quot;----由虚拟节点&quot;+ i  + &quot;映射过来的请求：&quot;+ tomcatServer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //step2 针对客户端IP求出hash值</span><br><span class="line">        // 定义客户端IP</span><br><span class="line">        String[] clients = new String[]&#123;&quot;10.78.12.3&quot;,&quot;113.25.63.1&quot;,&quot;126.12.3.8&quot;&#125;;</span><br><span class="line">        for(String client : clients) &#123;</span><br><span class="line">            int clientHash = Math.abs(client.hashCode());</span><br><span class="line">            //step3 针对客户端,找到能够处理当前客户端请求的服务器（哈希环上顺时针最近）</span><br><span class="line">            // 根据客户端ip的哈希值去找出哪一个服务器节点能够处理（）</span><br><span class="line">            SortedMap&lt;Integer, String&gt; integerStringSortedMap = hashServerMap.tailMap(clientHash);</span><br><span class="line">            if(integerStringSortedMap.isEmpty()) &#123;</span><br><span class="line">                // 取哈希环上的顺时针第一台服务器</span><br><span class="line">                Integer firstKey = hashServerMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                Integer firstKey = integerStringSortedMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Nginx负载均衡策略应用一致性哈希算法"><a href="#三、Nginx负载均衡策略应用一致性哈希算法" class="headerlink" title="三、Nginx负载均衡策略应用一致性哈希算法"></a>三、Nginx负载均衡策略应用一致性哈希算法</h1><p>ngx_http_upstream_consistent_hash 模块是⼀个负载均衡器，使⽤⼀个内部⼀致性hash算法来选择合适的后端节点。</p><p>该模块可以根据配置参数采取不同的⽅式将请求均匀映射到后端机器，</p><ol><li>consistent_hash $remote_addr：可以根据客户端ip映射</li><li>consistent_hash $request_uri：根据客户端请求的uri映射</li><li>consistent_hash $args：根据客户端携带的参数进⾏映</li></ol><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p>ngx_http_upstream_consistent_hash 模块是⼀个第三⽅模块，需要我们下载安装后使⽤  </p><p>github下载nginx⼀致性hash负载均衡模块 <a href="https://github.com/replay/ngx_http_consistent_hash">https://github.com/replay/ngx_http_consistent_hash</a>  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120110523081.png" alt="image-20211120110523081"></p><h2 id="2、将下载的压缩包上传到nginx服务器，并解压"><a href="#2、将下载的压缩包上传到nginx服务器，并解压" class="headerlink" title="2、将下载的压缩包上传到nginx服务器，并解压"></a>2、将下载的压缩包上传到nginx服务器，并解压</h2><h2 id="3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令"><a href="#3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令" class="headerlink" title="3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令"></a>3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure —add-module=/root/ngx_http_consistent_hash-master</span><br><span class="line">make</span><br><span class="line">make install  </span><br></pre></td></tr></table></figure><h2 id="4）-Nginx就可以使⽤啦，在nginx-conf⽂件中配置"><a href="#4）-Nginx就可以使⽤啦，在nginx-conf⽂件中配置" class="headerlink" title="4） Nginx就可以使⽤啦，在nginx.conf⽂件中配置"></a>4） Nginx就可以使⽤啦，在nginx.conf⽂件中配置</h2><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120110556554.png" alt="image-20211120110556554"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;博文介绍了普通hash算法、一致性hash算法、一致性hash算法在Nginx负载均衡策略中的应用，文章主要来源拉钩高薪训练营相关内容+自己的理解，条理清晰，能够帮助理解hash算法到底在查询和存储过程或者是负载均衡中到底起了什么样的作用，为什么会有那么高的效率?有兴趣的小伙伴可以了解下&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>服务器软件分类</title>
    <link href="http://example.com/2021/11/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
    <id>http://example.com/2021/11/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E7%B1%BB/</id>
    <published>2021-11-17T06:07:16.000Z</published>
    <updated>2021-11-18T10:28:02.190Z</updated>
    
    <content type="html"><![CDATA[<p>b博文主要对服务器进行分类，以及一些常用的服务器软件分类，能够帮助理解系统的部署方式等~</p><span id="more"></span><h1 id="一、相关概念"><a href="#一、相关概念" class="headerlink" title="一、相关概念"></a>一、相关概念</h1><h2 id="1、静态和动态服务"><a href="#1、静态和动态服务" class="headerlink" title="1、静态和动态服务"></a>1、静态和动态服务</h2><h3 id="静态服务"><a href="#静态服务" class="headerlink" title="静态服务"></a>静态服务</h3><p>主要是提供静态资源、不同的用户访问服务得到的资源是一摸一样的</p><h3 id="动态服务"><a href="#动态服务" class="headerlink" title="动态服务"></a>动态服务</h3><p>提供动态服务，不同用户访问得到的资源是不同的，例如后台系统，根据每个用户身份不同，返回的结果权限都是不同的</p><h2 id="2、服务器分类"><a href="#2、服务器分类" class="headerlink" title="2、服务器分类"></a>2、服务器分类</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>广义上来说，就是响应用户的需求，提供服务，当下所有的服务器软件都可以称之为web服务器软件，现在的web服务器应用层通讯协议主要是http协议，web服务器和http服务器几乎对等</p><h3 id="HTTP服务器（静态服务）"><a href="#HTTP服务器（静态服务）" class="headerlink" title="HTTP服务器（静态服务）"></a>HTTP服务器（静态服务）</h3><p>使用http协议将服务器上的资源传给客户端，侧重于静态资源的支持，可将其视为静态服务器</p><h3 id="应用服务器（动态服务）"><a href="#应用服务器（动态服务）" class="headerlink" title="应用服务器（动态服务）"></a>应用服务器（动态服务）</h3><p>一个特定应用的承载容器，运行时需要特定环境的支持，例如tomcat运行时需要java的支持，也可以称作动态服务器、动态容器等。应用服务器可以降维，当静态服务器使用，但一般不会这么用</p><h2 id="3、一些常见的服务器软件"><a href="#3、一些常见的服务器软件" class="headerlink" title="3、一些常见的服务器软件"></a>3、一些常见的服务器软件</h2><h3 id="1-Http静态服务器软件"><a href="#1-Http静态服务器软件" class="headerlink" title="1.Http静态服务器软件"></a>1.Http静态服务器软件</h3><h4 id="（一）Nginx"><a href="#（一）Nginx" class="headerlink" title="（一）Nginx"></a>（一）Nginx</h4><p>典型的静态服务器，可以做反向代理，负载均衡，一般放在最前面直面客户，和动态应用服务器例如tomcat打配合；纯C语言编写，性能贼高，内存消耗极少，稳定性也相当好，互联网公司重度使用。Nginx服务器也可以在诸如Lua脚本等辅助下做二次开发，变成一个可以提供动态服务的应用服务器，也就是大名鼎鼎的OpenRestyTengineApcheHttp Service</p><h4 id="（二）Tengine"><a href="#（二）Tengine" class="headerlink" title="（二）Tengine"></a>（二）Tengine</h4><p>阿里出品，基于Nginx服务器做的改造（加强和封装），对大流量场景做了很多高级功能，性能、稳定性优秀</p><h4 id="（三）Apache-Http-Server"><a href="#（三）Apache-Http-Server" class="headerlink" title="（三）Apache Http Server"></a>（三）Apache Http Server</h4><p>也是静态服务器，但是不如Nginx服务器</p><h4 id="（四）IIS"><a href="#（四）IIS" class="headerlink" title="（四）IIS"></a>（四）IIS</h4><p>微软开发，只能用在Windows下，是具备一定应用服务器能力的http服务器</p><h3 id="2-动态应用服务器"><a href="#2-动态应用服务器" class="headerlink" title="2.动态应用服务器"></a>2.动态应用服务器</h3><h4 id="一、轻量级动态应用服务器"><a href="#一、轻量级动态应用服务器" class="headerlink" title="一、轻量级动态应用服务器"></a>一、轻量级动态应用服务器</h4><h5 id="（一）Tomcat"><a href="#（一）Tomcat" class="headerlink" title="（一）Tomcat"></a>（一）Tomcat</h5><p>Apach出品，典型的应用服务器软件，符合Servlet标准的应用容器，也可以提供http服务，一般不会作为Http服务器去用，SpringBoot框架默认的内置服务器</p><h5 id="（二）Jetty"><a href="#（二）Jetty" class="headerlink" title="（二）Jetty"></a>（二）Jetty</h5><p>跟Tomcat是一个性质的东西，符合Servlet标准的应用容器，更加轻量</p><h5 id="（三）Undertow"><a href="#（三）Undertow" class="headerlink" title="（三）Undertow"></a>（三）Undertow</h5><p>红帽子出品，更tomcat、jetty一样也是SpringBoot框架支持的服务器，高并发时性能要优于Tomcat、Jetty</p><h4 id="二、商用的重量级服务器软件"><a href="#二、商用的重量级服务器软件" class="headerlink" title="二、商用的重量级服务器软件"></a>二、商用的重量级服务器软件</h4><h5 id="（一）JBoss"><a href="#（一）JBoss" class="headerlink" title="（一）JBoss"></a>（一）JBoss</h5><p>(从8版开始更名未WildFly):不仅仅是Servlet应用容器，更是EJB时的应用容器，整套JavaEE框架部署的解决方案</p><h5 id="（二）WebLogic"><a href="#（二）WebLogic" class="headerlink" title="（二）WebLogic"></a>（二）WebLogic</h5><p>Oracle公司出品，用于部署企业级JavaEE应用，全能型，几乎支持JavaEE所有应用规范</p><h5 id="（三）WebSphere"><a href="#（三）WebSphere" class="headerlink" title="（三）WebSphere"></a>（三）WebSphere</h5><p>IBM公司出品，支持更多JavaEE的应用规范的综合应用服务器</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;b博文主要对服务器进行分类，以及一些常用的服务器软件分类，能够帮助理解系统的部署方式等~&lt;/p&gt;</summary>
    
    
    
    <category term="服务器" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="软件" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="http://example.com/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-17T05:52:21.000Z</published>
    <updated>2022-05-05T06:49:01.899Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博文比较清晰的介绍了Nginx的相关概念和应用，主要包括动静分离、反向代理、负载均衡等相关功能实现</p><span id="more"></span><p><a href="https://blog.csdn.net/qq_32867467/article/details/88965755">Nginx常用用法</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx 启动</span><br><span class="line">./nginx -s stop 停止</span><br><span class="line">./nginx -s quit 安全退出</span><br><span class="line">./nginx -s reload 重新加载配置文件</span><br><span class="line">ps aux|grep nginx 查看nginx进程</span><br><span class="line"></span><br><span class="line">进入sbin目录，输入 ./nginx -t     校验ngxinx配置文件是否正确，同同时可以查看配置文件所在路径</span><br></pre></td></tr></table></figure><h1 id="一、Nginx基础概念理解"><a href="#一、Nginx基础概念理解" class="headerlink" title="一、Nginx基础概念理解"></a>一、Nginx基础概念理解</h1><h2 id="1、Nginx是什么"><a href="#1、Nginx是什么" class="headerlink" title="1、Nginx是什么"></a>1、Nginx是什么</h2><p>Nginx是一个高性能的HTTP和反向代理Web服务器，核心特点是占用内存少，并发能力强</p><h2 id="2、Nginx能做什么"><a href="#2、Nginx能做什么" class="headerlink" title="2、Nginx能做什么"></a>2、Nginx能做什么</h2><h3 id="（一）HTTP服务器（Web服务器）"><a href="#（一）HTTP服务器（Web服务器）" class="headerlink" title="（一）HTTP服务器（Web服务器）"></a>（一）HTTP服务器（Web服务器）</h3><p>关于服务器的分类可以参考文章</p><p>Nginx做Web服务器性能非常高，非常注重效率，能够经受高负载的考研</p><p>⽀持50000个并发连接数，不仅如此， CPU和内存的占⽤也⾮常的低， 10000个没有活动的连<br>接才占⽤2.5M的内存。  </p><h3 id="（二）反向代理服务器"><a href="#（二）反向代理服务器" class="headerlink" title="（二）反向代理服务器"></a>（二）反向代理服务器</h3><h4 id="1、正向代理"><a href="#1、正向代理" class="headerlink" title="1、正向代理"></a>1、正向代理</h4><p>​        在浏览器中配置代理服务器的相关信息，通过代理服务器访问⽬标⽹站，代理服务器收<br>到⽬标⽹站的响应之后，会把响应信息返回给我们⾃⼰的浏览器客户端  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211117143711172.png" alt="image-20211117143711172"></p><h4 id="2、反向代理"><a href="#2、反向代理" class="headerlink" title="2、反向代理"></a>2、反向代理</h4><p>​    浏览器客户端发送请求到反向代理服务器（⽐如Nginx），由反向代理服务器选择原始<br>服务器提供服务获取结果响应，最终再返回给客户端浏览器  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211117144945239.png" alt="image-20211117144945239"></p><h4 id="3、正向代理和反向代理的区别"><a href="#3、正向代理和反向代理的区别" class="headerlink" title="3、正向代理和反向代理的区别"></a>3、正向代理和反向代理的区别</h4><blockquote><p>维基百科：正向代理是客户端和其他所有服务器（重点：所有）的代理者，而反向代理是客户端和<strong>所要</strong>代理的服务器之间的代理</p></blockquote><p>解释一下：</p><p>当我们要访问google，需要一台代理服务器，只要能够连接到这台服务器的软件，就可以通过这台代理服务器器访问其他的服务器（例如goole,facebook等），这里的服务器只对客户端负责，所以称之为正向代理。</p><p>如果我们有3台服务器交由代理服务器进行反向代理，只有当客户端访问这3台服务器的时候，代理服务器才给客户端代理，也就是说代理服务器只对所代理的服务器负责，所以称之为反向代理。</p><p>总结：<strong>正向代理对客户端负责，反向代理对代理的服务器负责，一正一反。</strong></p><h3 id="（三）负载均衡服务器"><a href="#（三）负载均衡服务器" class="headerlink" title="（三）负载均衡服务器"></a>（三）负载均衡服务器</h3><p>负载均衡，当⼀个请求到来的时候（结合上图）， Nginx反向代理服务器根据请求去找到⼀个<br>原始服务器来处理当前请求，那么这叫做反向代理。那么，如果⽬标服务器有多台（⽐如上<br>图中的tomcat1， tomcat2， tomcat3…），找哪⼀个⽬标服务器来处理当前请求呢，这样⼀<br>个寻找确定的过程就叫做负载均衡。<br>⽣活中也有很多这样的例⼦，⽐如，我们去银⾏，可以处理业务的窗⼝有多个，那么我们会<br>被分配到哪个窗⼝呢到底，这样的⼀个过程就叫做负载均衡。  </p><p>负载均衡就是为了解决⾼负载的问题。  </p><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211117145049890.png" alt="image-20211117145049890"></p><h2 id="3、Nginx的特点"><a href="#3、Nginx的特点" class="headerlink" title="3、Nginx的特点"></a>3、Nginx的特点</h2><h3 id="（一）跨平台"><a href="#（一）跨平台" class="headerlink" title="（一）跨平台"></a>（一）跨平台</h3><p>Nginx可以在⼤多数类unix操作系统上编译运⾏，⽽且也有windows版本  </p><h3 id="（二）操作简单"><a href="#（二）操作简单" class="headerlink" title="（二）操作简单"></a>（二）操作简单</h3><p>Nginx的上⼿⾮常容易，配置也⽐较简单  </p><h3 id="（三）性能强"><a href="#（三）性能强" class="headerlink" title="（三）性能强"></a>（三）性能强</h3><p>⾼并发，性能好 ，稳定性也特别好，宕机概率很低  </p><h1 id="二、Nginx操作"><a href="#二、Nginx操作" class="headerlink" title="二、Nginx操作"></a>二、Nginx操作</h1><h2 id="1、Nginx的安装"><a href="#1、Nginx的安装" class="headerlink" title="1、Nginx的安装"></a>1、Nginx的安装</h2><h3 id="（一）下载"><a href="#（一）下载" class="headerlink" title="（一）下载"></a>（一）下载</h3><p>上传nginx安装包到linux服务器， nginx安装包(.tar⽂件)下载地址：  <a href="http://nginx.org/">http://nginx.org</a>  </p><h3 id="（二）安装依赖"><a href="#（二）安装依赖" class="headerlink" title="（二）安装依赖"></a>（二）安装依赖</h3><p>安装Nginx依赖， pcre、 openssl、 gcc、 zlib（推荐使⽤yum源⾃动安装）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="（三）解压安装"><a href="#（三）解压安装" class="headerlink" title="（三）解压安装"></a>（三）解压安装</h3><p>解压Nginx软件包  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.17.8.tar</span><br></pre></td></tr></table></figure><p>进⼊解压之后的⽬录 nginx-1.17.8 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.17.8</span><br></pre></td></tr></table></figure><p> 命令⾏执⾏./configure<br>命令⾏执⾏ make<br>命令⾏执⾏ make install，完毕之后在/usr/local/下会产⽣⼀个nginx⽬录  </p><p>进⼊sbin⽬录中，执⾏启动nginx命令  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">cd nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100118368.png" alt="image-20211118100118368"></p><p>然后访问服务器的80端⼝（nginx默认监听80端⼝）  </p><h3 id="（四）Nginx的主要命令"><a href="#（四）Nginx的主要命令" class="headerlink" title="（四）Nginx的主要命令"></a>（四）Nginx的主要命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nginx 启动nginx</span><br><span class="line">./nginx -s stop 终⽌nginx（当然也可以找到nginx进程号，然后使⽤kill -9 杀掉nginx进程）</span><br><span class="line">./nginx -s reload (重新加载nginx.conf配置⽂件)</span><br></pre></td></tr></table></figure><h1 id="三、核心配置文件解读"><a href="#三、核心配置文件解读" class="headerlink" title="三、核心配置文件解读"></a>三、核心配置文件解读</h1><p>Nginx的核⼼配置⽂件conf/nginx.conf包含三块内容：全局块、 events块、 http块  </p><h2 id="1、全局块"><a href="#1、全局块" class="headerlink" title="1、全局块"></a>1、全局块</h2><p>从配置⽂件开始到events块之间的内容，此处的配置影响nginx服务器整体的运⾏，⽐如worker进<br>程的数量、错误⽇志的位置等  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100354343.png" alt="image-20211118100354343"></p><h2 id="2、events块"><a href="#2、events块" class="headerlink" title="2、events块"></a>2、events块</h2><p>events块主要影响nginx服务器与⽤户的⽹络连接，⽐如worker_connections 1024，标识每个<br>workderprocess⽀持的最⼤连接数为1024  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100415321.png" alt="image-20211118100415321"></p><h2 id="3、http块"><a href="#3、http块" class="headerlink" title="3、http块"></a>3、http块</h2><p>http块是配置最频繁的部分，虚拟主机的配置，监听端⼝的配置，请求转发、反向代理、负载均衡<br>等  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100438064.png" alt="image-20211118100438064"></p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100459886.png" alt="image-20211118100459886"></p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100520447.png" alt="image-20211118100520447"></p><h1 id="四、Nginx应用场景之反向代理"><a href="#四、Nginx应用场景之反向代理" class="headerlink" title="四、Nginx应用场景之反向代理"></a>四、Nginx应用场景之反向代理</h1><h2 id="1、需求一"><a href="#1、需求一" class="headerlink" title="1、需求一"></a>1、需求一</h2><h3 id="（一）需求描述"><a href="#（一）需求描述" class="headerlink" title="（一）需求描述"></a>（一）需求描述</h3><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105028881.png" alt="image-20211118105028881"></p><h3 id="（二）需求实现"><a href="#（二）需求实现" class="headerlink" title="（二）需求实现"></a>（二）需求实现</h3><ol><li><p>部署tomcat，保持默认监听8080端⼝  </p></li><li><p>修改nginx配置，并重新加载  </p></li><li><p>修改nginx配置  </p></li></ol><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105211960.png" alt="image-20211118105211960"></p><ol start="4"><li>重新加载nginx配置  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><ol start="5"><li>测试，访问<a href="http://111.229.248.243:9003,返回tomcat的⻚⾯">http://111.229.248.243:9003,返回tomcat的⻚⾯</a>  </li></ol><h2 id="2、需求二"><a href="#2、需求二" class="headerlink" title="2、需求二"></a>2、需求二</h2><h3 id="（一）需求描述-1"><a href="#（一）需求描述-1" class="headerlink" title="（一）需求描述"></a>（一）需求描述</h3><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105355992.png" alt="image-20211118105355992"></p><h3 id="（二）需求实现-1"><a href="#（二）需求实现-1" class="headerlink" title="（二）需求实现"></a>（二）需求实现</h3><ol><li>再部署⼀台tomcat，保持默认监听8081端⼝  </li><li>修改nginx配置，并重新加载  </li></ol><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105737970.png" alt="image-20211118105737970"></p><ol><li><p><strong>这⾥主要就是多location的使⽤，这⾥的nginx中server/location就好⽐tomcat中的 Host/Context</strong>  </p></li><li><p>location 语法如下：  </p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123; … &#125;</span><br></pre></td></tr></table></figure><p>在nginx配置⽂件中， location主要有这⼏种形式：  </p><ol><li>正则匹配 location ~ /lagou { }</li><li>不区分⼤⼩写的正则匹配 location ~* /lagou { }</li><li>匹配路径的前缀 location ^~ /lagou { }</li><li>精确匹配 location = /lagou { }</li><li>普通路径前缀匹配 location /lagou { }</li><li>优先级<br>4 &gt; 3 &gt; 2 &gt; 1 &gt; 5  </li></ol><h1 id="五、Nginx应用场景之负载均衡"><a href="#五、Nginx应用场景之负载均衡" class="headerlink" title="五、Nginx应用场景之负载均衡"></a>五、Nginx应用场景之负载均衡</h1><h2 id="1、需求描述"><a href="#1、需求描述" class="headerlink" title="1、需求描述"></a>1、需求描述</h2><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105825319.png" alt="image-20211118105825319"></p><h2 id="2、Nginx负载均衡策略"><a href="#2、Nginx负载均衡策略" class="headerlink" title="2、Nginx负载均衡策略"></a>2、Nginx负载均衡策略</h2><h3 id="（一）轮询"><a href="#（一）轮询" class="headerlink" title="（一）轮询"></a>（一）轮询</h3><p>默认策略，每个请求按时间顺序逐⼀分配到不同的服务器，如果某⼀个服务器下线，能⾃动剔除  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream lagouServer&#123;</span><br><span class="line">server 111.229.248.243:8080;</span><br><span class="line">server 111.229.248.243:8082;</span><br><span class="line">&#125;</span><br><span class="line">location /abc &#123;</span><br><span class="line">proxy_pass http://lagouServer/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）weight-权重"><a href="#（二）weight-权重" class="headerlink" title="（二）weight 权重"></a>（二）weight 权重</h3><p>weight代表权重，默认每⼀个负载的服务器都为1，权重越⾼那么被分配的请求越多（⽤于服务器<br>性能不均衡的场景）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream lagouServer&#123;</span><br><span class="line">server 111.229.248.243:8080 weight=1;</span><br><span class="line">server 111.229.248.243:8082 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三）ip-hash"><a href="#（三）ip-hash" class="headerlink" title="（三）ip_hash"></a>（三）ip_hash</h3><p>每个请求按照ip的hash结果分配，每⼀个客户端的请求会固定分配到同⼀个⽬标服务器处理，可<br>以解决session问题  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream lagouServer&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">    server 111.229.248.243:8080;</span><br><span class="line">server 111.229.248.243:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、Nginx应⽤场景之动静分离"><a href="#六、Nginx应⽤场景之动静分离" class="headerlink" title="六、Nginx应⽤场景之动静分离"></a>六、Nginx应⽤场景之动静分离</h1><h2 id="1、思想"><a href="#1、思想" class="headerlink" title="1、思想"></a>1、思想</h2><p>动静分离就是讲动态资源和静态资源的请求处理分配到不同的服务器上，⽐较经典的组合就是<br>Nginx+Tomcat架构（Nginx处理静态资源请求， Tomcat处理动态资源请求），</p><p>那么其实之前的讲解中， Nginx反向代理⽬标服务器Tomcat，我们能看到⽬标服务器ROOT项⽬的index.jsp，这本身就是Tomcat在处理动态资源请求了。  </p><p>所以，我们只需要配置静态资源访问即可。  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110231915.png" alt="image-20211118110231915"></p><h2 id="2、Nginx配置"><a href="#2、Nginx配置" class="headerlink" title="2、Nginx配置"></a>2、Nginx配置</h2><p>注意：statticDeata 根目录指的是nginx服务器的目录，和nginx同层级，而不是linux服务器的目录，否则会报404</p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110300079.png" alt="image-20211118110300079"></p><h1 id="七、Nginx底层进程机制剖析"><a href="#七、Nginx底层进程机制剖析" class="headerlink" title="七、Nginx底层进程机制剖析"></a>七、Nginx底层进程机制剖析</h1><p>Nginx启动后，以daemon多进程⽅式在后台运⾏，包括⼀个Master进程和多个Worker进程， Master<br>进程是领导，是⽼⼤， Worker进程是⼲活的⼩弟。  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110348867.png" alt="image-20211118110348867"></p><h2 id="1、Master进程"><a href="#1、Master进程" class="headerlink" title="1、Master进程"></a>1、Master进程</h2><p>主要是管理worker进程，⽐如：  </p><ol><li>接收外界信号向各worker进程发送信号(./nginx -s reload)  </li><li>监控worker进程的运⾏状态，当worker进程异常退出后Master进程会⾃动重新启动新的<br>worker进程等  </li></ol><h2 id="2、Worker进程"><a href="#2、Worker进程" class="headerlink" title="2、Worker进程"></a>2、Worker进程</h2><p>worker进程具体处理⽹络请求。多个worker进程之间是对等的，他们同等竞争来⾃客户端的请<br>求， <strong>各进程互相之间是独⽴的</strong>。⼀个请求，只可能在⼀个worker进程中处理，⼀个worker进程，<br>不可能处理其它进程的请求。 worker进程的个数是可以设置的，⼀般设置与机器cpu核数⼀致。  </p><h2 id="3、Nginx进程模型示意图如下"><a href="#3、Nginx进程模型示意图如下" class="headerlink" title="3、Nginx进程模型示意图如下"></a>3、Nginx进程模型示意图如下</h2><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110524659.png" alt="image-20211118110524659"></p><h4 id="一、以-nginx-s-reload-来说明nginx信号处理这部分-："><a href="#一、以-nginx-s-reload-来说明nginx信号处理这部分-：" class="headerlink" title="一、以 ./nginx -s reload 来说明nginx信号处理这部分  ："></a>一、以 ./nginx -s reload 来说明nginx信号处理这部分  ：</h4><ol><li>以 ./nginx -s reload 来说明nginx信号处理这部分  </li><li>尝试配置（⽐如修改了监听端⼝，那就尝试分配新的监听端⼝）  </li><li>尝试成功则使⽤新的配置，新建worker进程  </li><li>新建成功，给旧的worker进程发送关闭消息  </li><li>旧的worker进程收到信号会继续服务，直到把当前进程接收到的请求处理完毕后关闭<br>所以reload之后worker进程pid是发⽣了变化的  </li></ol><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110627187.png" alt="image-20211118110627187"></p><h4 id="二、worker进程处理请求部分的说明"><a href="#二、worker进程处理请求部分的说明" class="headerlink" title="二、worker进程处理请求部分的说明"></a>二、worker进程处理请求部分的说明</h4><p>例如，我们监听9003端⼝，⼀个请求到来时，如果有多个worker进程，那么每个worker进程都有<br>可能处理这个链接。  </p><ol><li>master进程创建之后，会建⽴好需要监听的的socket，然后从master进程再fork出多个<br>worker进程。所以，所有worker进程的监听描述符listenfd在新连接到来时都变得可读。  </li><li>nginx使⽤互斥锁来保证只有⼀个workder进程能够处理请求，拿到互斥锁的那个进程注册<br>listenfd读事件，在读事件⾥调⽤accept接受该连接，然后解析、处理、返回客户端  </li></ol><h4 id="三、nginx多进程模型好处"><a href="#三、nginx多进程模型好处" class="headerlink" title="三、nginx多进程模型好处"></a>三、nginx多进程模型好处</h4><ol><li>每个worker进程都是独⽴的，不需要加锁，节省开销  </li><li>每个worker进程都是独⽴的，互不影响，⼀个异常结束，其他的照样能提供服务  </li><li>多进程模型为reload热部署机制提供了⽀撑  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇博文比较清晰的介绍了Nginx的相关概念和应用，主要包括动静分离、反向代理、负载均衡等相关功能实现&lt;/p&gt;</summary>
    
    
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
</feed>
