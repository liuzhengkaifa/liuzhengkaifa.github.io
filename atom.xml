<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序小牛</title>
  
  <subtitle>来了就随便看看，虽然没有什么好看的~~</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-16T02:19:35.063Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>coder-Man</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工具方法集合</title>
    <link href="http://example.com/2021/12/16/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2021/12/16/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/</id>
    <published>2021-12-16T02:15:51.000Z</published>
    <updated>2021-12-16T02:19:35.063Z</updated>
    
    <content type="html"><![CDATA[<p>项目上总会遇到一些通用的方法，每次使用去找不免会花费不必要的时间，这篇博客旨在不断积累有用的工具方法</p><span id="more"></span><h1 id="一、时间处理"><a href="#一、时间处理" class="headerlink" title="一、时间处理"></a>一、时间处理</h1><h2 id="1、常规使用"><a href="#1、常规使用" class="headerlink" title="1、常规使用"></a>1、常规使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDateUtilMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//localDateTime 方法</span></span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前时刻 = &quot;</span> + now);<span class="comment">//当前时刻 = 2021-12-16T10:09:30.898</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前年份 = &quot;</span> + now.getYear());<span class="comment">//当前年份 = 2021</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前月份值 = &quot;</span> + now.getMonthValue());<span class="comment">//当前月份值 = 12</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getMonth() = &quot;</span> + now.getMonth());<span class="comment">//now.getMonth() = DECEMBER</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getDayOfMonth() = &quot;</span> + now.getDayOfMonth());<span class="comment">//now.getDayOfMonth() = 16</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getDayOfWeek() = &quot;</span> + now.getDayOfWeek());<span class="comment">//now.getDayOfWeek() = THURSDAY</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getChronology() = &quot;</span> + now.getChronology());<span class="comment">//now.getChronology() = ISO</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getHour() = &quot;</span> + now.getHour());<span class="comment">//now.getHour() = 10</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getSecond() = &quot;</span> + now.getSecond());<span class="comment">//now.getSecond() = 30</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getNano() = &quot;</span> + now.getNano());<span class="comment">//now.getNano() = 898000000</span></span><br><span class="line">    System.out.println(<span class="string">&quot;now.getMinute() = &quot;</span> + now.getMinute());<span class="comment">//now.getMinute() = 9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//format  DateTimeFormatter 时间格式化</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.ISO_DATE));<span class="comment">//2021-12-16</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));<span class="comment">//20211216</span></span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd&quot;</span>)));<span class="comment">//2021/12/16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析时间字符串</span></span><br><span class="line">    LocalDateTime parseDate = LocalDateTime.parse(<span class="string">&quot;2002--01--02 11:21&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy--MM--dd HH:mm&quot;</span>));</span><br><span class="line">    System.out.println(parseDate.format(DateTimeFormatter.BASIC_ISO_DATE));<span class="comment">//20020102</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、JSON转换"><a href="#二、JSON转换" class="headerlink" title="二、JSON转换"></a>二、JSON转换</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目上总会遇到一些通用的方法，每次使用去找不免会花费不必要的时间，这篇博客旨在不断积累有用的工具方法&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>enum定义枚举类使用</title>
    <link href="http://example.com/2021/12/15/enum%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/12/15/enum%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-15T15:57:54.000Z</published>
    <updated>2021-12-22T03:25:11.897Z</updated>
    
    <content type="html"><![CDATA[<p> 以往的项目中总会定义一些常量提供使用，当类别较多时并不好理解和维护，jdk5后支持enum使用枚举类，能够更简洁，约束性更强。下面简单介绍下enum枚举类的使用。</p><span id="more"></span><h1 id="一、使用enum定义枚举类的说明"><a href="#一、使用enum定义枚举类的说明" class="headerlink" title="一、使用enum定义枚举类的说明"></a>一、使用enum定义枚举类的说明</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SeasonEnum</span> </span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春风又绿江南岸&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;映日荷花别样红&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋水共长天一色&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;窗含西岭千秋雪&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SeasonEnum</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用enum定义的枚举类默认继承了java.lang.Enum类，因此<strong>不能够继承其他类</strong>，但可以实现接口</li><li>枚举类的构造器只能使用<strong>private</strong>权限修饰符，即不能通过外部生成枚举类对象</li><li>枚举类的所<strong>有实例必须在第一行声明，显式列出（,分割；结尾），列出的实例系统会自动添加public static final修饰</strong></li><li>jdk1.5中可以在switch表达式中使用Enum定义枚举类的对象作为表达式</li></ol><h1 id="二、enum类的主要方法"><a href="#二、enum类的主要方法" class="headerlink" title="二、enum类的主要方法"></a>二、enum类的主要方法</h1><h2 id="1、values"><a href="#1、values" class="headerlink" title="1、values()"></a>1、values()</h2><p>用于返回枚举实例的对象数组，可以方便遍历当前枚举类的所有枚举值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnumValuesMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SeasonEnum[] seasonEnums = SeasonEnum.values();</span><br><span class="line">    <span class="keyword">for</span>(SeasonEnum seasonEnum:seasonEnums)&#123;</span><br><span class="line">    System.out.println(seasonEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211216001619105.png" alt="image-20211216001619105"></p><h2 id="2、ordinal"><a href="#2、ordinal" class="headerlink" title="2、ordinal()"></a>2、ordinal()</h2><p>返回枚举实例的序数，从0开始</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211216002126994.png" alt="image-20211216002126994"></p><h2 id="3、name"><a href="#3、name" class="headerlink" title="3、name()"></a>3、name()</h2><p>用于返回枚举类型实例名称</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211216002352584.png" alt="image-20211216002352584"></p><h2 id="4、values-of"><a href="#4、values-of" class="headerlink" title="4、values of()"></a>4、values of()</h2><p>用于返回指定名称的枚举实例</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211216002824596.png" alt="image-20211216002824596"></p><h2 id="5、switch"><a href="#5、switch" class="headerlink" title="5、switch"></a>5、switch</h2><p>用于switch-case语句中</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211216003038841.png" alt="image-20211216003038841"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 以往的项目中总会定义一些常量提供使用，当类别较多时并不好理解和维护，jdk5后支持enum使用枚举类，能够更简洁，约束性更强。下面简单介绍下enum枚举类的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>kafka学习</title>
    <link href="http://example.com/2021/12/15/kafka%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/15/kafka%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-15T06:40:55.000Z</published>
    <updated>2021-12-15T16:39:35.425Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--查看消费组group</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --list</span><br><span class="line"></span><br><span class="line">--查看偏移量情况</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --describe --group test-consumer-group</span><br><span class="line"></span><br><span class="line">--偏移量向前偏移10个</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --topic error_log_collect_topic:0,1 --shift-by -10 --execute</span><br><span class="line"></span><br><span class="line">--将偏移量设置为最早的</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --to-earliest --topic error_log_collect_topic --execute</span><br><span class="line"></span><br><span class="line">--将偏移量设置为最新的</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 47.97.25.49:9092 --reset-offsets --group test-consumer-group --to-latest --topic error_log_collect_topic --execute</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL索引学习</title>
    <link href="http://example.com/2021/12/02/MySQL%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/02/MySQL%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-02T13:43:17.000Z</published>
    <updated>2021-12-07T03:10:04.022Z</updated>
    
    <content type="html"><![CDATA[<p>s索引的学习对于数据库优化有着至关重要的作用，深入理解索引机制，才能更好的优化查询机制</p><span id="more"></span><h1 id="一、索引分类"><a href="#一、索引分类" class="headerlink" title="一、索引分类"></a>一、索引分类</h1><p>索引的使用会影响where条件查询以及order by排序，MySQL索引类型如下</p><ul><li>从存储结构划分：可分为B Tree索引、Hash索引、FuLLTEXT全文索引、R Tree索引</li><li>从应用层次划分：可分为主键索引、普通索引、唯一索引、复合索引、全文索引</li><li>从索引键类型划分：可分为主键索引、辅助索引</li><li>从数据存储和键类型划分：可分为聚簇索引（聚集索引）、非聚簇索引</li></ul><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211206163837167.png" alt="image-20211206163837167"></p><h2 id="1、普通索引"><a href="#1、普通索引" class="headerlink" title="1、普通索引"></a>1、普通索引</h2><p>普通索引是最基本的索引类型，建立在普通字段上，没有任何限制</p><p>创建普通索引的三种方式</p><ol><li>直接添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD INDEX [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名) );</span><br></pre></td></tr></table></figure><h2 id="2、主键索引"><a href="#2、主键索引" class="headerlink" title="2、主键索引"></a>2、主键索引</h2><p>主键索引是一种特殊的唯一值，不允许为空。创建主键索引有两种方式</p><ol><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD PRIMARY KEY (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], PRIMARY KEY (字段名) );</span><br></pre></td></tr></table></figure><h2 id="3、唯一索引"><a href="#3、唯一索引" class="headerlink" title="3、唯一索引"></a>3、唯一索引</h2><p>与普通索引不同的时，唯一索引的列不能有重复值，但可以为空，在创建、修改表列字段属性为唯一约束时，自动添加唯一索引</p><p>创建唯一索引的三种方式</p><ol><li>直接添加唯一索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD UNIQUE INDEX [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (字段名) ;</span><br></pre></td></tr></table></figure><h2 id="4、复合索引"><a href="#4、复合索引" class="headerlink" title="4、复合索引"></a>4、复合索引</h2><p>单一索引是指索引只作用在一列上，复合索引是指用户在多个列上建立索引，这种索引叫复合索引（组合索引），复合索引可以代替多个单一索引，相比多个单一索引复合索引所需的开销更小。 但要注意<strong>最左前缀原则</strong></p><p>创建复合索引的三种方式</p><ol><li>直接添加复合索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index &lt;索引名称&gt; on table(字段名1，字段名2);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD INDEX [索引的名字] (字段名1，字段名2...);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名1，字段名2...) );</span><br></pre></td></tr></table></figure><p>复合索引使用时注意事项：</p><p>什么时候使用复合索引：</p><ul><li>添加复合索引要根据where条件建立，不要过多使用索引，过多无用的索引会影响表新增更新数据</li><li>如果表已经有了(col1,col2)，就没有必要再单独建立(col1)，如果有了（col1）索引，如果需要查询col1和col2条件，可以建立(col1,col2)列复合索引，对查询速度有一定的提高。</li></ul><h2 id="5、全文索引"><a href="#5、全文索引" class="headerlink" title="5、全文索引"></a>5、全文索引</h2><p>查询操作在数据量比较少时，可以使用like模糊查询，但是对于大量的文本数据检索，效率很低。如果使用全文索引，查询速度会比like快很多倍。在MySQL 5.6 以前的版本，只有MyISAM存储引擎支持全文索引，从MySQL 5.6开始MyISAM和InnoDB存储引擎均支持  。</p><p>创建全文索引的三种方式（注意只能对字符串和文本类型列生效）：</p><ol><li>直接添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FULLTEXT INDEX &lt;索引的名字&gt; ON tablename (字段名);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表结构添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD FULLTEXT [索引的名字] (字段名);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表时添加全文索引</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename ( [...], FULLTEXT KEY [索引的名字] (字段名) ;</span><br></pre></td></tr></table></figure><p>与常见的like模糊查询不同，全文索引使用match和against关键字，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where match(username) against(&#x27;aaa&#x27;);</span><br></pre></td></tr></table></figure><p>全文索引使用注意事项：</p><ul><li>全文索引必须在字符串、文本字段上建立。<ul><li>全文索引字段值必须在最小字符和最大字符之间的才会有效。（innodb：3-84；myisam：4-84）</li></ul></li><li>全文索引字段值要进行切词处理，按syntax字符进行切割，例如b+aaa，切分成b和aaa</li><li>全文索引匹配查询，默认使用的是等值匹配，例如a匹配a，不会匹配ab,ac。如果想匹配可以在布尔模式下搜索a*  </li></ul><h1 id="二、索引的原理"><a href="#二、索引的原理" class="headerlink" title="二、索引的原理"></a>二、索引的原理</h1><h1 id="三、索引的分析和优化"><a href="#三、索引的分析和优化" class="headerlink" title="三、索引的分析和优化"></a>三、索引的分析和优化</h1><h2 id="1、Explain"><a href="#1、Explain" class="headerlink" title="1、Explain"></a>1、Explain</h2><p>MySQL提供的explain命令，可以对select语句进行分析，并输出select 查询执行的详细信息，可以供开发人员查看，进而帮助开发人员针对性优化。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from user WHERE id &lt; 3;</span><br></pre></td></tr></table></figure><p>EXPLAIN 命令的输出内容大致如下：  </p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211206172601998.png" alt="image-20211206172601998"></p><h3 id="（一）select-type"><a href="#（一）select-type" class="headerlink" title="（一）select_type"></a>（一）select_type</h3><p>表示查询的类型，常见的值有以下情况</p><ul><li>SIMPLE：表示查询语句不包含子查询或union  </li><li>PRIMARY：表示此查询是最外层查询</li><li>UNION：表示此查询是UNION的第二个或后续的查询  </li><li>DEPENDENT UNION：UNION中的第二个或后续的查询语句，使用了外面查询结果  </li><li>UNION RESULT：UNION的结果  </li><li>SUBQUERY：SELECT子查询语句  </li><li>SUBQUERY：SELECT子查询语句  </li></ul><p><strong>最常见的查询类型就是SIMPLE，表示我们查询没有子查询也没有用到union查询</strong></p><h3 id="（二）type"><a href="#（二）type" class="headerlink" title="（二）type"></a>（二）type</h3><p>表示存储引擎查询数据时采用的方式。比较重要的一个属性，通过它可以判断出查询是全表扫描还是基于索引的部分扫描。常用属性值如下，从上至下效率依次增强。  </p><ul><li>ALL：表示全表扫描，性能最差。</li><li>index：表示基于索引的全表扫描，先扫描索引再扫描全表数据。</li><li>range：表示使用索引范围查询。使用&gt;、&gt;=、&lt;、&lt;=、in等等。</li><li>ref：表示使用非唯一索引进行单值查询。</li><li>eq_ref：一般情况下出现在多表join查询，表示前面表的每一个记录，都只能匹配后面表的一行结果。</li><li>const：表示使用主键或唯一索引做等值查询，常量查询。</li><li>NULL：表示不用访问表，速度最快  </li></ul><h3 id="（三）possible-keys"><a href="#（三）possible-keys" class="headerlink" title="（三）possible_keys"></a>（三）possible_keys</h3><p>表示查询时能够使用到的索引。注意并不一定会真正使用，显示的是索引名称。  </p><h3 id="（四）key"><a href="#（四）key" class="headerlink" title="（四）key"></a>（四）key</h3><p>表示查询时真正使用到的索引，显示的是索引名称。  </p><h3 id="（五）rows"><a href="#（五）rows" class="headerlink" title="（五）rows"></a>（五）rows</h3><p>MySQL查询优化器会根据统计信息，估算SQL要查询到结果需要扫描多少行记录。原则上rows是越少效率越高，可以直观的了解到SQL效率高低。  </p><h3 id="（六）key-len"><a href="#（六）key-len" class="headerlink" title="（六）key_len"></a>（六）key_len</h3><p>表示查询使用了索引的字节数量。可以判断是否全部使用了组合索引。<br>key_len的计算规则如下：</p><ul><li>字符串类型<br>字符串长度跟字符集有关：latin1=1、gbk=2、utf8=3、utf8mb4=4<br>char(n)：n*字符集长度<br>varchar(n)：n * 字符集长度 + 2字节</li><li>数值类型<br>TINYINT：1个字节<br>SMALLINT：2个字节<br>MEDIUMINT：3个字节<br>INT、FLOAT：4个字节<br>BIGINT、DOUBLE：8个字节</li><li>时间类型<br>DATE：3个字节<br>TIMESTAMP：4个字节<br>DATETIME：8个字节</li><li>字段属性<br>NULL属性占用1个字节，如果一个字段设置了NOT NULL，则没有此项。</li></ul><h3 id="（七）Extra"><a href="#（七）Extra" class="headerlink" title="（七）Extra"></a>（七）Extra</h3><p>Extra表示很多额外的信息，各种操作会在Extra提示相关信息，常见几种如下：</p><ul><li>Using where<br>表示查询需要通过索引回表查询数据。</li><li>Using index<br>表示查询需要通过索引，索引就可以满足所需数据。</li><li>Using filesort<br>表示查询出来的结果需要额外排序，数据量小在内存，大的话在磁盘，因此有Using filesort建议优化。</li><li>Using temprorary<br>查询使用到了临时表，一般出现于去重、分组等操作。  </li></ul><h2 id="2、索引失效的七种情况"><a href="#2、索引失效的七种情况" class="headerlink" title="2、索引失效的七种情况"></a>2、索引失效的七种情况</h2><h3 id="（一）like-‘-XX’"><a href="#（一）like-‘-XX’" class="headerlink" title="（一）like ‘%XX’"></a>（一）like ‘%XX’</h3><h3 id="（二）where-索引列使用了函数"><a href="#（二）where-索引列使用了函数" class="headerlink" title="（二）where 索引列使用了函数"></a>（二）where 索引列使用了函数</h3><h3 id="（三）违反最左前缀原则"><a href="#（三）违反最左前缀原则" class="headerlink" title="（三）违反最左前缀原则"></a>（三）违反最左前缀原则</h3><h3 id="（四）有or关键字"><a href="#（四）有or关键字" class="headerlink" title="（四）有or关键字"></a>（四）有or关键字</h3><h3 id="（五）where-索引列有运算"><a href="#（五）where-索引列有运算" class="headerlink" title="（五）where 索引列有运算"></a>（五）where 索引列有运算</h3><h3 id="（六）需要类型转换"><a href="#（六）需要类型转换" class="headerlink" title="（六）需要类型转换"></a>（六）需要类型转换</h3><h3 id="（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）"><a href="#（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）" class="headerlink" title="（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）"></a>（七）如果MySQL觉得全表扫描更快（例如范围查询，结果数据较多）</h3><p>​                    <a href="https://www.cnblogs.com/liehen2046/p/11052666.html">索引失效的7种情况</a></p><h2 id="3、回表查询"><a href="#3、回表查询" class="headerlink" title="3、回表查询"></a>3、回表查询</h2><p>在之前介绍过，InnoDB索引有聚簇索引和辅助索引。聚簇索引的叶子节点存储行记录，InnoDB必须要有，且只有一个。辅助索引的叶子节点存储的是主键值和索引字段值，通过辅助索引无法直接定位行记录，通常情况下，需要扫码两遍索引树。先通过辅助索引定位主键值，然后再通过聚簇索引定位行记录，这就叫做回表查询，它的性能比扫一遍索引树低。<br>总结：<strong>通过索引查询主键值，然后再去聚簇索引查询记录信息</strong>  </p><h2 id="4、索引覆盖"><a href="#4、索引覆盖" class="headerlink" title="4、索引覆盖"></a>4、索引覆盖</h2><p>简单来说，通过索引就能满足查询结果。不需要再去查询行记录。</p><p>在MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为Using index时，能够触发索引覆盖  </p><p>不管是SQL-Server官网，还是MySQL官网，都表达了：<strong>只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快，这就叫做索引覆盖</strong>。<br>实现索引覆盖最常见的方法就是：<strong>将被查询的字段，建立到组合索引</strong>。  </p><h2 id="5、索引与排序"><a href="#5、索引与排序" class="headerlink" title="5、索引与排序"></a>5、索引与排序</h2><p>MySQL支持filesort和index两种方式排序</p><h3 id="（一）filesort"><a href="#（一）filesort" class="headerlink" title="（一）filesort"></a>（一）filesort</h3><p>先把结果查出，然后在缓存或磁盘进行排序操作，效率较低。  </p><ul><li>双路排序</li></ul><p>需要两次磁盘扫描读取，最终得到用户数据。第一次将排序字段读取出来，然后排序；第二次去读取其他字段数据  </p><ul><li>单路排序</li></ul><h3 id="（二）index"><a href="#（二）index" class="headerlink" title="（二）index"></a>（二）index</h3><p>使用index是指利用索引自动实现排序，不需另做排序操作，效率会比较高。  </p><h2 id="六、NULL查询"><a href="#六、NULL查询" class="headerlink" title="六、NULL查询"></a>六、NULL查询</h2><p>问题：如果MySQL的某一列含有NULL值，那么包含该列的索引是否生效？</p><p>对MySQL来说，NULL是一个特殊的值，从概念上来讲，NULL意味着“一个未知值“，它的处理方式与其他值有些不同，比如：不能使用=、&lt;、&gt;这样的运算符，对NULL做算数运算的结果都是NULL,count时不会包括NULL行等，NULL比空字符串需要更多的存储空间等。</p><p>答：可以，虽然MySQL可以再含有NULL的列上使用索引，但是NULL和其它数据还是有区别的，不建议列上允许未NULL值，最好设置为NOT NULL，并给一个默认值，比如0和空字符串 ‘’ 等，如果时datatime类型，也可以设置系统当前时间或某个固定的特殊值，例如’1970-01-01 00:00:00’  。</p><p>注意：设置默认值的时候，例如0，不要和系统数据产生干扰，如果这个字段0本身就有含义，就不能使用了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;s索引的学习对于数据库优化有着至关重要的作用，深入理解索引机制，才能更好的优化查询机制&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL时间查询不走索引了？</title>
    <link href="http://example.com/2021/11/29/MySQL%E6%97%B6%E9%97%B4%E6%9F%A5%E8%AF%A2%E4%B8%8D%E8%B5%B0%E7%B4%A2%E5%BC%95%E4%BA%86%EF%BC%9F/"/>
    <id>http://example.com/2021/11/29/MySQL%E6%97%B6%E9%97%B4%E6%9F%A5%E8%AF%A2%E4%B8%8D%E8%B5%B0%E7%B4%A2%E5%BC%95%E4%BA%86%EF%BC%9F/</id>
    <published>2021-11-29T14:53:22.000Z</published>
    <updated>2021-11-29T15:28:00.704Z</updated>
    
    <content type="html"><![CDATA[<p>今天在根据时间查询表数据时，赶紧查询效率慢，于是在时间字段加了普通索引，然而查询效率仍然慢，于是Explain下发现走的仍然是全表扫描，为什么呢？加了索引为什么没生效？索引的失效条件好像也没说有时间相关内容，本着追根溯源的求知欲，于是有了这篇短记。</p><span id="more"></span><h1 id="一、情景复现"><a href="#一、情景复现" class="headerlink" title="一、情景复现"></a>一、情景复现</h1><p>数据表<code>error_log_info</code>大约有87760条数据记录</p><p>通过添加普通索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX error_date_index on error_log_info(errordate);</span><br></pre></td></tr></table></figure><p>为errordate字段添加了索引，然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from error_log_info where errordate &gt; &#x27;2021-11-29 12:00:22&#x27;;</span><br></pre></td></tr></table></figure><p>explain结果发现 type:ALL，走的是全表扫描查询，key为空代表未使用索引，rows:82247行，估计的扫描行数近似于全表行数。显示在该查询中确实没有走建立的时间索引而是走了全表扫描</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211129230326737.png" alt="image-20211129230326737"></p><p>然后我将时间缩短，让查询出的记录数变少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from error_log_info where errordate &gt; &#x27;2021-11-29 22:00:22&#x27;;</span><br></pre></td></tr></table></figure><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211129231057523.png" alt="image-20211129231057523"></p><p>explain结果发现type:range，没有走全表扫描查询，key：error_date_index走了添加的时间索引，rows:2847,显示预估的扫描行数也比之前少了很多，这种情况下发现确实又走了索引。</p><p>到底是什么情况，只是查询的范围不一样，为什么会有时走索引有事不走呢？</p><h1 id="二、索引失效的几种原因"><a href="#二、索引失效的几种原因" class="headerlink" title="二、索引失效的几种原因"></a>二、索引失效的几种原因</h1><p>先回顾下几种使得索引失效的原因：</p><ol><li>where中索引列有运算</li><li>where中索引使用了函数方法</li><li>复合索引未用左列字段</li><li>like 以 %开头</li><li>条件有or关键字</li><li>需要类型转换</li><li>MySQL觉得全表扫描更快</li></ol><p>几种不推荐使用索引的场景：</p><ol><li>数据唯一性差（一个字段的取值只有几种时）的字段不要使用索引</li><li>频繁更新的字段</li><li>字段不在where语句出现时不要添加索引,如果where后含IS NULL /IS NOT NULL/ like ‘%输入符%’等条件，不建议使用索引</li><li> where 子句里对索引列使用不等于（&lt;&gt;），使用索引效果一般</li></ol><p><a href="https://www.cnblogs.com/liehen2046/p/11052666.html">点击跳转参考博客</a></p><h1 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h1><p>经过查证官网</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211129232313911.png" alt="image-20211129232313911"></p><p>大意是：</p><blockquote><p>Each table index is queried, and the best index is used unless the optimizer believes that it is more efficient to use a table scan.</p></blockquote><p>表中的每个索引都会被访问，当中最佳的那个则会被使用，除非优化器认为使用全表查询比使用所有查询更高效。(也就是上面列的第七条)</p><blockquote><p>At one time, a scan was used based on whether the best index spanned more than 30% of the table, but a fixed percentage no longer determines the choice between using an index or a scan.</p></blockquote><p>曾经，是否进行全表扫描取决于使用最好的索引查出来的数据是否超过表的30%的数据，但是现在这个固定百分比(30%)不再决定使用索引还是全表扫描了。</p><blockquote><p>The optimizer now is more complex and bases its estimate on additional factors such as table size, number of rows, and I/O block size.</p></blockquote><p>优化器现在变得更复杂，它考虑的因素更多，比如表大小、行数量、IO块大小。</p><p>通俗点讲：</p><p>我们建的索引并不是总会起作用的，中间有查询优化器插足，它会判断一个查询SQL是否走索引查得更快，若是，就走索引，否则做全表扫描。</p><p>以前有个百分比(30%)决定SQL是走索引还是走全表扫描，就是说如果总共有100行记录，走索引查询出来的记录超过30条，那还不如不走索引了。</p><p>但是现在MySQL不这么干了，不只通过这个百分比来决定走不走索引，而是要参考更多因素来做决定。</p><p><strong>最终得出的结论是，索引失效并不是因为字段类型为时间类型，而是因为查询优化器会对SQL的执行计划进行判断，选择一个最优最快的查询方式，当走索引的代价高于全表扫描时就不会采取走索引的方式去执行SQL。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在根据时间查询表数据时，赶紧查询效率慢，于是在时间字段加了普通索引，然而查询效率仍然慢，于是Explain下发现走的仍然是全表扫描，为什么呢？加了索引为什么没生效？索引的失效条件好像也没说有时间相关内容，本着追根溯源的求知欲，于是有了这篇短记。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="索引" scheme="http://example.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>错误日志收集预警功能开发（一）</title>
    <link href="http://example.com/2021/11/28/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%A2%84%E8%AD%A6%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/11/28/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%A2%84%E8%AD%A6%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-11-28T13:53:34.000Z</published>
    <updated>2021-11-29T06:42:19.466Z</updated>
    
    <content type="html"><![CDATA[<p>该功能要实现检测日志输出内容，实时摘取错误日志片段，存放数据库中~</p><p>后续可进一步开发实现，错误信息分析，邮件预警等功能</p><span id="more"></span><h1 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h1><ol><li>从服务器上检测程序运行输出的日志内容，将日志内容中Exception错误的内容块收取</li><li>将收取的错误信息存放到MySQL数据库中</li></ol><h1 id="二、选用技术点"><a href="#二、选用技术点" class="headerlink" title="二、选用技术点"></a>二、选用技术点</h1><h2 id="1-FileBeat"><a href="#1-FileBeat" class="headerlink" title="1. FileBeat"></a>1. FileBeat</h2><p>采用fileBeat用于检测日志信息，获取日志中错误信息内容块，作为生产者传递给KafKa</p><h2 id="2-Kafka"><a href="#2-Kafka" class="headerlink" title="2. Kafka"></a>2. Kafka</h2><p>用于错误信息的收取，fileBeat传递内容后，通过kafka进行错误信息的传递</p><h2 id="3-SpringBoot-Mybatis-plus-MySQL-MAVEN"><a href="#3-SpringBoot-Mybatis-plus-MySQL-MAVEN" class="headerlink" title="3. SpringBoot+Mybatis-plus+MySQL+MAVEN"></a>3. SpringBoot+Mybatis-plus+MySQL+MAVEN</h2><p>开启kafka消费者监听，实时接受kafka获取的错误日志信息，格式化后入库</p><h1 id="三、实现步骤"><a href="#三、实现步骤" class="headerlink" title="三、实现步骤"></a>三、实现步骤</h1><h2 id="1、使用FileBeat实现日志的正则抓取"><a href="#1、使用FileBeat实现日志的正则抓取" class="headerlink" title="1、使用FileBeat实现日志的正则抓取"></a>1、使用FileBeat实现日志的正则抓取</h2><ol><li>所在Linux服务器执行以下命令下载安装fielBeat</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取filebeat文件</span><br><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-linux-x86_64.tar.gz</span><br><span class="line">解压filebeat压缩包</span><br><span class="line">tar -zxf kafka_2.12-3.0.0.tgz -C /opt/</span><br></pre></td></tr></table></figure><ol start="2"><li><p>修改配置文件</p><p>cd filebeat-7.15.2-linux-x86_64/ 进入目录</p><p>修改filebeat.yml文件，关注以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 限制一个cpu核心，避免在日志较频繁时可能导致CPU满载</span><br><span class="line">max_procs: 1</span><br><span class="line"></span><br><span class="line"># 监测的日志路径</span><br><span class="line">paths:</span><br><span class="line">  - /home/weblogic/base_domain/logs/nohup/nohup*.log</span><br><span class="line"></span><br><span class="line"># 匹配日志的行信息，例如找到以Excepton和Error开头的错误  </span><br><span class="line">include_lines: [&#x27;ERROR&#x27;,&#x27;^(\w&#123;1,&#125;\.)&#123;1,&#125;(.*Exception|.*Error)&#123;1&#125;&#x27;]</span><br><span class="line"></span><br><span class="line">### Multiline options</span><br><span class="line"># 根据实际日志情况进行多行匹配，获取的是错误多行信息</span><br><span class="line">multiline.type: pattern</span><br><span class="line">multiline.pattern: &#x27;^(\w&#123;1,&#125;\.)&#123;1,&#125;(.*Exception|.*Error)&#123;1&#125;|^[[:space:]]+(at|\.&#123;3&#125;)[[:space:]]+\b|^Caused by:&#x27;</span><br><span class="line">multiline.negate: false</span><br><span class="line">multiline.match: after</span><br><span class="line"></span><br><span class="line"># -------------------------------kafka Output-----------------------------------</span><br><span class="line">output.kafka:</span><br><span class="line">  # initial brokers for reading cluster metadata</span><br><span class="line">  hosts: [&quot;101.132.XXX.XX:9092&quot;]</span><br><span class="line"></span><br><span class="line">  # message topic selection + partitioning</span><br><span class="line">  topic: &#x27;error_log_collect_topic&#x27;</span><br><span class="line">  partition.round_robin:</span><br><span class="line">    reachable_only: false</span><br><span class="line">  version: 2.0.0</span><br><span class="line">  required_acks: 1</span><br><span class="line">  compression: gzip</span><br><span class="line">  max_message_bytes: 1000000  </span><br></pre></td></tr></table></figure></li><li><p>filebeat启动</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c filebeat配置文件</span><br></pre></td></tr></table></figure><p>​    也可以后台启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./filebeat -e -c filebeat.yml -d <span class="string">&quot;publish&quot;</span> &gt; /dev/null &gt;2&amp; &gt;1 &amp;</span><br></pre></td></tr></table></figure><p>关于nohup具体用法，查看章节四</p><h2 id="2、使用kafka获取错误日志信息"><a href="#2、使用kafka获取错误日志信息" class="headerlink" title="2、使用kafka获取错误日志信息"></a>2、使用kafka获取错误日志信息</h2><p><a href="https://www.orchome.com/66">kafka中文教程</a></p><p>kafka的使用，要求先要安装好jdk以及zookeeper,kafka3.0.0自带zookeeper,也可以自行单独安装zookee。</p><ol><li>所在Linux服务器执行以下命令下载安装Kafka</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取kafka文件包</span><br><span class="line">wget http://archive.apache.org/dist/kafka/3.0.0/kafka_2.12-3.0.0.tgz</span><br><span class="line">解压</span><br><span class="line">tar kafka_2.12-3.0.0.tgz</span><br></pre></td></tr></table></figure><ol start="2"><li>配置环境变量</li></ol><p><code>vim /etc/profile</code>  添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export KAFKA_HOME=/opt/kafka_2.12-3.0.0</span><br><span class="line">export PATH=$PATH:$KAFKA_HOME/bin</span><br></pre></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><p><code>vim /opt/kafka_2.12-3.0.0/config/server.properties</code></p><p>在内容中修改或者添加以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listeners=PLAINTEXT://:9092</span><br><span class="line">advertised.listeners=PLAINTEXT://101.132.140.20:9092</span><br></pre></td></tr></table></figure><p>同时需要关注<code>zookeeper.connect</code>属性值是否是正确的，如果是本机的zookeeper一般是localhost:2181</p><ol start="4"><li>启动</li></ol><p>启动参数 -daemon 指定后台启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--启动zookeeper</span><br><span class="line">zookeeper-server-start.sh -daemon /opt/kafka_2.12-3.0.0/config/zookeeper.properties</span><br><span class="line">--启动kafka</span><br><span class="line">kafka-server-start.sh -daemon /opt/kafka_2.12-3.0.0/config/server.properties</span><br><span class="line"></span><br><span class="line">--生产者</span><br><span class="line">kafka-console-producer.sh --broker-list localhost:9092 --topic error_log_collect_topic</span><br><span class="line">--消费者</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic error_log_collect_topic --from-beginning</span><br></pre></td></tr></table></figure><ol start="5"><li>创建和查看主题</li></ol><p>创建一个名为“test”的Topic，只有一个分区和一个备份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure><p>创建好之后，可以通过运行以下命令，查看已创建的topic信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --describe --topic test --bootstrap-server localhost:9092</span><br><span class="line">Topic:test  PartitionCount:1    ReplicationFactor:1 Configs:</span><br><span class="line">Topic: test Partition: 0    Leader: 0   Replicas: 0 Isr: 0</span><br></pre></td></tr></table></figure><h2 id="3、SpringBoot-MySQL-Mybatis-Plus"><a href="#3、SpringBoot-MySQL-Mybatis-Plus" class="headerlink" title="3、SpringBoot+MySQL+Mybatis-Plus"></a>3、SpringBoot+MySQL+Mybatis-Plus</h2><h3 id="（—）SpingBoot相关"><a href="#（—）SpingBoot相关" class="headerlink" title="（—）SpingBoot相关"></a>（—）SpingBoot相关</h3><p>新增Module模块tool-log处理kafka获取的信息</p><p>修改pom.xml，注意以下内容</p><ol><li>是否配置了&lt;parent&gt;&lt;/parent&gt;属性</li><li>&lt;dependency&gt;是否依赖了需要的模块</li><li>这个Module另外需要的依赖是否引入</li><li>parent的pom.xml中module是否有这个新module</li><li>SpringBoot主类Module的pom.xml是否依赖了这个新的Module</li></ol><h4 id="1-application-yml配置文件添加kafka信息"><a href="#1-application-yml配置文件添加kafka信息" class="headerlink" title="1. application.yml配置文件添加kafka信息"></a>1. application.yml配置文件添加kafka信息</h4><p>在SpringBoot入口配置Module的resources目录下的application.yml添加以下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line"> kafka:</span><br><span class="line">    consumer:</span><br><span class="line">      enable-auto-commit: true</span><br><span class="line">      auto-offset-reset: earliest</span><br><span class="line">      bootstrap-servers: 101.132.140.20:9092</span><br><span class="line">      group-id: test-consumer-group</span><br></pre></td></tr></table></figure><h4 id="2-application-yml配置文件添加日志数据源"><a href="#2-application-yml配置文件添加日志数据源" class="headerlink" title="2. application.yml配置文件添加日志数据源"></a>2. application.yml配置文件添加日志数据源</h4><p>主要是配置 log数据源，作为后面持久层入库的数据源连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        loginUsername: admin</span><br><span class="line">        loginPassword: 123456</span><br><span class="line">    dynamic:</span><br><span class="line">      druid: #以下是全局默认值，可以全局更改</span><br><span class="line">        minIdle: 5</span><br><span class="line">        maxActive: 20</span><br><span class="line">        filters: stat,wall # 注意这个值和druid原生不一致，默认启动了stat,wall</span><br><span class="line">        stat:</span><br><span class="line">          merge-sql: true</span><br><span class="line">          log-slow-sql: true</span><br><span class="line">      datasource:</span><br><span class="line">        log:</span><br><span class="line">          url: jdbc:mysql://101.132.XXX.XX:3306/XXX</span><br><span class="line">          username: root</span><br><span class="line">          password: XXX</span><br><span class="line">          driverClassName: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><h4 id="3-使用-mybatis-generator-逆向工程生成文件"><a href="#3-使用-mybatis-generator-逆向工程生成文件" class="headerlink" title="3. 使用 mybatis-generator 逆向工程生成文件"></a>3. 使用 <code>mybatis-generator</code> 逆向工程生成文件</h4><p>将生成的文件转移到新的Module中去，注意MyBatis-plus配置在SpringBoot启动类上的Mapper的扫描路径，那么在转移文件的时候，新的Module也要新建这样一层包路径，将相关的mapper文件放进去</p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211129114914329.png" alt="image-20211129114914329" style="zoom:67%;"><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211129115109503.png" alt="image-20211129115109503"></p><h4 id="4-业务代码编写"><a href="#4-业务代码编写" class="headerlink" title="4. 业务代码编写"></a>4. 业务代码编写</h4><h5 id="1-编写kafka消费者监听类"><a href="#1-编写kafka消费者监听类" class="headerlink" title="1.  编写kafka消费者监听类"></a>1.  编写kafka消费者监听类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ErrorMsgCollect &#123; </span><br><span class="line">    @Autowired</span><br><span class="line">    ParseErrorInfoMessage parseErrorInfoMessage;</span><br><span class="line">    </span><br><span class="line">    @KafkaListener(topics = &quot;error_log_collect_topic&quot;)</span><br><span class="line">    public void onMessage(ConsumerRecord&lt;Integer,String&gt; record)&#123;</span><br><span class="line">        ErrorLogInfo errorLogInfo = new ErrorLogInfo();</span><br><span class="line">        System.out.println(&quot;消费者收到的消息==&quot;+record.topic()+&quot;\t&quot;+record.partition()+&quot;\t&quot;+record.offset()+&quot;\t&quot;+record.key()+&quot;\t&quot;+record.value());</span><br><span class="line">        parseErrorInfoMessage.parseMessage(record.value(), errorLogInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-编写数据解析类，和数据存库"><a href="#2-编写数据解析类，和数据存库" class="headerlink" title="2.  编写数据解析类，和数据存库"></a>2.  编写数据解析类，和数据存库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ParseErrorInfoMessage &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    ErrorLogInfoService errorLogInfoService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析错误信息</span><br><span class="line">     * @param errorInfo</span><br><span class="line">     * @param errorLogInfo</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public ErrorLogInfo parseMessage(String errorInfo, ErrorLogInfo errorLogInfo)&#123;</span><br><span class="line">        //textMp();</span><br><span class="line">        JSONObject errorInfoObject = JSONObject.parseObject(errorInfo);</span><br><span class="line">        //获取错误日志时间</span><br><span class="line">        String errDate = errorInfoObject.get(&quot;@timestamp&quot;).toString();</span><br><span class="line">        errorLogInfo.setErrordate(DateUtil.parse(errDate));</span><br><span class="line"></span><br><span class="line">        //获取日志位置</span><br><span class="line">        JSONObject logInfoObject = (JSONObject)errorInfoObject.get(&quot;log&quot;);</span><br><span class="line">        JSONObject fileObject = (JSONObject)logInfoObject.get(&quot;file&quot;);</span><br><span class="line">        errorLogInfo.setLogpath(fileObject.get(&quot;path&quot;).toString());</span><br><span class="line">        //获取日志所在服务器ip</span><br><span class="line">        JSONObject hostObject = (JSONObject)errorInfoObject.get(&quot;host&quot;);</span><br><span class="line">        JSONArray ipArr = hostObject.getJSONArray(&quot;ip&quot;);</span><br><span class="line">        errorLogInfo.setIpaddr(ipArr.get(0).toString());</span><br><span class="line">        //获取错误日志信息</span><br><span class="line">        Object errMessage = errorInfoObject.get(&quot;message&quot;);</span><br><span class="line">        errorLogInfo.setMessage(errMessage.toString());</span><br><span class="line">        errorLogInfo.setAdddate(new Date());</span><br><span class="line">        saveErrorLogInfo(errorLogInfo);</span><br><span class="line">        return errorLogInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//入库</span><br><span class="line">    public void saveErrorLogInfo(ErrorLogInfo errorLogInfo)&#123;</span><br><span class="line">        boolean save = errorLogInfoService.save(errorLogInfo);</span><br><span class="line">        System.out.println(&quot;插入提示：&quot; + save );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-注意："><a href="#3-注意：" class="headerlink" title="3. 注意："></a>3. 注意：</h5><p>在对应的mapper文件上方提交@DS(“XX”)，指定使用的数据源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">@DS(&quot;log&quot;)</span><br><span class="line">public interface ErrorLogInfoMapper extends BaseMapper&lt;ErrorLogInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成代码编写开发，通过SpringBoot启动类即可启动</p><h3 id="（二）MySQL"><a href="#（二）MySQL" class="headerlink" title="（二）MySQL"></a>（二）MySQL</h3><p>mysql相关下载安装参考文档：<a href="https://www.lanzouw.com/inlnNwzydfe">点击下载</a> 密码：lzlz</p><p>建立数据库，确定表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `error_log_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增逐渐ID&#x27;</span>,</span><br><span class="line">  `ipaddr` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;IP地址&#x27;</span>,</span><br><span class="line">  `logpath` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日志地址&#x27;</span>,</span><br><span class="line">  `message` text COMMENT <span class="string">&#x27;错误信息&#x27;</span>,</span><br><span class="line">  `errordate` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;错误日志时间&#x27;</span>,</span><br><span class="line">  `adddate` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日志入库时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `error_date_index` (`errordate`),</span><br><span class="line">  FULLTEXT KEY `error_info_index` (`message`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">50426</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><h3 id="（三）项目部署"><a href="#（三）项目部署" class="headerlink" title="（三）项目部署"></a>（三）项目部署</h3><h4 id="1、安装配置maven"><a href="#1、安装配置maven" class="headerlink" title="1、安装配置maven"></a>1、安装配置maven</h4><p>这一步骤有无皆可，可以本地打包上传</p><p>将maven二进制文件包上传到服务器解压后，添加到环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAVEN_HOME=/usr/local/src/apache-maven-3.6.3</span><br><span class="line">PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><p>然后输入 source /etc/profile 使得环境变量生效</p><p>输入 mvn -version 测试，配置是否成功</p><p>配置 maven的setting.xml文件</p><ol><li>本地仓库地址</li><li>阿里云镜像</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;/home/b2b/repository&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h4 id="2、上传源码"><a href="#2、上传源码" class="headerlink" title="2、上传源码"></a>2、上传源码</h4><p>将源码上传到服务器上</p><h4 id="3、使用maven打包"><a href="#3、使用maven打包" class="headerlink" title="3、使用maven打包"></a>3、使用maven打包</h4><p>将目录切到源码的parent层级下，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>进行先clean再打包的操作</p><p>打包完成，在SpringBoot启动类模块，target文件夹下，找到生成的jar文件，在该层级执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar b2btool-web-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure><p>nohup 会将输出的日志后台输出到 nohub.out文件中</p><p>至此项目部署完成</p><h1 id="四、具体细节"><a href="#四、具体细节" class="headerlink" title="四、具体细节"></a>四、具体细节</h1><h2 id="1、mabits-generator逆向工程使用"><a href="#1、mabits-generator逆向工程使用" class="headerlink" title="1、mabits-generator逆向工程使用"></a>1、mabits-generator逆向工程使用</h2><p>pom.xml 依赖导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mp代码生成器--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--为实体类自动添加getter、setter、toString等方法--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--数据库连接驱动--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>编写generator代码生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusGenerator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//作者名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHOR = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">    <span class="comment">//表table的前缀，不加到生成的类名中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">&quot;t_&quot;</span>;</span><br><span class="line">    <span class="comment">//功能模块名称，生成的文件会存放到模块下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE_NAME = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="comment">//要生成的表名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] TABLES= &#123;<span class="string">&quot;想生成代码的表名&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_URL = <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_USERNAME = <span class="string">&quot;数据库用户名&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_PASSWORD = <span class="string">&quot;数据库密码&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_PACKAGE = <span class="string">&quot;com.liu.test.mybatis.demo&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前项目路径</span></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator generator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//数据库配置</span></span><br><span class="line">        configDataSource(generator);</span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        configGlobal(generator, projectPath);</span><br><span class="line">        <span class="comment">//包相关配置</span></span><br><span class="line">        configPackage(generator);</span><br><span class="line">        <span class="comment">//策略配置</span></span><br><span class="line">        configStrategy(generator);</span><br><span class="line">        <span class="comment">//自定义配置</span></span><br><span class="line">        cofnigCustom(generator, projectPath);</span><br><span class="line">        <span class="comment">//模版引擎配置</span></span><br><span class="line">        configTemplate(generator);</span><br><span class="line"> </span><br><span class="line">        generator.execute();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 进行数据库相关配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:27</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configDataSource</span><span class="params">(AutoGenerator generator)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数据源配置</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setUrl(JDBC_URL);</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class="line">        <span class="comment">// dataSourceConfig.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dataSourceConfig.setDriverName(JDBC_DRIVER);</span><br><span class="line">        dataSourceConfig.setUsername(JDBC_USERNAME);</span><br><span class="line">        dataSourceConfig.setPassword(JDBC_PASSWORD);</span><br><span class="line">        generator.setDataSource(dataSourceConfig);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 进行全局配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> projectPath :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:28</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configGlobal</span><span class="params">(AutoGenerator generator, String projectPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//生成文件输出存放路径 = 当前项目路径 + 想存放到项目中的路径</span></span><br><span class="line">        String fileOutputPatch = projectPath.concat(<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        globalConfig.setOutputDir(fileOutputPatch);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//设置作者</span></span><br><span class="line">        globalConfig.setAuthor(AUTHOR);</span><br><span class="line">        <span class="comment">//生成完后是否打开输出目录</span></span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//是否覆盖生成过的已有文件</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//是否开启activeRecord模式</span></span><br><span class="line">        globalConfig.setActiveRecord(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 是否在xml中添加二级缓存配置,默认false</span></span><br><span class="line">        globalConfig.setEnableCache(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// XML文件返回对象定义ResultMap</span></span><br><span class="line">        globalConfig.setBaseResultMap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// XML返回对象字段列表columList</span></span><br><span class="line">        globalConfig.setBaseColumnList(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置主键字段类型</span></span><br><span class="line">        globalConfig.setIdType(IdType.INPUT);</span><br><span class="line">        <span class="comment">//生成的文件名字定义，%s 会自动填充表实体属性</span></span><br><span class="line">        globalConfig.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setEntityName(<span class="string">&quot;%s&quot;</span>);</span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        globalConfig.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        globalConfig.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        <span class="comment">//开启 swagger2 模式,实体属性 Swagger2 注解,默认false</span></span><br><span class="line">        globalConfig.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">        generator.setGlobalConfig(globalConfig);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 各个包配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:34</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configPackage</span><span class="params">(AutoGenerator generator)</span> </span>&#123;</span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setModuleName(MODULE_NAME);</span><br><span class="line">        packageConfig.setParent(BASE_PACKAGE);<span class="comment">//包路径</span></span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        packageConfig.setXml(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        generator.setPackageInfo(packageConfig);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 策略配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:34</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configStrategy</span><span class="params">(AutoGenerator generator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">//全局大写命名</span></span><br><span class="line">        <span class="comment">//strategy.setCapitalMode(true)</span></span><br><span class="line">        <span class="comment">//全局下划线命名</span></span><br><span class="line">        <span class="comment">//strategy.setDbColumnUnderline(true)</span></span><br><span class="line">        <span class="comment">//表的前缀</span></span><br><span class="line">        strategy.setTablePrefix(PREFIX);</span><br><span class="line">        <span class="comment">//表名下划线转为驼峰</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//字段名下划线转为驼峰</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//生成哪些表</span></span><br><span class="line">        strategy.setInclude(TABLES);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置模版引擎的类型 freemarker使用ftl文件，velocity使用vm文件</span></span><br><span class="line">        generator.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line"><span class="comment">//        generator.setTemplateEngine(new VelocityTemplateEngine());</span></span><br><span class="line">        <span class="comment">//是否使用lombok</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置是否restful控制器</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置布尔类型字段是否去掉is前缀</span></span><br><span class="line">        strategy.setEntityBooleanColumnRemoveIsPrefix(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 自定义实体父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperEntityClass(&quot;com.baomidou.demo.TestEntity&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义实体，公共字段</span></span><br><span class="line">        <span class="comment">// strategy.setSuperEntityColumns(new String[] &#123; &quot;test_id&quot;, &quot;age&quot; &#125;);</span></span><br><span class="line">        <span class="comment">// 自定义 mapper 父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperMapperClass(&quot;com.baomidou.demo.TestMapper&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义 service 父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperServiceClass(&quot;com.baomidou.demo.TestService&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义 service 实现类父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperServiceImplClass(&quot;com.baomidou.demo.TestServiceImpl&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义 controller 父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperControllerClass(&quot;com.baomidou.demo.TestController&quot;);</span></span><br><span class="line">        <span class="comment">// 【实体】是否生成字段常量（默认 false）</span></span><br><span class="line">        <span class="comment">// public static final String ID = &quot;test_id&quot;;</span></span><br><span class="line">        <span class="comment">// strategy.setEntityColumnConstant(true);</span></span><br><span class="line">        <span class="comment">// 【实体】是否为构建者模型（默认 false）</span></span><br><span class="line">        <span class="comment">// public User setName(String name) &#123;this.name = name; return this;&#125;</span></span><br><span class="line">        <span class="comment">// strategy.setEntityBuilderModel(true);</span></span><br><span class="line">        generator.setStrategy(strategy);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 自定义配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> projectPath :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:55</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cofnigCustom</span><span class="params">(AutoGenerator generator, String projectPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//自定义输出文件名 ， 如果 Entity 设置了前后缀、此处 xml 的名称会跟着发生变化</span></span><br><span class="line">                <span class="keyword">return</span> projectPath.concat(<span class="string">&quot;/src/main/resources/mapper/&quot;</span>).concat(MODULE_NAME).concat(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                        .concat(tableInfo.getEntityName()).concat(<span class="string">&quot;Mapper&quot;</span>).concat(StringPool.DOT_XML);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">       <span class="comment">/* cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录&quot;);</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        generator.setCfg(cfg);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 模版引擎配置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> generator :</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date</span> 2021/2/8 13:59</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configTemplate</span><span class="params">(AutoGenerator generator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模板引擎配置 默认是VelocityTemplateEngine</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"> </span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        generator.setTemplate(templateConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这样配置后就可右键运行生成代码了，只不过是最原始的代码，模版是官方的默认模版。</p><p>根据自己使用的模版引擎来编写模版。模版在项目中存放到resources目录下的templates目录中，如图：</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211129130453647.png" alt="image-20211129130453647"></p><h2 id="2、FastJson解析数据"><a href="#2、FastJson解析数据" class="headerlink" title="2、FastJson解析数据"></a>2、FastJson解析数据</h2><p>将获取的数据转化为JSON对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONObject jsonObject = JSONObject.parseObject(jsonStr);</span><br></pre></td></tr></table></figure><ol><li>对于暴漏的键值对可以直接通过get方法获取，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取错误日志时间</span><br><span class="line">String errDate = errorInfoObject.get(&quot;@timestamp&quot;).toString();</span><br></pre></td></tr></table></figure><ol start="2"><li>对于键值对，值仍是JSON对象的，获取后仍将类型转换为JSONObject，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取日志位置</span><br><span class="line">JSONObject logInfoObject = (JSONObject)errorInfoObject.get(&quot;log&quot;);</span><br><span class="line">JSONObject fileObject = (JSONObject)logInfoObject.get(&quot;file&quot;);</span><br><span class="line">errorLogInfo.setLogpath(fileObject.get(&quot;path&quot;).toString());</span><br></pre></td></tr></table></figure><ol start="3"><li>对于值是数组的，获取其数组对象，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取日志所在服务器ip</span><br><span class="line">JSONObject hostObject = (JSONObject)errorInfoObject.get(&quot;host&quot;);</span><br><span class="line">JSONArray ipArr = hostObject.getJSONArray(&quot;ip&quot;);</span><br><span class="line">errorLogInfo.setIpaddr(ipArr.get(0).toString());</span><br></pre></td></tr></table></figure><h2 id="3、nohup"><a href="#3、nohup" class="headerlink" title="3、nohup"></a>3、nohup</h2><h3 id="（一）作用"><a href="#（一）作用" class="headerlink" title="（一）作用"></a>（一）作用</h3><p>nohup命令用于不挂断地运行命令（关闭当前session不会中断改程序，只能通过kill等命令删除）。<br>使用nohup命令提交作业，如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 &amp; echo $! &gt; command.pid</span><br></pre></td></tr></table></figure><p>&amp;用于后台执行程序，但是关闭当前session程序也会结束</p><h3 id="（二）2-gt-amp-1-amp-详解"><a href="#（二）2-gt-amp-1-amp-详解" class="headerlink" title="（二）2&gt;&amp;1 &amp;详解"></a>（二）2&gt;&amp;1 &amp;详解</h3><p>bash中：</p><ul><li>0 代表STDIN_FILENO 标准输入（一般是键盘），</li><li>1 代表STDOUT_FILENO 标准输出（一般是显示屏，准确的说是用户终端控制台），</li><li>2 三代表STDERR_FILENO (标准错误（出错信息输出）。</li></ul><p>&gt; 直接把内容生成到指定文件，会覆盖原来文件中的内容[ls &gt; test.txt],<br>&gt;&gt; 尾部追加，不会覆盖原有内容 [ls &gt;&gt; test.txt],<br>&lt; 将指定文件的内容作为前面命令的参数[cat &lt; text.sh]</p><p><strong>2&gt;&amp;1就是用来将标准错误2重定向到标准输出1中的。此处1前面的&amp;就是为了让bash将1解释成标准输出而不是文件1。至于最后一个&amp;，则是让bash在后台执行。</strong></p><h3 id="（三）-dev-null-2-gt-amp-1"><a href="#（三）-dev-null-2-gt-amp-1" class="headerlink" title="（三）/dev/null 2&gt;&amp;1"></a>（三）/dev/null 2&gt;&amp;1</h3><p>可以把/dev/null 可以看作”黑洞”. 它等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到.<br>/dev/null 2&gt;&amp;1则表示吧标准输出和错误输出都放到这个“黑洞”，表示什么也不输出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;该功能要实现检测日志输出内容，实时摘取错误日志片段，存放数据库中~&lt;/p&gt;
&lt;p&gt;后续可进一步开发实现，错误信息分析，邮件预警等功能&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="kafka" scheme="http://example.com/tags/kafka/"/>
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
    <category term="filebeat" scheme="http://example.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>Typora配合PicGo使用七牛云实现图片云存储</title>
    <link href="http://example.com/2021/11/24/Typora%E9%85%8D%E5%90%88PicGo%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2021/11/24/Typora%E9%85%8D%E5%90%88PicGo%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%BA%91%E5%AD%98%E5%82%A8/</id>
    <published>2021-11-24T01:19:19.000Z</published>
    <updated>2021-11-29T15:41:22.505Z</updated>
    
    <content type="html"><![CDATA[<p>之前分享了《hexo搭配typora在文档中插入图片上传到github》，github作为代码存储仓库，放置图片总有些不合适，况且由于网络原因，加载效果并不是很好，因此，在这里推荐大家使用Typora+PicGO+七牛云来实现图片的云存储</p><span id="more"></span><h1 id="一、工具说明"><a href="#一、工具说明" class="headerlink" title="一、工具说明"></a>一、工具说明</h1><h2 id="1、Typora"><a href="#1、Typora" class="headerlink" title="1、Typora"></a>1、Typora</h2><p>typora大家都不陌生，是一款MarkDown语法的编辑工具，用来写笔记比较方便</p><p>具体介绍和获取方式，可以参照我的<a href="https://liuzhengkaifa.github.io/2021/11/10/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/#more">实用工具介绍</a></p><h2 id="2、PicGo"><a href="#2、PicGo" class="headerlink" title="2、PicGo"></a>2、PicGo</h2><p>PicGo是一个用于快速上传图片并获取图片 URL 链接的工具，这个工具在GitHub上是开源的，我们可以访问直接下载</p><p><a href="https://github.com/Molunerfinn/PicGo">PicGo开源GitHub点击跳转</a></p><h2 id="3、七牛云"><a href="#3、七牛云" class="headerlink" title="3、七牛云"></a>3、七牛云</h2><p>七牛云存储用来存储图片，通过typora实用PicGo实际上是将图片上传到七牛云提供的云存储服务器上，然后我们通过图片访问url就能快速访问图片</p><h1 id="二、使用操作"><a href="#二、使用操作" class="headerlink" title="二、使用操作"></a>二、使用操作</h1><h2 id="1、下载工具和七牛云注册"><a href="#1、下载工具和七牛云注册" class="headerlink" title="1、下载工具和七牛云注册"></a>1、下载工具和七牛云注册</h2><ul><li>下载<a href="https://liuzhengkaifa.github.io/2021/11/10/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/#more">Typora</a>和<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></li></ul><p>Typora进入官网下载即可，正常安装</p><p>PicGo进入GItHub网站，点击下载安装的<strong>应用</strong>，然后再新的页面下载exe可执行文件即可</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124093453034.png" alt="image-20211124093453034"></p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124093527306.png" alt="image-20211124093527306"></p><p>软件正常安装即可，需要记住安装的地址，后面需要配置使用</p><ul><li>注册七牛云账户</li></ul><p><a href="https://portal.qiniu.com/">点击跳转官网</a></p><p>注册认证完成后，在对象存储&gt;&gt;空间管理&gt;&gt;新建一个空间，后续备用</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124093850230.png" alt="image-20211124093850230"></p><h2 id="2、配置PicGo"><a href="#2、配置PicGo" class="headerlink" title="2、配置PicGo"></a>2、配置PicGo</h2><p>软件安装完成后，打开PicGo</p><p>将七牛云个人中心的 <code>AK</code> 和 <code>SK</code>，分别配置到 PicGo &gt;&gt; 图床设置&gt;&gt;七牛图床  对应位置</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124094120923.png" alt="image-20211124094120923"></p><p>然后在打开七牛云新建的空间，依次将空间名称、域名地址配到PicGo中（注意，域名配置中，需要添加http://或者https://），这里需要记一下，空间的存储区域在哪个位置，例如我的在华南。</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124094500089.png" alt="image-20211124094500089"></p><p>然后对照这张表将对应的地域简称填到PicGo的存储区域中，至此，PicGo完成配置</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124094707432.png" alt="image-20211124094707432"></p><h2 id="3、Typora配置"><a href="#3、Typora配置" class="headerlink" title="3、Typora配置"></a>3、Typora配置</h2><p>Typora依次选择格式&gt;&gt;图像&gt;&gt;全局图像设置</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124094940026.png" alt="image-20211124094940026"></p><p>在偏好设置处，先将 插入图片时改为上传图片，在上传服务设定处，选择上传服务为PicGo(app)，PicGo路径选择PicGo的安装路径</p><p>最后点击验证图片上产选项，如果成功的话至此所有配置完成。</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124095057680.png" alt="image-20211124095057680"></p><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>打开Typora,随便粘贴一张图片，看路径是否是配置的七牛云地址，以及图片是否能够正常显示。如果不能的话看看PicGo是否配置出错，例如协议是否加对了，将https://和http://切换试下。</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124095443295.png" alt="image-20211124095443295"></p><p>至此完成配置使用，大家愉快的耍起来吧~</p><h2 id="5、问题"><a href="#5、问题" class="headerlink" title="5、问题"></a>5、问题</h2><p>这是看资源加载会发现本是http的数据资源会被强制加载成https</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124103733805.png" alt="image-20211124103733805"></p><p>如果此页面图片无法正常显示，请点击<a href="https://blog.csdn.net/qq_40875577/article/details/120000269?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link">解决方案</a>：</p><p><img src="http://r31aaelmi.hn-bkt.clouddn.com/image-20211124154552264-16377401145391.png" alt="image-20211124154552264"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前分享了《hexo搭配typora在文档中插入图片上传到github》，github作为代码存储仓库，放置图片总有些不合适，况且由于网络原因，加载效果并不是很好，因此，在这里推荐大家使用Typora+PicGO+七牛云来实现图片的云存储&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习记录（一）</title>
    <link href="http://example.com/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-11-22T03:20:34.000Z</published>
    <updated>2021-11-29T06:50:58.213Z</updated>
    
    <content type="html"><![CDATA[<p>之前对MySQL也有过学习，但仅仅停留在会用的层面，下面通过这次学习，希望对MySQL有个更深入的认识</p><span id="more"></span><h1 id="一、MySQL发展历程"><a href="#一、MySQL发展历程" class="headerlink" title="一、MySQL发展历程"></a>一、MySQL发展历程</h1><h2 id="1-历史节点"><a href="#1-历史节点" class="headerlink" title="1. 历史节点"></a>1. 历史节点</h2><p>mysql发展主要有以下几个标志性节点</p><ol><li>1996年发布MySQL 1.0</li><li>2005年发布MySQL 5.0版本，这是一个里程碑意义版本，支持了Oracle的许多功能</li><li>2008年和2009年，大鱼吃小鱼，小鱼吃虾米，先后sum公司收购了MySQL AB 公司，Oracle公司收购了sun公司</li></ol><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122112418273.png" alt="image-20211122112418273"></p><p>MySQL主流分支架构</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122112950491.png" alt="image-20211122112950491"></p><h2 id="2-应用架构演变"><a href="#2-应用架构演变" class="headerlink" title="2. 应用架构演变"></a>2. 应用架构演变</h2><h3 id="（一）V1-0-单机架构"><a href="#（一）V1-0-单机架构" class="headerlink" title="（一）V1.0 单机架构"></a>（一）V1.0 单机架构</h3><p>一个小型的网站，一台数据库服务器就能够满足数据的读取和写入，一般会把所有的数据写入一个MySQL instance中</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122113421008.png" alt="image-20211122113421008"></p><h4 id="瓶颈"><a href="#瓶颈" class="headerlink" title="瓶颈"></a>瓶颈</h4><ol><li>数据量不能太大，并发访问能力弱</li><li>服务器挂点，系统就会崩溃无法访问</li></ol><h3 id="（二）主从架构"><a href="#（二）主从架构" class="headerlink" title="（二）主从架构"></a>（二）主从架构</h3><p>同步2台或多台服务器，一台M主库承担写压力，多台S子库承担读压力，对于写少读多的系统，采用主从架构能够解决数据库服务器读写压力多大的问题</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122153612805.png" alt="image-20211122153612805"></p><h4 id="瓶颈-1"><a href="#瓶颈-1" class="headerlink" title="瓶颈"></a>瓶颈</h4><p>​        数据量不能太大，对于写要求比较高的场景，写服务器超出承受</p><h3 id="（三）分库分表"><a href="#（三）分库分表" class="headerlink" title="（三）分库分表"></a>（三）分库分表</h3><p>分库分表分垂直拆分和水平拆分，垂直拆分每个库都拥有完整的数据，水平拆分每个库拥有1/n数据，</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122154500491.png" alt="image-20211122154500491"></p><p>水平拆分如何拆分、客户端请求怎么路由以及如何保持数据的一致性是个难题</p><h3 id="（四）云数据库"><a href="#（四）云数据库" class="headerlink" title="（四）云数据库"></a>（四）云数据库</h3><p>云数据库可以为公司节约成本，具有一定的优势，例如弹性扩容、便于管理，服务提供商提供详细的技术支撑</p><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122160213031.png" alt="image-20211122160213031"></p><h1 id="二、MySQL架构原理"><a href="#二、MySQL架构原理" class="headerlink" title="二、MySQL架构原理"></a>二、MySQL架构原理</h1><p><img src="/2021/11/22/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/image-20211122160856653.png" alt="image-20211122160856653"></p><p>MySQL架构自顶向下可分为网络连接层、服务层、存储引擎层、和系统文件层</p><h2 id="1、网络连接层"><a href="#1、网络连接层" class="headerlink" title="1、网络连接层"></a>1、网络连接层</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前对MySQL也有过学习，但仅仅停留在会用的层面，下面通过这次学习，希望对MySQL有个更深入的认识&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据库表结构文档生成工具</title>
    <link href="http://example.com/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</id>
    <published>2021-11-21T07:41:11.000Z</published>
    <updated>2021-11-21T08:21:22.851Z</updated>
    
    <content type="html"><![CDATA[<p>偶然间，发现了一个非常好用的项目，这个项目能够快速的将数据库表结构以文档形式导出，解决了之前项目要验收写数据库设计文档时的困扰。有了这个工具的加持，一键导出系统表结构，对快速理解项目的整体情况有很大帮助~~，有兴趣的小伙伴可以看看。</p><span id="more"></span><h1 id="一、项目来源"><a href="#一、项目来源" class="headerlink" title="一、项目来源"></a>一、项目来源</h1><p>项目来源于GItHub上的一个开源项目，作者将这个项目命名为 <code>screw</code>，含义为螺丝钉，寓意为：工具虽小，但作用很大，是开发中重要的工具</p><p>GitHub地址：<a href="https://github.com/pingfangushi/screw">点击跳转</a></p><h1 id="二、具体使用"><a href="#二、具体使用" class="headerlink" title="二、具体使用"></a>二、具体使用</h1><h2 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h2><p>新建一个Maven项目，在pom.xml文件中添加依赖，拉下相关jar包</p><p>下面示例添加了<code>mysql</code>和<code>oracle</code>两个驱动依赖，可根据项目情况自行选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.smallbun.screw&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;screw-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- HikariCP --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mysql driver--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.40&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;21.1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2、新建JAVA文件"><a href="#2、新建JAVA文件" class="headerlink" title="2、新建JAVA文件"></a>2、新建JAVA文件</h2><p>新建一个Test.java普通的java类，将代码拷贝到main方法中，导入相关jar包。</p><p>修改配置信息</p><ol><li><p>连接驱动</p><ol><li>mysql：<code>com.mysql.jdbc.Driver</code></li><li>oracle：<code>oracle.jdbc.driver.OracleDriver</code></li></ol></li><li><p>jdbcUrl</p><ol><li>mysql：<code>jdbc:mysql://127.0.0.1:3306/health?characterEncoding=UTF-8</code></li><li>oracle：<code>jdbc:oracle:thin:@xxx.xx.x.xx:1521:xxx?characterEncoding=UTF-8</code></li></ol></li><li><p>username和password</p><p>配置数据源的账号和密码</p></li><li><p>fileOutputDir</p></li></ol><p>​        配置文档输出路径地址</p><ol start="5"><li><p>fileType     </p><p>文档输出类型，默认 <code>EngineFileType.HTML</code>以网页形式输出，可以修改</p><ol><li>EngineFileType.HTML ：HTML文件    </li><li>EngineFileType.WORD：WORD文件    </li><li>EngineFileType.MD  Markdown文件    </li></ol></li><li><p>fileName</p></li></ol><p>​        输出文件名自定义修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">import cn.smallbun.screw.core.Configuration;</span><br><span class="line">import cn.smallbun.screw.core.engine.EngineConfig;</span><br><span class="line">import cn.smallbun.screw.core.engine.EngineFileType;</span><br><span class="line">import cn.smallbun.screw.core.engine.EngineTemplateType;</span><br><span class="line">import cn.smallbun.screw.core.execute.DocumentationExecute;</span><br><span class="line">import cn.smallbun.screw.core.process.ProcessConfig;</span><br><span class="line">import com.zaxxer.hikari.HikariConfig;</span><br><span class="line">import com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     文档生成</span><br><span class="line">    */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //数据源</span><br><span class="line">        HikariConfig hikariConfig = new HikariConfig();</span><br><span class="line">        hikariConfig.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        hikariConfig.setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/health?characterEncoding=UTF-8&quot;);</span><br><span class="line">        hikariConfig.setUsername(&quot;root&quot;);</span><br><span class="line">        hikariConfig.setPassword(&quot;Gepoint&quot;);</span><br><span class="line">        //设置可以获取tables remarks信息</span><br><span class="line">        hikariConfig.addDataSourceProperty(&quot;useInformationSchema&quot;, &quot;true&quot;);</span><br><span class="line">        hikariConfig.setMinimumIdle(2);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(5);</span><br><span class="line">        DataSource dataSource = new HikariDataSource(hikariConfig);</span><br><span class="line">        //生成配置</span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                //生成文件路径</span><br><span class="line">                .fileOutputDir(&quot;D:\\project\\screw\\&quot;)</span><br><span class="line">                //打开目录</span><br><span class="line">                .openOutputDir(true)</span><br><span class="line">                //文件类型</span><br><span class="line">                .fileType(EngineFileType.HTML)</span><br><span class="line">                //生成模板实现</span><br><span class="line">                .produceType(EngineTemplateType.freemarker)</span><br><span class="line">                //自定义文件名称</span><br><span class="line">                .fileName(&quot;数据库表结构文档&quot;).build();</span><br><span class="line"></span><br><span class="line">        //忽略表</span><br><span class="line">        ArrayList&lt;String&gt; ignoreTableName = new ArrayList&lt;&gt;();</span><br><span class="line">        ignoreTableName.add(&quot;test_user&quot;);</span><br><span class="line">        ignoreTableName.add(&quot;test_group&quot;);</span><br><span class="line">        //忽略表前缀</span><br><span class="line">        ArrayList&lt;String&gt; ignorePrefix = new ArrayList&lt;&gt;();</span><br><span class="line">        ignorePrefix.add(&quot;test_&quot;);</span><br><span class="line">        //忽略表后缀</span><br><span class="line">        ArrayList&lt;String&gt; ignoreSuffix = new ArrayList&lt;&gt;();</span><br><span class="line">        ignoreSuffix.add(&quot;_test&quot;);</span><br><span class="line">        ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">                //指定生成逻辑、当存在指定表、指定表前缀、指定表后缀时，将生成指定表，其余表不生成、并跳过忽略表配置</span><br><span class="line">                //根据名称指定表生成</span><br><span class="line">                .designatedTableName(new ArrayList&lt;&gt;())</span><br><span class="line">                //根据表前缀生成</span><br><span class="line">                .designatedTablePrefix(new ArrayList&lt;&gt;())</span><br><span class="line">                //根据表后缀生成</span><br><span class="line">                .designatedTableSuffix(new ArrayList&lt;&gt;())</span><br><span class="line">                //忽略表名</span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                //忽略表前缀</span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                //忽略表后缀</span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line">        //配置</span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                //版本</span><br><span class="line">                .version(&quot;1.0.0&quot;)</span><br><span class="line">                //描述</span><br><span class="line">                .description(&quot;数据库设计文档生成&quot;)</span><br><span class="line">                //数据源</span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                //生成配置</span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                //生成配置</span><br><span class="line">                .produceConfig(processConfig)</span><br><span class="line">                .build();</span><br><span class="line">        //执行生成</span><br><span class="line">        new DocumentationExecute(config).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、执行代码"><a href="#三、执行代码" class="headerlink" title="三、执行代码"></a>三、执行代码</h1><p>执行完成后，在配置的路径下即生成对应格式的文档</p><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><p><img src="/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/image-20211121161543086.png" alt="image-20211121161543086"></p><h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p><img src="/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/image-20211121161606503.png" alt="image-20211121161606503"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;偶然间，发现了一个非常好用的项目，这个项目能够快速的将数据库表结构以文档形式导出，解决了之前项目要验收写数据库设计文档时的困扰。有了这个工具的加持，一键导出系统表结构，对快速理解项目的整体情况有很大帮助~~，有兴趣的小伙伴可以看看。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>一致性Hash算法及在Nginx负载均衡策略上的应用</title>
    <link href="http://example.com/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2021-11-20T00:55:49.000Z</published>
    <updated>2021-11-20T03:07:05.193Z</updated>
    
    <content type="html"><![CDATA[<p>博文介绍了普通hash算法、一致性hash算法、一致性hash算法在Nginx负载均衡策略中的应用，文章主要来源拉钩高薪训练营相关内容+自己的理解，条理清晰，能够帮助理解hash算法到底在查询和存储过程或者是负载均衡中到底起了什么样的作用，为什么会有那么高的效率?有兴趣的小伙伴可以了解下</p><span id="more"></span><h1 id="一、普通Hash算法"><a href="#一、普通Hash算法" class="headerlink" title="一、普通Hash算法"></a>一、普通Hash算法</h1><h2 id="1、哈希算法的用处"><a href="#1、哈希算法的用处" class="headerlink" title="1、哈希算法的用处"></a>1、哈希算法的用处</h2><p>哈希算法主要用于数据查询、存储、安全加密等领域，例如Java中的HashTable,Git中的索引，MD5、SHA等</p><h2 id="2、为什么要使用Hash算法"><a href="#2、为什么要使用Hash算法" class="headerlink" title="2、为什么要使用Hash算法"></a>2、为什么要使用Hash算法</h2><p>查询效率高，hash算法设计好的话，使用hash算法查询时间复杂度能够达到n(1)，即实现一次查询。</p><h2 id="3、Hash算法到底是什么"><a href="#3、Hash算法到底是什么" class="headerlink" title="3、Hash算法到底是什么"></a>3、Hash算法到底是什么</h2><p>hash算法不是一种算法，而是<strong>一类算法</strong>。</p><p>主要都是实现：<strong>给一个任意大小的数据生成一个固定长度的数据，作为它的一个映射，一一对应</strong>。</p><p>下面通过一个最普通简单的hash算法（除留余数法）来理解下hash算法：</p><p>就是给定一个固定长度的数组，和一个数</p><p>hash算法：就是将这个数对数组长度进行求模（即求余数），得到的结果就是哈希值</p><p>那么这个数和这个哈希值就建立了一一对应的关系，将这个数即可存放在数组下标值为它的哈希值的数组中，因此，判断这个数组有没有这个值时，只需要计算出这个值的hash值，直接根据数组下标查询是否为空即可得出结论。</p><p><strong>问题</strong>：上面是最简单的hash算法，肯定会有问题出现，如多个数据通过求余数得到的结果一直，怎么都存在一个下标处，这就产生了hash冲突，解决的方法有开发寻址法，和拉链法，后面会讲到。这只是个示例，实际的hash算法要复杂很多，而且hash算法的研究一直在持续~</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120092911825.png" alt="image-20211120092911825"></p><ol><li>开发寻址法</li></ol><p>如果数据是1， 6， 7， 8，把这4个数据存储到上⾯的数组中 </p><p>开发寻址法的解决策略：</p><p>1 放进去了， 6再来的时候，向前或者向后找空闲位置存放</p><p>缺陷:</p><p>如果数组⻓度定义好了⽐如10，⻓度不能扩展，来了11个数据，不管Hash冲突不冲突，肯定存不下这么多数据 </p><ol start="2"><li>拉链法</li></ol><p>数据⻓度定义好了，怎么存储更多内容呢，算好Hash值，在数组元素存储位置放了⼀个链表  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120093204024.png" alt="image-20211120093204024"></p><p>如果Hash算法设计的⽐较好的话，那么查询效率会更接近于O(1)，如果Hash算法设计的⽐较low，那么<br>查询效率就会很低了  </p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120093237536.png" alt="image-20211120093237536" style="zoom:50%;"><p>因此，Hahs表的查询效率高不高取决于Hash算法，Hash算法能够让数据平均分布，既能够节省空间，又能够提高查询效率。Hash算法的研究是一门很高深的学问，甚至很多数学见也在研究中。</p><p>HashCode就是通过一种hash算法得出的。</p><h1 id="二、一致性哈希算法"><a href="#二、一致性哈希算法" class="headerlink" title="二、一致性哈希算法"></a>二、一致性哈希算法</h1><h2 id="1、普通Hash算法的弊端"><a href="#1、普通Hash算法的弊端" class="headerlink" title="1、普通Hash算法的弊端"></a>1、普通Hash算法的弊端</h2><p>例如Nginx自带的负载均衡策略ip_hash来说，根据IP地址的局域网段通过hash算法，将访问同一网段的客户端请求转发到同一台实现负载均衡的服务器上，虽然这样会避免session一致性问题，但是当其中一台服务器宕机了，根据求模得到的hash值便要重新计算，重新得到的hash值会将之前部分客户端请求转发到其它服务器上，从而会丢失sesssion登录信息等。</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120094829847.png" alt="image-20211120094829847"></p><p>因为搭建了集群的服务器生产情况下，后台服务器很多，访问的客户端也有很多，所以一台宕机或者新增一台服务器影响会是很大的。缩容和扩容都会存在这样的问题，大量的用户请求会被转发到其它服务器上，保存在之前服务器中的会话信息便会丢失。</p><h2 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h2><h3 id="（一）Hash算法在分布式架构中的应用场景："><a href="#（一）Hash算法在分布式架构中的应用场景：" class="headerlink" title="（一）Hash算法在分布式架构中的应用场景："></a>（一）Hash算法在分布式架构中的应用场景：</h3><p>​        hash算法在分布式集群产品中都有应用，比如分布式集群架构Redis,Hadoop,ElasticSearch，Mysql分库分表， Nginx负载均衡等 </p><h3 id="（二）应用场景归纳"><a href="#（二）应用场景归纳" class="headerlink" title="（二）应用场景归纳"></a>（二）应用场景归纳</h3><ol><li>请求的负载均衡（比如Nginx的ip_hash）</li></ol><p>Nginx的ip_hash在上面已经描述过了，虽然有弊端，但是也是实现了在客户端IP地址不变的情况下，将其发出的请求始终路由到同一台服务器上，实现会话粘滞，避免处理session共享问题</p><p>如果没有ip_hash策略，怎么实现会话粘滞</p><p>​    可以维护⼀张映射表，存储客户端IP或者sessionid与具体⽬标服务器的映射关系  </p><p>​    &lt;ip,tomcat1&gt;<br>缺点</p><ol><li>那么，在客户端很多的情况下，映射表⾮常⼤，浪费内存空间</li><li>客户端上下线，⽬标服务器上下线，都会导致重新维护映射表，映射表维护成本很大</li></ol><p>如果使⽤哈希算法，事情就简单很多，我们可以对ip地址或者sessionid进⾏计算哈希值，哈希值与服务<br>器数量进⾏取模运算，得到的值就是当前请求应该被路由到的服务器编号，如此，同⼀个客户端ip发送<br>过来的请求就可以路由到同⼀个⽬标服务器，实现会话粘滞。 </p><ol start="2"><li>分布式存储</li></ol><p>以分布式内存数据库Redis为例,集群中有redis1， redis2， redis3 三台Redis服务器那么,在进⾏数据存储时,&lt;key1,value1&gt;数据存储到哪个服务器当中呢？针对key进⾏hash处理hash(key1)%3=index, 使⽤余数index锁定存储的具体服务器节点  </p><h3 id="（三）什么是一致性Hash算法"><a href="#（三）什么是一致性Hash算法" class="headerlink" title="（三）什么是一致性Hash算法"></a>（三）什么是一致性Hash算法</h3><p>一致性hash算法的思路：</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120101023499.png" alt="image-20211120101023499"></p><p>有这样一条直线，起始从0开始，结束为2的32次方-1，这也是Integer整数的取值范围，我们把它相当于地址，我们将这样一条线弯曲闭成一个环形，这样一个圆环我们就称之为<strong>hash环</strong>，我们把服务器的ip地址或者主机名求hash值然后对应到hash环上，那么针对客户端ip地址进行hash求值，对应到环上的某个位置，然后如何确定一个客户端的请求该由那一台服务器处理呢，即可按照hash环的顺时针方向，最近的服务器即处理来自hash环上的客户端请求</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120101639305.png" alt="image-20211120101639305"></p><p>这样的话，当hash环上的服务区3宕机下线，原来请求路由到3上的客户端会被转发到服务器4，而其它客户端请求则不会收到影响，使得请求的迁移达到了最小，对客户端的影响也降低了，这样的算法对于分布式来说是非常合适的</p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120102036135.png" alt="image-20211120102036135"></p><p>增加服务器5之后，原来路由到3的部分客户端路由到新增服务器5上，对于其他客户端没有影响只是这⼀⼩部分受影响（请求的迁移达到了最⼩，这样的算法对分布式集群来说⾮常合适的，避免了⼤量请求迁移 ）  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120102153533.png" alt="image-20211120102153533"></p><ol><li>优势</li></ol><p>如前所述，每⼀台服务器负责⼀段，⼀致性哈希算法对于节点的增减都只需重定位环空间中的⼀⼩部分数据，具有较好的容错性和可扩展性。  </p><ol start="2"><li>弊端</li></ol><p>但是，⼀致性哈希算法在服务节点太少时，容易因为节点分部不均匀⽽造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，节点2只能负责⾮常⼩的⼀段，⼤量的客户端请求落在了节点1上，这就是数据（请求）倾斜问题  </p><h4 id="1、增加虚拟节点"><a href="#1、增加虚拟节点" class="headerlink" title="1、增加虚拟节点"></a>1、增加虚拟节点</h4><p>为了解决这种数据倾斜问题，⼀致性哈希算法引⼊了虚拟节点机制，即对每⼀个服务节点计算多个哈希，每个计算结果位置都放置⼀个此服务节点，称为虚拟节点  </p><p>具体做法可以在服务器ip或主机名的后⾯增加编号来实现。⽐如，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “节点1的ip#1”、 “节点1的ip#2”、 “节点1的ip#3”、 “节点2的ip#1”、 “节点2的ip#2”、 “节点2的ip#3”的哈希值，于是形成六个虚拟节点，当客户端被路由到虚拟节点的时候其实是被路由到该虚拟节点所对应的真实节点  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120102503565.png" alt="image-20211120102503565"></p><h2 id="3、手写实现简单hash算法和一致性hash算法"><a href="#3、手写实现简单hash算法和一致性hash算法" class="headerlink" title="3、手写实现简单hash算法和一致性hash算法"></a>3、手写实现简单hash算法和一致性hash算法</h2><h3 id="（一）普通hash算法实现"><a href="#（一）普通hash算法实现" class="headerlink" title="（一）普通hash算法实现"></a>（一）普通hash算法实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class GeneralHash &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1.定义客户端IP</span><br><span class="line">        String[] clients = new String[]&#123;&quot;192.168.0.1&quot;,&quot;192.168.0.2&quot;,&quot;192.168.0.3&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        //2.定义服务器数量</span><br><span class="line">        int serverCount = 5;</span><br><span class="line"></span><br><span class="line">        //使用hash(ip)%serverCount = index 根据index索引锁定应该路由到的tomcat服务器</span><br><span class="line">        for (String client:clients) &#123;</span><br><span class="line">            int client_hash = Math.abs(client.hashCode());</span><br><span class="line">            int index = client_hash%serverCount;</span><br><span class="line">            System.out.println(client+&quot;请求被转发到了服务器：&quot;+index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）一致性hash算法不带虚拟节点"><a href="#（二）一致性hash算法不带虚拟节点" class="headerlink" title="（二）一致性hash算法不带虚拟节点"></a>（二）一致性hash算法不带虚拟节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class ConsistentHashNoVirtual &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //step1 初始化：把服务器节点IP的哈希值对应到哈希环上</span><br><span class="line">        // 定义服务器ip</span><br><span class="line">        String[] tomcatServers = new String[]&#123;&quot;123.111.0.0&quot;,&quot;123.101.3.1&quot;,&quot;111.20.35.2&quot;,&quot;123.98.26.3&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        SortedMap&lt;Integer,String&gt; hashServerMap = new TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for(String tomcatServer: tomcatServers) &#123;</span><br><span class="line">            // 求出每一个ip的hash值，对应到hash环上，存储hash值与ip的对应关系</span><br><span class="line">            int serverHash = Math.abs(tomcatServer.hashCode());</span><br><span class="line">            // 存储hash值与ip的对应关系</span><br><span class="line">            hashServerMap.put(serverHash,tomcatServer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //step2 针对客户端IP求出hash值</span><br><span class="line">        // 定义客户端IP</span><br><span class="line">        String[] clients = new String[]&#123;&quot;10.78.12.3&quot;,&quot;113.25.63.1&quot;,&quot;126.12.3.8&quot;&#125;;</span><br><span class="line">        for(String client : clients) &#123;</span><br><span class="line">            int clientHash = Math.abs(client.hashCode());</span><br><span class="line">            //step3 针对客户端,找到能够处理当前客户端请求的服务器（哈希环上顺时针最近）</span><br><span class="line">            // 根据客户端ip的哈希值去找出哪一个服务器节点能够处理（）</span><br><span class="line">            SortedMap&lt;Integer, String&gt; integerStringSortedMap = hashServerMap.tailMap(clientHash);</span><br><span class="line">            if(integerStringSortedMap.isEmpty()) &#123;</span><br><span class="line">                // 取哈希环上的顺时针第一台服务器</span><br><span class="line">                Integer firstKey = hashServerMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                Integer firstKey = integerStringSortedMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三）一致性hash算法带虚拟节点"><a href="#（三）一致性hash算法带虚拟节点" class="headerlink" title="（三）一致性hash算法带虚拟节点"></a>（三）一致性hash算法带虚拟节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class ConsistentHashWithVirtual &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //step1 初始化：把服务器节点IP的哈希值对应到哈希环上</span><br><span class="line">        // 定义服务器ip</span><br><span class="line">        String[] tomcatServers = new String[]&#123;&quot;123.111.0.0&quot;,&quot;123.101.3.1&quot;,&quot;111.20.35.2&quot;,&quot;123.98.26.3&quot;&#125;;</span><br><span class="line">        SortedMap&lt;Integer,String&gt; hashServerMap = new TreeMap&lt;&gt;();</span><br><span class="line">        // 定义针对每个真实服务器虚拟出来几个节点</span><br><span class="line">        int virtaulCount = 3;</span><br><span class="line">        for(String tomcatServer: tomcatServers) &#123;</span><br><span class="line">            // 求出每一个ip的hash值，对应到hash环上，存储hash值与ip的对应关系</span><br><span class="line">            int serverHash = Math.abs(tomcatServer.hashCode());</span><br><span class="line">            // 存储hash值与ip的对应关系</span><br><span class="line">            hashServerMap.put(serverHash,tomcatServer);</span><br><span class="line"></span><br><span class="line">            // 处理虚拟节点</span><br><span class="line">            for(int i = 0; i &lt; virtaulCount; i++) &#123;</span><br><span class="line">                int virtualHash = Math.abs((tomcatServer + &quot;#&quot; + i).hashCode());</span><br><span class="line">                hashServerMap.put(virtualHash,&quot;----由虚拟节点&quot;+ i  + &quot;映射过来的请求：&quot;+ tomcatServer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //step2 针对客户端IP求出hash值</span><br><span class="line">        // 定义客户端IP</span><br><span class="line">        String[] clients = new String[]&#123;&quot;10.78.12.3&quot;,&quot;113.25.63.1&quot;,&quot;126.12.3.8&quot;&#125;;</span><br><span class="line">        for(String client : clients) &#123;</span><br><span class="line">            int clientHash = Math.abs(client.hashCode());</span><br><span class="line">            //step3 针对客户端,找到能够处理当前客户端请求的服务器（哈希环上顺时针最近）</span><br><span class="line">            // 根据客户端ip的哈希值去找出哪一个服务器节点能够处理（）</span><br><span class="line">            SortedMap&lt;Integer, String&gt; integerStringSortedMap = hashServerMap.tailMap(clientHash);</span><br><span class="line">            if(integerStringSortedMap.isEmpty()) &#123;</span><br><span class="line">                // 取哈希环上的顺时针第一台服务器</span><br><span class="line">                Integer firstKey = hashServerMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                Integer firstKey = integerStringSortedMap.firstKey();</span><br><span class="line">                System.out.println(&quot;==========&gt;&gt;&gt;&gt;客户端：&quot; + client + &quot; 被路由到服务器：&quot; + hashServerMap.get(firstKey));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Nginx负载均衡策略应用一致性哈希算法"><a href="#三、Nginx负载均衡策略应用一致性哈希算法" class="headerlink" title="三、Nginx负载均衡策略应用一致性哈希算法"></a>三、Nginx负载均衡策略应用一致性哈希算法</h1><p>ngx_http_upstream_consistent_hash 模块是⼀个负载均衡器，使⽤⼀个内部⼀致性hash算法来选择合适的后端节点。</p><p>该模块可以根据配置参数采取不同的⽅式将请求均匀映射到后端机器，</p><ol><li>consistent_hash $remote_addr：可以根据客户端ip映射</li><li>consistent_hash $request_uri：根据客户端请求的uri映射</li><li>consistent_hash $args：根据客户端携带的参数进⾏映</li></ol><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p>ngx_http_upstream_consistent_hash 模块是⼀个第三⽅模块，需要我们下载安装后使⽤  </p><p>github下载nginx⼀致性hash负载均衡模块 <a href="https://github.com/replay/ngx_http_consistent_hash">https://github.com/replay/ngx_http_consistent_hash</a>  </p><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120110523081.png" alt="image-20211120110523081"></p><h2 id="2、将下载的压缩包上传到nginx服务器，并解压"><a href="#2、将下载的压缩包上传到nginx服务器，并解压" class="headerlink" title="2、将下载的压缩包上传到nginx服务器，并解压"></a>2、将下载的压缩包上传到nginx服务器，并解压</h2><h2 id="3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令"><a href="#3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令" class="headerlink" title="3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令"></a>3）我们已经编译安装过nginx，此时进⼊当时nginx的源码⽬录，执⾏如下命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure —add-module=/root/ngx_http_consistent_hash-master</span><br><span class="line">make</span><br><span class="line">make install  </span><br></pre></td></tr></table></figure><h2 id="4）-Nginx就可以使⽤啦，在nginx-conf⽂件中配置"><a href="#4）-Nginx就可以使⽤啦，在nginx-conf⽂件中配置" class="headerlink" title="4） Nginx就可以使⽤啦，在nginx.conf⽂件中配置"></a>4） Nginx就可以使⽤啦，在nginx.conf⽂件中配置</h2><p><img src="/2021/11/20/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9C%A8Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/image-20211120110556554.png" alt="image-20211120110556554"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;博文介绍了普通hash算法、一致性hash算法、一致性hash算法在Nginx负载均衡策略中的应用，文章主要来源拉钩高薪训练营相关内容+自己的理解，条理清晰，能够帮助理解hash算法到底在查询和存储过程或者是负载均衡中到底起了什么样的作用，为什么会有那么高的效率?有兴趣的小伙伴可以了解下&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>服务器软件分类</title>
    <link href="http://example.com/2021/11/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
    <id>http://example.com/2021/11/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E7%B1%BB/</id>
    <published>2021-11-17T06:07:16.000Z</published>
    <updated>2021-11-18T10:28:02.190Z</updated>
    
    <content type="html"><![CDATA[<p>b博文主要对服务器进行分类，以及一些常用的服务器软件分类，能够帮助理解系统的部署方式等~</p><span id="more"></span><h1 id="一、相关概念"><a href="#一、相关概念" class="headerlink" title="一、相关概念"></a>一、相关概念</h1><h2 id="1、静态和动态服务"><a href="#1、静态和动态服务" class="headerlink" title="1、静态和动态服务"></a>1、静态和动态服务</h2><h3 id="静态服务"><a href="#静态服务" class="headerlink" title="静态服务"></a>静态服务</h3><p>主要是提供静态资源、不同的用户访问服务得到的资源是一摸一样的</p><h3 id="动态服务"><a href="#动态服务" class="headerlink" title="动态服务"></a>动态服务</h3><p>提供动态服务，不同用户访问得到的资源是不同的，例如后台系统，根据每个用户身份不同，返回的结果权限都是不同的</p><h2 id="2、服务器分类"><a href="#2、服务器分类" class="headerlink" title="2、服务器分类"></a>2、服务器分类</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>广义上来说，就是响应用户的需求，提供服务，当下所有的服务器软件都可以称之为web服务器软件，现在的web服务器应用层通讯协议主要是http协议，web服务器和http服务器几乎对等</p><h3 id="HTTP服务器（静态服务）"><a href="#HTTP服务器（静态服务）" class="headerlink" title="HTTP服务器（静态服务）"></a>HTTP服务器（静态服务）</h3><p>使用http协议将服务器上的资源传给客户端，侧重于静态资源的支持，可将其视为静态服务器</p><h3 id="应用服务器（动态服务）"><a href="#应用服务器（动态服务）" class="headerlink" title="应用服务器（动态服务）"></a>应用服务器（动态服务）</h3><p>一个特定应用的承载容器，运行时需要特定环境的支持，例如tomcat运行时需要java的支持，也可以称作动态服务器、动态容器等。应用服务器可以降维，当静态服务器使用，但一般不会这么用</p><h2 id="3、一些常见的服务器软件"><a href="#3、一些常见的服务器软件" class="headerlink" title="3、一些常见的服务器软件"></a>3、一些常见的服务器软件</h2><h3 id="1-Http静态服务器软件"><a href="#1-Http静态服务器软件" class="headerlink" title="1.Http静态服务器软件"></a>1.Http静态服务器软件</h3><h4 id="（一）Nginx"><a href="#（一）Nginx" class="headerlink" title="（一）Nginx"></a>（一）Nginx</h4><p>典型的静态服务器，可以做反向代理，负载均衡，一般放在最前面直面客户，和动态应用服务器例如tomcat打配合；纯C语言编写，性能贼高，内存消耗极少，稳定性也相当好，互联网公司重度使用。Nginx服务器也可以在诸如Lua脚本等辅助下做二次开发，变成一个可以提供动态服务的应用服务器，也就是大名鼎鼎的OpenRestyTengineApcheHttp Service</p><h4 id="（二）Tengine"><a href="#（二）Tengine" class="headerlink" title="（二）Tengine"></a>（二）Tengine</h4><p>阿里出品，基于Nginx服务器做的改造（加强和封装），对大流量场景做了很多高级功能，性能、稳定性优秀</p><h4 id="（三）Apache-Http-Server"><a href="#（三）Apache-Http-Server" class="headerlink" title="（三）Apache Http Server"></a>（三）Apache Http Server</h4><p>也是静态服务器，但是不如Nginx服务器</p><h4 id="（四）IIS"><a href="#（四）IIS" class="headerlink" title="（四）IIS"></a>（四）IIS</h4><p>微软开发，只能用在Windows下，是具备一定应用服务器能力的http服务器</p><h3 id="2-动态应用服务器"><a href="#2-动态应用服务器" class="headerlink" title="2.动态应用服务器"></a>2.动态应用服务器</h3><h4 id="一、轻量级动态应用服务器"><a href="#一、轻量级动态应用服务器" class="headerlink" title="一、轻量级动态应用服务器"></a>一、轻量级动态应用服务器</h4><h5 id="（一）Tomcat"><a href="#（一）Tomcat" class="headerlink" title="（一）Tomcat"></a>（一）Tomcat</h5><p>Apach出品，典型的应用服务器软件，符合Servlet标准的应用容器，也可以提供http服务，一般不会作为Http服务器去用，SpringBoot框架默认的内置服务器</p><h5 id="（二）Jetty"><a href="#（二）Jetty" class="headerlink" title="（二）Jetty"></a>（二）Jetty</h5><p>跟Tomcat是一个性质的东西，符合Servlet标准的应用容器，更加轻量</p><h5 id="（三）Undertow"><a href="#（三）Undertow" class="headerlink" title="（三）Undertow"></a>（三）Undertow</h5><p>红帽子出品，更tomcat、jetty一样也是SpringBoot框架支持的服务器，高并发时性能要优于Tomcat、Jetty</p><h4 id="二、商用的重量级服务器软件"><a href="#二、商用的重量级服务器软件" class="headerlink" title="二、商用的重量级服务器软件"></a>二、商用的重量级服务器软件</h4><h5 id="（一）JBoss"><a href="#（一）JBoss" class="headerlink" title="（一）JBoss"></a>（一）JBoss</h5><p>(从8版开始更名未WildFly):不仅仅是Servlet应用容器，更是EJB时的应用容器，整套JavaEE框架部署的解决方案</p><h5 id="（二）WebLogic"><a href="#（二）WebLogic" class="headerlink" title="（二）WebLogic"></a>（二）WebLogic</h5><p>Oracle公司出品，用于部署企业级JavaEE应用，全能型，几乎支持JavaEE所有应用规范</p><h5 id="（三）WebSphere"><a href="#（三）WebSphere" class="headerlink" title="（三）WebSphere"></a>（三）WebSphere</h5><p>IBM公司出品，支持更多JavaEE的应用规范的综合应用服务器</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;b博文主要对服务器进行分类，以及一些常用的服务器软件分类，能够帮助理解系统的部署方式等~&lt;/p&gt;</summary>
    
    
    
    <category term="服务器" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="软件" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="http://example.com/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-17T05:52:21.000Z</published>
    <updated>2021-11-18T03:15:36.218Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博文比较清晰的介绍了Nginx的相关概念和应用，主要包括动静分离、反向代理、负载均衡等相关功能实现</p><span id="more"></span><h1 id="一、Nginx基础概念理解"><a href="#一、Nginx基础概念理解" class="headerlink" title="一、Nginx基础概念理解"></a>一、Nginx基础概念理解</h1><h2 id="1、Nginx是什么"><a href="#1、Nginx是什么" class="headerlink" title="1、Nginx是什么"></a>1、Nginx是什么</h2><p>Nginx是一个高性能的HTTP和反向代理Web服务器，核心特点是占用内存少，并发能力强</p><h2 id="2、Nginx能做什么"><a href="#2、Nginx能做什么" class="headerlink" title="2、Nginx能做什么"></a>2、Nginx能做什么</h2><h3 id="（一）HTTP服务器（Web服务器）"><a href="#（一）HTTP服务器（Web服务器）" class="headerlink" title="（一）HTTP服务器（Web服务器）"></a>（一）HTTP服务器（Web服务器）</h3><p>关于服务器的分类可以参考文章</p><p>Nginx做Web服务器性能非常高，非常注重效率，能够经受高负载的考研</p><p>⽀持50000个并发连接数，不仅如此， CPU和内存的占⽤也⾮常的低， 10000个没有活动的连<br>接才占⽤2.5M的内存。  </p><h3 id="（二）反向代理服务器"><a href="#（二）反向代理服务器" class="headerlink" title="（二）反向代理服务器"></a>（二）反向代理服务器</h3><h4 id="1、正向代理"><a href="#1、正向代理" class="headerlink" title="1、正向代理"></a>1、正向代理</h4><p>​        在浏览器中配置代理服务器的相关信息，通过代理服务器访问⽬标⽹站，代理服务器收<br>到⽬标⽹站的响应之后，会把响应信息返回给我们⾃⼰的浏览器客户端  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211117143711172.png" alt="image-20211117143711172"></p><h4 id="2、反向代理"><a href="#2、反向代理" class="headerlink" title="2、反向代理"></a>2、反向代理</h4><p>​    浏览器客户端发送请求到反向代理服务器（⽐如Nginx），由反向代理服务器选择原始<br>服务器提供服务获取结果响应，最终再返回给客户端浏览器  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211117144945239.png" alt="image-20211117144945239"></p><h4 id="3、正向代理和反向代理的区别"><a href="#3、正向代理和反向代理的区别" class="headerlink" title="3、正向代理和反向代理的区别"></a>3、正向代理和反向代理的区别</h4><blockquote><p>维基百科：正向代理是客户端和其他所有服务器（重点：所有）的代理者，而反向代理是客户端和<strong>所要</strong>代理的服务器之间的代理</p></blockquote><p>解释一下：</p><p>当我们要访问google，需要一台代理服务器，只要能够连接到这台服务器的软件，就可以通过这台代理服务器器访问其他的服务器（例如goole,facebook等），这里的服务器只对客户端负责，所以称之为正向代理。</p><p>如果我们有3台服务器交由代理服务器进行反向代理，只有当客户端访问这3台服务器的时候，代理服务器才给客户端代理，也就是说代理服务器只对所代理的服务器负责，所以称之为反向代理。</p><p>总结：<strong>正向代理对客户端负责，反向代理对代理的服务器负责，一正一反。</strong></p><h3 id="（三）负载均衡服务器"><a href="#（三）负载均衡服务器" class="headerlink" title="（三）负载均衡服务器"></a>（三）负载均衡服务器</h3><p>负载均衡，当⼀个请求到来的时候（结合上图）， Nginx反向代理服务器根据请求去找到⼀个<br>原始服务器来处理当前请求，那么这叫做反向代理。那么，如果⽬标服务器有多台（⽐如上<br>图中的tomcat1， tomcat2， tomcat3…），找哪⼀个⽬标服务器来处理当前请求呢，这样⼀<br>个寻找确定的过程就叫做负载均衡。<br>⽣活中也有很多这样的例⼦，⽐如，我们去银⾏，可以处理业务的窗⼝有多个，那么我们会<br>被分配到哪个窗⼝呢到底，这样的⼀个过程就叫做负载均衡。  </p><p>负载均衡就是为了解决⾼负载的问题。  </p><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211117145049890.png" alt="image-20211117145049890"></p><h2 id="3、Nginx的特点"><a href="#3、Nginx的特点" class="headerlink" title="3、Nginx的特点"></a>3、Nginx的特点</h2><h3 id="（一）跨平台"><a href="#（一）跨平台" class="headerlink" title="（一）跨平台"></a>（一）跨平台</h3><p>Nginx可以在⼤多数类unix操作系统上编译运⾏，⽽且也有windows版本  </p><h3 id="（二）操作简单"><a href="#（二）操作简单" class="headerlink" title="（二）操作简单"></a>（二）操作简单</h3><p>Nginx的上⼿⾮常容易，配置也⽐较简单  </p><h3 id="（三）性能强"><a href="#（三）性能强" class="headerlink" title="（三）性能强"></a>（三）性能强</h3><p>⾼并发，性能好 ，稳定性也特别好，宕机概率很低  </p><h1 id="二、Nginx操作"><a href="#二、Nginx操作" class="headerlink" title="二、Nginx操作"></a>二、Nginx操作</h1><h2 id="1、Nginx的安装"><a href="#1、Nginx的安装" class="headerlink" title="1、Nginx的安装"></a>1、Nginx的安装</h2><h3 id="（一）下载"><a href="#（一）下载" class="headerlink" title="（一）下载"></a>（一）下载</h3><p>上传nginx安装包到linux服务器， nginx安装包(.tar⽂件)下载地址：  <a href="http://nginx.org/">http://nginx.org</a>  </p><h3 id="（二）安装依赖"><a href="#（二）安装依赖" class="headerlink" title="（二）安装依赖"></a>（二）安装依赖</h3><p>安装Nginx依赖， pcre、 openssl、 gcc、 zlib（推荐使⽤yum源⾃动安装）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="（三）解压安装"><a href="#（三）解压安装" class="headerlink" title="（三）解压安装"></a>（三）解压安装</h3><p>解压Nginx软件包  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.17.8.tar</span><br></pre></td></tr></table></figure><p>进⼊解压之后的⽬录 nginx-1.17.8 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.17.8</span><br></pre></td></tr></table></figure><p> 命令⾏执⾏./configure<br>命令⾏执⾏ make<br>命令⾏执⾏ make install，完毕之后在/usr/local/下会产⽣⼀个nginx⽬录  </p><p>进⼊sbin⽬录中，执⾏启动nginx命令  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">cd nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100118368.png" alt="image-20211118100118368"></p><p>然后访问服务器的80端⼝（nginx默认监听80端⼝）  </p><h3 id="（四）Nginx的主要命令"><a href="#（四）Nginx的主要命令" class="headerlink" title="（四）Nginx的主要命令"></a>（四）Nginx的主要命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nginx 启动nginx</span><br><span class="line">./nginx -s stop 终⽌nginx（当然也可以找到nginx进程号，然后使⽤kill -9 杀掉nginx进程）</span><br><span class="line">./nginx -s reload (重新加载nginx.conf配置⽂件)</span><br></pre></td></tr></table></figure><h1 id="三、核心配置文件解读"><a href="#三、核心配置文件解读" class="headerlink" title="三、核心配置文件解读"></a>三、核心配置文件解读</h1><p>Nginx的核⼼配置⽂件conf/nginx.conf包含三块内容：全局块、 events块、 http块  </p><h2 id="1、全局块"><a href="#1、全局块" class="headerlink" title="1、全局块"></a>1、全局块</h2><p>从配置⽂件开始到events块之间的内容，此处的配置影响nginx服务器整体的运⾏，⽐如worker进<br>程的数量、错误⽇志的位置等  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100354343.png" alt="image-20211118100354343"></p><h2 id="2、events块"><a href="#2、events块" class="headerlink" title="2、events块"></a>2、events块</h2><p>events块主要影响nginx服务器与⽤户的⽹络连接，⽐如worker_connections 1024，标识每个<br>workderprocess⽀持的最⼤连接数为1024  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100415321.png" alt="image-20211118100415321"></p><h2 id="3、http块"><a href="#3、http块" class="headerlink" title="3、http块"></a>3、http块</h2><p>http块是配置最频繁的部分，虚拟主机的配置，监听端⼝的配置，请求转发、反向代理、负载均衡<br>等  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100438064.png" alt="image-20211118100438064"></p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100459886.png" alt="image-20211118100459886"></p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118100520447.png" alt="image-20211118100520447"></p><h1 id="四、Nginx应用场景之反向代理"><a href="#四、Nginx应用场景之反向代理" class="headerlink" title="四、Nginx应用场景之反向代理"></a>四、Nginx应用场景之反向代理</h1><h2 id="1、需求一"><a href="#1、需求一" class="headerlink" title="1、需求一"></a>1、需求一</h2><h3 id="（一）需求描述"><a href="#（一）需求描述" class="headerlink" title="（一）需求描述"></a>（一）需求描述</h3><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105028881.png" alt="image-20211118105028881"></p><h3 id="（二）需求实现"><a href="#（二）需求实现" class="headerlink" title="（二）需求实现"></a>（二）需求实现</h3><ol><li><p>部署tomcat，保持默认监听8080端⼝  </p></li><li><p>修改nginx配置，并重新加载  </p></li><li><p>修改nginx配置  </p></li></ol><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105211960.png" alt="image-20211118105211960"></p><ol start="4"><li>重新加载nginx配置  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><ol start="5"><li>测试，访问<a href="http://111.229.248.243:9003,返回tomcat的⻚⾯">http://111.229.248.243:9003,返回tomcat的⻚⾯</a>  </li></ol><h2 id="2、需求二"><a href="#2、需求二" class="headerlink" title="2、需求二"></a>2、需求二</h2><h3 id="（一）需求描述-1"><a href="#（一）需求描述-1" class="headerlink" title="（一）需求描述"></a>（一）需求描述</h3><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105355992.png" alt="image-20211118105355992"></p><h3 id="（二）需求实现-1"><a href="#（二）需求实现-1" class="headerlink" title="（二）需求实现"></a>（二）需求实现</h3><ol><li>再部署⼀台tomcat，保持默认监听8081端⼝  </li><li>修改nginx配置，并重新加载  </li></ol><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105737970.png" alt="image-20211118105737970"></p><ol><li><p><strong>这⾥主要就是多location的使⽤，这⾥的nginx中server/location就好⽐tomcat中的 Host/Context</strong>  </p></li><li><p>location 语法如下：  </p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123; … &#125;</span><br></pre></td></tr></table></figure><p>在nginx配置⽂件中， location主要有这⼏种形式：  </p><ol><li>正则匹配 location ~ /lagou { }</li><li>不区分⼤⼩写的正则匹配 location ~* /lagou { }</li><li>匹配路径的前缀 location ^~ /lagou { }</li><li>精确匹配 location = /lagou { }</li><li>普通路径前缀匹配 location /lagou { }</li><li>优先级<br>4 &gt; 3 &gt; 2 &gt; 1 &gt; 5  </li></ol><h1 id="五、Nginx应用场景之负载均衡"><a href="#五、Nginx应用场景之负载均衡" class="headerlink" title="五、Nginx应用场景之负载均衡"></a>五、Nginx应用场景之负载均衡</h1><h2 id="1、需求描述"><a href="#1、需求描述" class="headerlink" title="1、需求描述"></a>1、需求描述</h2><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118105825319.png" alt="image-20211118105825319"></p><h2 id="2、Nginx负载均衡策略"><a href="#2、Nginx负载均衡策略" class="headerlink" title="2、Nginx负载均衡策略"></a>2、Nginx负载均衡策略</h2><h3 id="（一）轮询"><a href="#（一）轮询" class="headerlink" title="（一）轮询"></a>（一）轮询</h3><p>默认策略，每个请求按时间顺序逐⼀分配到不同的服务器，如果某⼀个服务器下线，能⾃动剔除  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream lagouServer&#123;</span><br><span class="line">server 111.229.248.243:8080;</span><br><span class="line">server 111.229.248.243:8082;</span><br><span class="line">&#125;</span><br><span class="line">location /abc &#123;</span><br><span class="line">proxy_pass http://lagouServer/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）weight-权重"><a href="#（二）weight-权重" class="headerlink" title="（二）weight 权重"></a>（二）weight 权重</h3><p>weight代表权重，默认每⼀个负载的服务器都为1，权重越⾼那么被分配的请求越多（⽤于服务器<br>性能不均衡的场景）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream lagouServer&#123;</span><br><span class="line">server 111.229.248.243:8080 weight=1;</span><br><span class="line">server 111.229.248.243:8082 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三）ip-hash"><a href="#（三）ip-hash" class="headerlink" title="（三）ip_hash"></a>（三）ip_hash</h3><p>每个请求按照ip的hash结果分配，每⼀个客户端的请求会固定分配到同⼀个⽬标服务器处理，可<br>以解决session问题  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream lagouServer&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">    server 111.229.248.243:8080;</span><br><span class="line">server 111.229.248.243:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、Nginx应⽤场景之动静分离"><a href="#六、Nginx应⽤场景之动静分离" class="headerlink" title="六、Nginx应⽤场景之动静分离"></a>六、Nginx应⽤场景之动静分离</h1><h2 id="1、思想"><a href="#1、思想" class="headerlink" title="1、思想"></a>1、思想</h2><p>动静分离就是讲动态资源和静态资源的请求处理分配到不同的服务器上，⽐较经典的组合就是<br>Nginx+Tomcat架构（Nginx处理静态资源请求， Tomcat处理动态资源请求），</p><p>那么其实之前的讲解中， Nginx反向代理⽬标服务器Tomcat，我们能看到⽬标服务器ROOT项⽬的index.jsp，这本身就是Tomcat在处理动态资源请求了。  </p><p>所以，我们只需要配置静态资源访问即可。  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110231915.png" alt="image-20211118110231915"></p><h2 id="2、Nginx配置"><a href="#2、Nginx配置" class="headerlink" title="2、Nginx配置"></a>2、Nginx配置</h2><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110300079.png" alt="image-20211118110300079"></p><h1 id="七、Nginx底层进程机制剖析"><a href="#七、Nginx底层进程机制剖析" class="headerlink" title="七、Nginx底层进程机制剖析"></a>七、Nginx底层进程机制剖析</h1><p>Nginx启动后，以daemon多进程⽅式在后台运⾏，包括⼀个Master进程和多个Worker进程， Master<br>进程是领导，是⽼⼤， Worker进程是⼲活的⼩弟。  </p><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110348867.png" alt="image-20211118110348867"></p><h2 id="1、Master进程"><a href="#1、Master进程" class="headerlink" title="1、Master进程"></a>1、Master进程</h2><p>主要是管理worker进程，⽐如：  </p><ol><li>接收外界信号向各worker进程发送信号(./nginx -s reload)  </li><li>监控worker进程的运⾏状态，当worker进程异常退出后Master进程会⾃动重新启动新的<br>worker进程等  </li></ol><h2 id="2、Worker进程"><a href="#2、Worker进程" class="headerlink" title="2、Worker进程"></a>2、Worker进程</h2><p>worker进程具体处理⽹络请求。多个worker进程之间是对等的，他们同等竞争来⾃客户端的请<br>求， <strong>各进程互相之间是独⽴的</strong>。⼀个请求，只可能在⼀个worker进程中处理，⼀个worker进程，<br>不可能处理其它进程的请求。 worker进程的个数是可以设置的，⼀般设置与机器cpu核数⼀致。  </p><h2 id="3、Nginx进程模型示意图如下"><a href="#3、Nginx进程模型示意图如下" class="headerlink" title="3、Nginx进程模型示意图如下"></a>3、Nginx进程模型示意图如下</h2><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110524659.png" alt="image-20211118110524659"></p><h4 id="一、以-nginx-s-reload-来说明nginx信号处理这部分-："><a href="#一、以-nginx-s-reload-来说明nginx信号处理这部分-：" class="headerlink" title="一、以 ./nginx -s reload 来说明nginx信号处理这部分  ："></a>一、以 ./nginx -s reload 来说明nginx信号处理这部分  ：</h4><ol><li>以 ./nginx -s reload 来说明nginx信号处理这部分  </li><li>尝试配置（⽐如修改了监听端⼝，那就尝试分配新的监听端⼝）  </li><li>尝试成功则使⽤新的配置，新建worker进程  </li><li>新建成功，给旧的worker进程发送关闭消息  </li><li>旧的worker进程收到信号会继续服务，直到把当前进程接收到的请求处理完毕后关闭<br>所以reload之后worker进程pid是发⽣了变化的  </li></ol><p><img src="/2021/11/17/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211118110627187.png" alt="image-20211118110627187"></p><h4 id="二、worker进程处理请求部分的说明"><a href="#二、worker进程处理请求部分的说明" class="headerlink" title="二、worker进程处理请求部分的说明"></a>二、worker进程处理请求部分的说明</h4><p>例如，我们监听9003端⼝，⼀个请求到来时，如果有多个worker进程，那么每个worker进程都有<br>可能处理这个链接。  </p><ol><li>master进程创建之后，会建⽴好需要监听的的socket，然后从master进程再fork出多个<br>worker进程。所以，所有worker进程的监听描述符listenfd在新连接到来时都变得可读。  </li><li>nginx使⽤互斥锁来保证只有⼀个workder进程能够处理请求，拿到互斥锁的那个进程注册<br>listenfd读事件，在读事件⾥调⽤accept接受该连接，然后解析、处理、返回客户端  </li></ol><h4 id="三、nginx多进程模型好处"><a href="#三、nginx多进程模型好处" class="headerlink" title="三、nginx多进程模型好处"></a>三、nginx多进程模型好处</h4><ol><li>每个worker进程都是独⽴的，不需要加锁，节省开销  </li><li>每个worker进程都是独⽴的，互不影响，⼀个异常结束，其他的照样能提供服务  </li><li>多进程模型为reload热部署机制提供了⽀撑  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇博文比较清晰的介绍了Nginx的相关概念和应用，主要包括动静分离、反向代理、负载均衡等相关功能实现&lt;/p&gt;</summary>
    
    
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库SQL速查</title>
    <link href="http://example.com/2021/11/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%9A%E7%94%A8%E5%9C%BA%E6%99%AFsql%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/11/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%9A%E7%94%A8%E5%9C%BA%E6%99%AFsql%E8%AE%B0%E5%BD%95/</id>
    <published>2021-11-16T02:02:13.000Z</published>
    <updated>2021-12-11T03:44:03.479Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常用的sql，便于以后查询实用</p><span id="more"></span><h1 id="一、查询"><a href="#一、查询" class="headerlink" title="一、查询"></a>一、查询</h1><h2 id="1、查询一张表根据某个字段值有几条重复数据："><a href="#1、查询一张表根据某个字段值有几条重复数据：" class="headerlink" title="1、查询一张表根据某个字段值有几条重复数据："></a>1、查询一张表根据某个字段值有几条重复数据：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 字段名 <span class="keyword">having</span> <span class="built_in">count</span>(<span class="number">1</span>)<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="2、查询表主键名称"><a href="#2、查询表主键名称" class="headerlink" title="2、查询表主键名称"></a>2、查询表主键名称</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user_cons_columns t where t.table_name = &#x27;[表名]&#x27;</span><br></pre></td></tr></table></figure><h2 id="3、查询表结构以及注释"><a href="#3、查询表结构以及注释" class="headerlink" title="3、查询表结构以及注释"></a>3、查询表结构以及注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.获取表字段字典</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">t.COLUMN_NAME <span class="keyword">as</span> &quot;字段名&quot;,</span><br><span class="line">decode(c.COMMENTS, <span class="keyword">null</span>, <span class="string">&#x27; &#x27;</span>, c.COMMENTS) <span class="keyword">as</span> &quot;含义&quot;,</span><br><span class="line">decode(t.DATA_TYPE, <span class="string">&#x27;TIMESTAMP(6)&#x27;</span>, t.DATA_TYPE, <span class="string">&#x27;NUMBER&#x27;</span>, (t.DATA_TYPE <span class="operator">||</span> <span class="string">&#x27;(&#x27;</span> <span class="operator">||</span> t.DATA_PRECISION <span class="operator">||</span> <span class="string">&#x27;)&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;DATE&#x27;</span>, t.DATA_TYPE, (t.DATA_TYPE <span class="operator">||</span> <span class="string">&#x27;(&#x27;</span> <span class="operator">||</span> t.CHAR_LENGTH <span class="operator">||</span> <span class="string">&#x27;)&#x27;</span>)) <span class="keyword">as</span> &quot;长度&quot;,</span><br><span class="line"><span class="comment">-- t.DATA_TYPE || &#x27;(&#x27; || t.CHAR_LENGTH || &#x27;)&#x27; as &quot;类型(长度)&quot;,</span></span><br><span class="line"><span class="comment">--  t.CHAR_LENGTH as &quot;字段长度&quot;,</span></span><br><span class="line">t.NULLABLE <span class="keyword">AS</span> &quot;是否为空&quot;</span><br><span class="line"><span class="keyword">from</span> USER_TAB_COLUMNS t <span class="keyword">join</span> USER_COL_COMMENTS c <span class="keyword">on</span> c.TABLE_NAME <span class="operator">=</span> t.TABLE_NAME <span class="keyword">and</span> t.COLUMN_NAME <span class="operator">=</span> c.COLUMN_NAME</span><br><span class="line"><span class="keyword">where</span> c.TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;SK_COLLECT_INFO&#x27;</span> <span class="comment">--表名应该大写  </span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t.COLUMN_ID;</span><br></pre></td></tr></table></figure><h2 id="4、查看锁表情况及处理"><a href="#4、查看锁表情况及处理" class="headerlink" title="4、查看锁表情况及处理"></a>4、查看锁表情况及处理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select b.owner,b.object_name,a.session_id,a.locked_mode from v$locked_object a,dba_objects b where b.object_id = a.object_id;</span><br><span class="line"></span><br><span class="line">select b.username,b.sid,b.serial#,logon_time,b.MACHINE from v$locked_object a,v$session b where a.session_id = b.sid order by b.logon_time;</span><br><span class="line"></span><br><span class="line">-- 清除会话，解锁 两个参数分别为：sid 和 serial</span><br><span class="line">alter system kill session&#x27;5637,62753&#x27;;</span><br></pre></td></tr></table></figure><h1 id="二、增加"><a href="#二、增加" class="headerlink" title="二、增加"></a>二、增加</h1><h2 id="1、增加主键"><a href="#1、增加主键" class="headerlink" title="1、增加主键"></a>1、增加主键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add primary key ([字段名1],[字段名2],...)  --重建主键</span><br><span class="line">alter table 表名 add constraint [主键约束名]  primary key ([字段名1],[字段名2],...) --重建主键约束</span><br></pre></td></tr></table></figure><h2 id="2、新增字段"><a href="#2、新增字段" class="headerlink" title="2、新增字段"></a>2、新增字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add (字段名 VARCHAR2(500) null);</span><br><span class="line">comment on column 表名.字段名 is &#x27;二维码链接地址&#x27;;</span><br></pre></td></tr></table></figure><h1 id="三、修改"><a href="#三、修改" class="headerlink" title="三、修改"></a>三、修改</h1><h2 id="1、修改表字段属性"><a href="#1、修改表字段属性" class="headerlink" title="1、修改表字段属性"></a>1、修改表字段属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name modify (col_name nvarchar2(20));</span><br></pre></td></tr></table></figure><h2 id="2、修改字段名称"><a href="#2、修改字段名称" class="headerlink" title="2、修改字段名称"></a>2、修改字段名称</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name rename column now_col_name to NEW_col_name;</span><br></pre></td></tr></table></figure><h1 id="四、删除"><a href="#四、删除" class="headerlink" title="四、删除"></a>四、删除</h1><h2 id="1、删除主键"><a href="#1、删除主键" class="headerlink" title="1、删除主键"></a>1、删除主键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table [表名] drop primary key --有主键无主键约束名的情形</span><br><span class="line">alter table [表名] drop constraint [主键约束名] --有主键约束名的情形</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些常用的sql，便于以后查询实用&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="SQL" scheme="http://example.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>多线程学习记录（一）</title>
    <link href="http://example.com/2021/11/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/11/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-11-15T10:54:10.000Z</published>
    <updated>2021-11-18T12:41:03.890Z</updated>
    
    <content type="html"><![CDATA[<p>以往学习多线程总是很零碎，不写就忘，然后一段时间又要翻各种资料，就打算最近写一写多线程内容，当然自己可能了解的都是基础，记录的话呢还是准备以实战为主，理论为辅</p><span id="more"></span><h1 id="一、概念理解"><a href="#一、概念理解" class="headerlink" title="一、概念理解"></a>一、概念理解</h1><h3 id="1-进程："><a href="#1-进程：" class="headerlink" title="1. 进程："></a>1. 进程：</h3><p>进程是资源分配的最小单位，是程序的一次执行过程，或是正在运行的一个程序</p><h3 id="2-线程："><a href="#2-线程：" class="headerlink" title="2. 线程："></a>2. 线程：</h3><p>线程是CPU调度的最小单位，是一个程序内部的一条执行路径，是进程中可独立执行的子任务</p><p>同一个进程中的线程共享该进程申请到的资源</p><h3 id="3-任务"><a href="#3-任务" class="headerlink" title="3.任务"></a>3.任务</h3><p>任务task是一个相对的概念，把线程比作员工的话，任务就是线程要完成的工作，一个文件可以算一个任务，文件中的多个记录也可以算一个任务，多个文件也可以算一个任务</p><h3 id="3-并行、并发"><a href="#3-并行、并发" class="headerlink" title="3. 并行、并发"></a>3. 并行、并发</h3><p>并行：多个任务在同一时间范围内被执行，这些任务往往不是顺序执行的，而是交替执行的</p><p>并发：多个任务在同一时刻被执行</p><h3 id="4-线程上下文切换"><a href="#4-线程上下文切换" class="headerlink" title="4. 线程上下文切换"></a>4. 线程上下文切换</h3><h3 id="5-线程安全"><a href="#5-线程安全" class="headerlink" title="5. 线程安全"></a>5. 线程安全</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;以往学习多线程总是很零碎，不写就忘，然后一段时间又要翻各种资料，就打算最近写一写多线程内容，当然自己可能了解的都是基础，记录的话呢还是准备以实战为主，理论为辅&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建java开发环境</title>
    <link href="http://example.com/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2021-11-13T09:15:16.000Z</published>
    <updated>2021-11-14T17:20:23.101Z</updated>
    
    <content type="html"><![CDATA[<p>每次换电脑或者换环境开发都需要重新搭建一套java开发环境，如果有一个脚本我们点一下就能装好这一套环境是不是很nice呢~</p><span id="more"></span><h1 id="一、概念理解"><a href="#一、概念理解" class="headerlink" title="一、概念理解"></a>一、概念理解</h1><h2 id="1、首先我们要明确下通用的一套java环境包括那些："><a href="#1、首先我们要明确下通用的一套java环境包括那些：" class="headerlink" title="1、首先我们要明确下通用的一套java环境包括那些："></a>1、首先我们要明确下通用的一套java环境包括那些：</h2><ol><li>jdk: 这里选择使用最多的1.8版本。这里我们要明白，我们装jdk最后输出的不过就是一个文件夹，里面有java编译运行工具、jre虚拟机环境、依赖 的jar包等。所以我们直接拷贝过来一个这样的目录也是丝毫没有问题的。</li><li>maven: 我们下载解压出来就是一个文件目录</li><li>tomcat: 同样下载解压也是一个文件目录</li></ol><h2 id="2、在开搞前理解下环境变量和classpath的含义和区别"><a href="#2、在开搞前理解下环境变量和classpath的含义和区别" class="headerlink" title="2、在开搞前理解下环境变量和classpath的含义和区别"></a>2、在开搞前理解下环境变量和classpath的含义和区别</h2><h3 id="一、Path环境变量"><a href="#一、Path环境变量" class="headerlink" title="一、Path环境变量"></a>一、Path环境变量</h3><p>这么简单理解吧，我们想要找一个文件，是不是要一层一层找到它所在的文件夹下然后进去才能找到它，现在我们把它所在的文件夹路径配置到<code>Path</code>中，那么我们就可在任意目录下都能直接操作这个文件夹下的文件或者工具。</p><p>你想要是我们使用<code>jdk</code>中<code>bin</code>目录下的<code>javac</code>编译工具，我们把它的上级文件夹路径配到<code>Path</code>中，那么我们在任意目录下都能用<code>javac</code>和它同目录下的工具不是很方便嘛。换而言之，我们不配有什么影响吗？虽然没有，但是编译只能在<code>bin</code>这个目录下操作不觉得很麻烦吗，并且现在的编译器像<code>Eclipse</code>安装前都必须要求配置好环境变量</p><h3 id="二、classpath环境变量"><a href="#二、classpath环境变量" class="headerlink" title="二、classpath环境变量"></a>二、classpath环境变量</h3><p>classpath和path环境变量有什么区别呢，首先我们明白path是让指定目录下的文件在任意目录下可用，那么我们知道java在编写代码时肯定会用到一些jdk自带的工具类，我们的代码依赖这样的jar包，这个时候将我们所依赖的jar包也配置成在任意目录下可导入，是很有意义的，不然这一系列路径开发起来别提多难受了。简单理解</p><p>path暴漏的时工具，classpath暴漏的是代码编写所依赖的jar包</p><h2 id="3、那我们需要配置哪些东西呢"><a href="#3、那我们需要配置哪些东西呢" class="headerlink" title="3、那我们需要配置哪些东西呢"></a>3、那我们需要配置哪些东西呢</h2><ol><li>java的path环境变量</li><li>java的classpath环境变量</li><li>maven的path环境变量</li></ol><h1 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h1><h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><p>首先我们准备这样一套文件，tomcat不需要配置环境变量，因此脚本并不需要对其进行操作</p><p><img src="/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20211113180621148.png" alt="image-20211113180621148"></p><h2 id="2、编写脚本"><a href="#2、编写脚本" class="headerlink" title="2、编写脚本"></a>2、编写脚本</h2><ol><li>新建<strong>java开发环境搭建（管理员运行）.bat</strong>脚本，注意脚本和三个文件目录在同一级别下，并且jdk和maven文件夹进去后bin目录就在里面</li></ol><p>也可以替换不同的jdk和maven版本，替换文件夹后，修改<code>JdkFilePath</code>和<code>MavenFilePath</code>两个参数即可，值为文件夹名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:step1</span><br><span class="line">cd /d %~dp0</span><br><span class="line">set currentPATH=%PATH%</span><br><span class="line">set currentDir=%cd%</span><br><span class="line">::只需要修改这两个参数即可</span><br><span class="line">set JdkFilePath=jdk1.8.0_162</span><br><span class="line">set MavenFilePath=apache-maven-3.8.1</span><br></pre></td></tr></table></figure><ol start="2"><li>脚本执行的核心操作也就是对环境变量的操作，具体为：</li></ol><p>使用<code>wmic</code> 指令，对<code>JAVA_HOME</code>、<code>MAVEN_HOME</code>、<code>CLASSPATH</code>三条变量先删除，再新建</p><p><img src="/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20211113184028661.png" alt="image-20211113184028661"></p><ol start="3"><li>然后判断Path变量有无配置JAVA_HOME、MAVEN_HOME，如果配置了就不用再操作，未配置则添加</li></ol><p><img src="/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20211113184207955.png" alt="image-20211113184207955"></p><ol start="4"><li>因为操作涉及到环境变量的修改，所以需要重启电脑，将在完成指令的30s后重启</li></ol><p><img src="/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20211113184428829.png" alt="image-20211113184428829"></p><ol start="5"><li>注意：脚本涉及环境变量的修改，执行时一定要使用管理员权限执行</li></ol><p><img src="/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20211113182856443.png" alt="image-20211113182856443"></p><ol start="6"><li>重启后，执行版本查看，发现已经修改成功</li></ol><p><img src="/2021/11/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20211113183355567.png" alt="image-20211113183355567"></p><h1 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h1><p>其实这个脚本没有什么别的操作，就是对环境变量的修改，还是蛮简单的，将这个文件夹打个包，传到云端，随去随用不是很方便吗~</p><p><a href="java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E7%AE%A1%E7%90%86%E5%91%98%E8%BF%90%E8%A1%8C%EF%BC%89.bat">脚本点击下载</a></p><p>源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">cls</span><br><span class="line"><span class="built_in">echo</span> **********************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>     一   键   配   置   开   发   环   境</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>       安装请按任意键，退出直接关闭窗口</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> **********************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">:step1</span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line"><span class="built_in">set</span> currentPATH=%PATH%</span><br><span class="line"><span class="built_in">set</span> currentDir=%<span class="built_in">cd</span>%</span><br><span class="line">::只需要修改这两个参数即可</span><br><span class="line"><span class="built_in">set</span> JdkFilePath=jdk1.8.0_162</span><br><span class="line"><span class="built_in">set</span> MavenFilePath=apache-maven-3.8.1</span><br><span class="line"></span><br><span class="line">:step2</span><br><span class="line"><span class="built_in">set</span> developDir=%currentDir%</span><br><span class="line"><span class="built_in">echo</span> %developDir%</span><br><span class="line">goto step4</span><br><span class="line"></span><br><span class="line">:step4</span><br><span class="line">wmic ENVIRONMENT <span class="built_in">where</span> <span class="string">&quot;name=&#x27;JAVA_HOME&#x27;&quot;</span> delete</span><br><span class="line">wmic ENVIRONMENT create name=<span class="string">&quot;JAVA_HOME&quot;</span>,username=<span class="string">&quot;&lt;system&gt;&quot;</span>,VariableValue=<span class="string">&quot;%developDir%\%JdkFilePath%&quot;</span></span><br><span class="line">wmic ENVIRONMENT <span class="built_in">where</span> <span class="string">&quot;name=&#x27;MAVEN_HOME&#x27;&quot;</span> delete</span><br><span class="line">wmic ENVIRONMENT create name=<span class="string">&quot;MAVEN_HOME&quot;</span>,username=<span class="string">&quot;&lt;system&gt;&quot;</span>,VariableValue=<span class="string">&quot;%developDir%\%MavenFilePath%&quot;</span></span><br><span class="line">wmic ENVIRONMENT <span class="built_in">where</span> <span class="string">&quot;name=&#x27;CLASSPATH&#x27;&quot;</span> delete</span><br><span class="line">wmic ENVIRONMENT create name=<span class="string">&quot;CLASSPATH&quot;</span>,username=<span class="string">&quot;&lt;system&gt;&quot;</span>,VariableValue=<span class="string">&quot;.;%%JAVA_HOME%%\lib\toos.jar;%%JAVA_HOME%%\lib\dt.jar&quot;</span></span><br><span class="line"><span class="built_in">echo</span> JAVA_HOME:%developDir%\%JdkFilePath%</span><br><span class="line"><span class="built_in">echo</span> MAVEN_HOME:%developDir%\%MavenFilePath%</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">goto step7</span><br><span class="line"></span><br><span class="line">:step7</span><br><span class="line">wmic ENVIRONMENT <span class="built_in">where</span> <span class="string">&quot;name=&#x27;Path&#x27;&quot;</span> get VariableValue|findstr /i /c:<span class="string">&quot;%%JAVA_HOME%%\bin&quot;</span>&gt;nul&amp;&amp;(goto step5)  </span><br><span class="line"><span class="built_in">echo</span> PATH环境变量中未添加: %JAVA_HOME%\bin </span><br><span class="line">wmic ENVIRONMENT <span class="built_in">where</span> <span class="string">&quot;name=&#x27;Path&#x27; and username=&#x27;&lt;system&gt;&#x27;&quot;</span> <span class="built_in">set</span> VariableValue=<span class="string">&quot;%currentPATH%;%%JAVA_HOME%%\bin&quot;</span></span><br><span class="line"><span class="built_in">set</span> currentPATH=%currentPATH%;%%JAVA_HOME%%\bin</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line">:step5</span><br><span class="line"><span class="built_in">echo</span> JAVA_HOME PATH中已添加</span><br><span class="line">wmic ENVIRONMENT <span class="built_in">where</span> <span class="string">&quot;name=&#x27;Path&#x27;&quot;</span> get VariableValue|findstr /i /c:<span class="string">&quot;%%MAVEN_HOME%%\bin&quot;</span>&gt;nul&amp;&amp;(goto step6)  </span><br><span class="line"><span class="built_in">echo</span> PATH环境变量中未添加: %MAVEN_HOME%\bin </span><br><span class="line">wmic ENVIRONMENT <span class="built_in">where</span> <span class="string">&quot;name=&#x27;Path&#x27; and username=&#x27;&lt;system&gt;&#x27;&quot;</span> <span class="built_in">set</span> VariableValue=<span class="string">&quot;%currentPATH%;%%MAVEN_HOME%%\bin&quot;</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line">:step6</span><br><span class="line"><span class="built_in">echo</span> MAVEN_HOME PATH中已添加</span><br><span class="line"></span><br><span class="line">:step8</span><br><span class="line"><span class="built_in">echo</span> 电脑将在30秒内重启，请做好保存工作，按任意键继续...</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">shutdown -r -t 30</span><br><span class="line">:<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span>.</span><br><span class="line">:end</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次换电脑或者换环境开发都需要重新搭建一套java开发环境，如果有一个脚本我们点一下就能装好这一套环境是不是很nice呢~&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="bat" scheme="http://example.com/tags/bat/"/>
    
    <category term="脚本" scheme="http://example.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>编写脚本一键部署发布博文（二）</title>
    <link href="http://example.com/2021/11/13/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2021/11/13/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-11-13T03:32:29.000Z</published>
    <updated>2021-11-14T17:52:02.526Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇一键发布脚本写好了，但是感觉还是不够方便，所以又进行了一番优化，优化的点主要有以下几方面</p><ol><li>脚本支持<strong>新增博文</strong>功能，只需输入要新建的文章名称，<strong>自动创建博客文章</strong>，<strong>并且会自动运行</strong><code>typora</code>编辑器打开这篇新增博文</li><li><strong>支持重复</strong><code>clean</code>、<code>generate</code>，有时候一次clean编译会由于文件正在使用或者其他原因没有成功，这时我们肯定不希望脚本就此停止了，而是再解决完问题后在这次执行中继续<code>clean</code>,编译</li><li><strong>支持本地运行</strong>，可以通过输入选项来开启本地预览</li><li>支持<strong>单独部署</strong>到<code>GitHub</code>上，解决上一个博客每次部署前都会clean编译问题,有时并不需要</li><li>支持部署到<code>GitHub</code>后的同时，开启本地预览</li></ol><p>哈哈哈~~至此，是不是觉得这个脚本功能还是挺全的</p><span id="more"></span>    <h1 id="一、脚本整体架构"><a href="#一、脚本整体架构" class="headerlink" title="一、脚本整体架构"></a>一、脚本整体架构</h1><ol><li>脚本采用类似Java中Switch-Case的语法，通过输入的指令来进行对应功能执行</li></ol><p><img src="/2021/11/13/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%BA%8C%EF%BC%89/image-20211113113033319.png" alt="image-20211113113033319"></p><ol start="2"><li>脚本可复用性提高，只需要修改几个参数即可实现拿来即用，几个参数均放置在脚本内容上方</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">::此处配置编译器路径，自定义调整</span><br><span class="line">set idePath=&quot;D:\installsoftware\Typora\Typora&quot;</span><br><span class="line"></span><br><span class="line">::此处配置编译器名称，搭配上一条调整</span><br><span class="line">set ideName=&quot;Typora.exe&quot;</span><br><span class="line"></span><br><span class="line">::博客根目录</span><br><span class="line">set blogRootPath=&quot;D:\blog&quot;</span><br><span class="line"></span><br><span class="line">::博文所在目录</span><br><span class="line">set blogSrcPath=&quot;%blogRootPath%\source\_posts&quot;</span><br></pre></td></tr></table></figure><h1 id="二、具体功能"><a href="#二、具体功能" class="headerlink" title="二、具体功能"></a>二、具体功能</h1><h2 id="1、新增博文"><a href="#1、新增博文" class="headerlink" title="1、新增博文"></a>1、新增博文</h2><p>核心代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">::新建博文并编辑</span><br><span class="line">:step4</span><br><span class="line">set /p name=input name:</span><br><span class="line">echo name:%name%</span><br><span class="line">echo please wait</span><br><span class="line">call hexo new post %name%</span><br><span class="line">call start /d &quot;%idePath%&quot; %ideName% &quot;%blogSrcPath%\%name%.md&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><ol><li>主要是接收一个博文名称，执行hexo new &lt;name&gt; 指令新增博文</li><li>使用<code>start</code>指令运行typora可执行文件打开这篇已创建的博文</li></ol><h2 id="2、单独部署到GitHub"><a href="#2、单独部署到GitHub" class="headerlink" title="2、单独部署到GitHub"></a>2、单独部署到GitHub</h2><p>这个功能没有什么，就是输入指令，然后运行了对应的<code>hexo -d</code> 指令</p><h2 id="3、可重复clean-编译"><a href="#3、可重复clean-编译" class="headerlink" title="3、可重复clean 编译"></a>3、可重复clean 编译</h2><p>哈哈哈，这地方取了个巧，就是在<code>clean</code>,<code>generate</code> 之后，使用goto指令再次指向功能菜单那一步骤</p><h2 id="4、可单独本地预览"><a href="#4、可单独本地预览" class="headerlink" title="4、可单独本地预览"></a>4、可单独本地预览</h2><p>这…可不就是把第二步拿来替换了个指令嘛<code>hexo s</code></p><h1 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h1><p>整体看上去没什么技术含量，实际上确实没有，哈哈哈，只是把功能做了个整合。有兴趣的朋友可以试一试哈哈哈</p><p><a href="hexoopt.bat">完成版脚本下载点击</a></p><p>源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">cls</span><br><span class="line"><span class="built_in">echo</span> **********************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>       hexo  新  增 - 预  览 - 发   布       </span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>       安装请按任意键，退出直接关闭窗口</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> **********************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">::此处配置编译器路径，自定义调整</span><br><span class="line"><span class="built_in">set</span> idePath=<span class="string">&quot;D:\installsoftware\Typora\Typora&quot;</span></span><br><span class="line">::此处配置编译器名称，搭配上一条调整</span><br><span class="line"><span class="built_in">set</span> ideName=<span class="string">&quot;Typora.exe&quot;</span></span><br><span class="line"></span><br><span class="line">::博客根目录</span><br><span class="line"><span class="built_in">set</span> blogRootPath=<span class="string">&quot;D:\blog&quot;</span></span><br><span class="line">::博文所在目录</span><br><span class="line"><span class="built_in">set</span> blogSrcPath=<span class="string">&quot;%blogRootPath%\source\_posts&quot;</span></span><br><span class="line"></span><br><span class="line">::切换到博客根目录</span><br><span class="line"><span class="built_in">cd</span> /d %blogRootPath%</span><br><span class="line"></span><br><span class="line">:step1</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> C:新建博文并编辑</span><br><span class="line"><span class="built_in">echo</span> R:重新clean并构建</span><br><span class="line"><span class="built_in">echo</span> S:本地预览</span><br><span class="line"><span class="built_in">echo</span> D:部署到GitHub</span><br><span class="line"><span class="built_in">echo</span> E:结束执行</span><br><span class="line"><span class="built_in">echo</span> A:部署到GitHub后开启本地预览</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">set</span> /p o=请选择以下操作?(C R S D E A):</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%o%&quot;</span>==<span class="string">&quot;c&quot;</span> goto c</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%o%&quot;</span>==<span class="string">&quot;r&quot;</span> goto r</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%o%&quot;</span>==<span class="string">&quot;s&quot;</span> goto s</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%o%&quot;</span>==<span class="string">&quot;d&quot;</span> goto d</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%o%&quot;</span>==<span class="string">&quot;e&quot;</span> goto e</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%o%&quot;</span>==<span class="string">&quot;a&quot;</span> goto a</span><br><span class="line"></span><br><span class="line">goto step1</span><br><span class="line">:d</span><br><span class="line">call hexo d</span><br><span class="line"><span class="built_in">echo</span>  部署到GitHub上完成...</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:e</span><br><span class="line"><span class="built_in">echo</span> 脚本执行结束！</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:s</span><br><span class="line">call hexo s</span><br><span class="line"><span class="built_in">echo</span>  本地启动完成...预览地址：http://localhost:4000/</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:A</span><br><span class="line">call hexo d</span><br><span class="line"><span class="built_in">echo</span> 部署到GitHub上完成...</span><br><span class="line">call hexo s</span><br><span class="line"><span class="built_in">echo</span> 本地启动完成...预览地址：http://localhost:4000/</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:C</span><br><span class="line">goto step4</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:R</span><br><span class="line">goto step2</span><br><span class="line"></span><br><span class="line">::clean</span><br><span class="line">:step2</span><br><span class="line"><span class="built_in">echo</span> Please <span class="built_in">wait</span></span><br><span class="line">call hexo clean</span><br><span class="line"><span class="built_in">echo</span> clean清除完成...</span><br><span class="line"></span><br><span class="line">::generate</span><br><span class="line">:step3</span><br><span class="line">call hexo g</span><br><span class="line"><span class="built_in">echo</span> generate 构建完成...</span><br><span class="line">goto step1</span><br><span class="line"></span><br><span class="line">::新建博文并编辑</span><br><span class="line">:step4</span><br><span class="line"><span class="built_in">set</span> /p name=input name:</span><br><span class="line"><span class="built_in">echo</span> name:%name%</span><br><span class="line"><span class="built_in">echo</span> please <span class="built_in">wait</span></span><br><span class="line">call hexo new post %name%</span><br><span class="line">call start /d <span class="string">&quot;%idePath%&quot;</span> %ideName% <span class="string">&quot;%blogSrcPath%\%name%.md&quot;</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h1 id="四、后续优化"><a href="#四、后续优化" class="headerlink" title="四、后续优化"></a>四、后续优化</h1><p>本次优化实现了执行完hexo d部署静态文件后，执行了上传博客源文件的步骤，这样保证不经博文是最新的，博客的源文件也是最新的，换个电脑拉下来即可接着写内容，实现效果</p><p><img src="/2021/11/13/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%BA%8C%EF%BC%89/image-20211115015102520.png" alt="image-20211115015102520"></p><p>修改部分内容如下，需要的可以改在脚本上即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">:d</span><br><span class="line">call hexo d</span><br><span class="line">echo **********************************************     </span><br><span class="line">echo.</span><br><span class="line">echo       部署到GitHub上完成</span><br><span class="line">echo.</span><br><span class="line">echo **********************************************</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交博客源文件&quot;</span><br><span class="line">git push origin hexoSrc</span><br><span class="line">echo **********************************************     </span><br><span class="line">echo.</span><br><span class="line">echo       提交博客源文件完成</span><br><span class="line">echo.</span><br><span class="line">echo **********************************************</span><br><span class="line">pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇一键发布脚本写好了，但是感觉还是不够方便，所以又进行了一番优化，优化的点主要有以下几方面&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;脚本支持&lt;strong&gt;新增博文&lt;/strong&gt;功能，只需输入要新建的文章名称，&lt;strong&gt;自动创建博客文章&lt;/strong&gt;，&lt;strong&gt;并且会自动运行&lt;/strong&gt;&lt;code&gt;typora&lt;/code&gt;编辑器打开这篇新增博文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持重复&lt;/strong&gt;&lt;code&gt;clean&lt;/code&gt;、&lt;code&gt;generate&lt;/code&gt;，有时候一次clean编译会由于文件正在使用或者其他原因没有成功，这时我们肯定不希望脚本就此停止了，而是再解决完问题后在这次执行中继续&lt;code&gt;clean&lt;/code&gt;,编译&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持本地运行&lt;/strong&gt;，可以通过输入选项来开启本地预览&lt;/li&gt;
&lt;li&gt;支持&lt;strong&gt;单独部署&lt;/strong&gt;到&lt;code&gt;GitHub&lt;/code&gt;上，解决上一个博客每次部署前都会clean编译问题,有时并不需要&lt;/li&gt;
&lt;li&gt;支持部署到&lt;code&gt;GitHub&lt;/code&gt;后的同时，开启本地预览&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哈哈哈~~至此，是不是觉得这个脚本功能还是挺全的&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="bat" scheme="http://example.com/tags/bat/"/>
    
    <category term="脚本" scheme="http://example.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>bat批处理脚本学习</title>
    <link href="http://example.com/2021/11/13/bat%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/11/13/bat%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-12T23:01:51.000Z</published>
    <updated>2021-11-15T01:30:47.174Z</updated>
    
    <content type="html"><![CDATA[<p>windows使用中，当我们经常要进行一系列重复操作时，就可以考虑编写一个批处理脚本来简化批量化处理。批处理（Batch）往往以<code>.bat</code>结尾，其作用嘛：无非就是能够连续执行多条命令</p><span id="more"></span><h1 id="一、语法了解"><a href="#一、语法了解" class="headerlink" title="一、语法了解"></a>一、语法了解</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><h3 id="（一）bat文件变量的赋值"><a href="#（一）bat文件变量的赋值" class="headerlink" title="（一）bat文件变量的赋值"></a>（一）bat文件变量的赋值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set num=10</span><br><span class="line">set name=xiaomin</span><br></pre></td></tr></table></figure><h3 id="（二）bat文件变量的使用"><a href="#（二）bat文件变量的使用" class="headerlink" title="（二）bat文件变量的使用"></a>（二）bat文件变量的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo %num%</span><br><span class="line">echo %name%</span><br></pre></td></tr></table></figure><h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h2><h3 id="1、echo"><a href="#1、echo" class="headerlink" title="1、echo"></a>1、echo</h3><ol><li>ECHO [ON | OFF] 打开回显或关闭回显功能。</li></ol><p>一般bat文件第一行都是@echo off,即关闭回显功能</p><p>echo off 代表这行后面的命令执行时都不再输出显示命令本身，@表示显示其后面的命令，对该行生效，所以搭配起来就是脚本执行不显示命令行本身</p><ol start="2"><li>另外echo具备输出和换行的功能</li></ol><img src="/2021/11/13/bat%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/image-20211114191146740.png" alt="image-20211114191146740" style="zoom: 67%;"><h3 id="2、pause"><a href="#2、pause" class="headerlink" title="2、pause"></a>2、pause</h3><p>会暂停批处理的执行，并在屏幕上显示请按任意键继续…的提示，等待用户按任意键后继续</p><p>一般用来让用户考虑是否继续执行，不执行的话关掉命令窗口即可</p><h3 id="3、cls"><a href="#3、cls" class="headerlink" title="3、cls"></a>3、cls</h3><p>清屏，执行到该命令时之前的输出结果将会clean掉，这个clean并不是删除了什么，只是将最新行置于窗口顶部，其实再往上翻记录还是有的</p><h3 id="4、call"><a href="#4、call" class="headerlink" title="4、call"></a>4、call</h3><p>call [要执行的脚本路径+脚本名称] [要传递的参数]</p><p>调用另一个批处理程序，并且不终止父批处理程序</p><p>在执行完另一个脚本后仍然返回到当前的批处理程序继续执行</p><h3 id="5、REM"><a href="#5、REM" class="headerlink" title="5、REM"></a>5、REM</h3><p>语法：Rem Message…</p><p>(小技巧：用::代替rem)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">::下面一行会输出hello</span><br><span class="line">echo hello</span><br></pre></td></tr></table></figure><h3 id="6、-p"><a href="#6、-p" class="headerlink" title="6、/p"></a>6、/p</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set /p filename=请输入文件名称</span><br><span class="line">echo %filename%</span><br></pre></td></tr></table></figure><p><img src="/2021/11/13/bat%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/image-20211114201532547.png" alt="image-20211114201532547"></p><h3 id="7、if"><a href="#7、if" class="headerlink" title="7、if"></a>7、if</h3><p>if 表示将判断是否符合规定的条件，从而决定执行不同的命令。有三种格式:</p><ol><li>语法: if [not] “参数” == “字符串” 待执行的命令</li></ol><p>参数如果等于(not表示不等，下同)指定的字符串，则条件成立，运行命令，否则运行下一句。(注意是两个等号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">if &quot;111&quot;==&quot;222&quot; echo 111==222</span><br><span class="line">echo ================</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><ol start="2"><li>语法: if [not] exist [路径]文件名 待执行的命令</li></ol><p><img src="/2021/11/13/bat%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/image-20211114193227622.png" alt="image-20211114193227622"></p><ol start="3"><li>语法: if [not] errorlevel &lt;数字&gt; 待执行的命令</li></ol><p>很多DOS程序在运行结束后会返回一个数字值用来表示程序运行的结果(或者状态)，称为错误码errorlevel或称返回码。</p><p>常见的返回码为0、1。通过if errorlevel命令可以判断程序的返回值，根据不同的返回值来决定执行不同的命令。</p><p>**if-else if-else **</p><p>注意：输出的括号和条件之间要留有空格，如果要换行else ，在if行尾需要加上<code>^</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set num=1</span><br><span class="line">if %num%==0 (echo 111) else if %num%==2 (echo 222)^</span><br><span class="line">else (echo 333)</span><br><span class="line">echo %num%</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">333</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="8、goto"><a href="#8、goto" class="headerlink" title="8、goto"></a>8、goto</h3><p>语法：goto label (label是参数，指定所要转向的批处理程序中的行。)</p><p>指定跳转到标签行，找到标签行后，程序将处理从下一行开始的命令。</p><p>label标签的名字可以随便起，但是最好是有意义的，字母前必须加个冒号“:”来表示这个字母是标签。</p><p>goto命令就是根据这个冒号来寻找下一步跳到到那里。经常与 if 配合使用，根据不同的条件来执行不同的命令组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">GOTO step3</span><br><span class="line">:step2</span><br><span class="line">echo step2</span><br><span class="line"></span><br><span class="line">:step3</span><br><span class="line">echo step3</span><br><span class="line"></span><br><span class="line">:step4</span><br><span class="line">echo step4</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/2021/11/13/bat%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/image-20211114202536708.png" alt="image-20211114202536708"></p><h3 id="9、-dp0"><a href="#9、-dp0" class="headerlink" title="9、%~dp0"></a>9、%~dp0</h3><p><code>%~dp0</code>代表脚本当前路径，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo %~dp0</span><br><span class="line">输出的结果：D:\kuaijie\</span><br><span class="line"></span><br><span class="line">%~dp0 “d”为Drive的缩写，即为驱动器，磁盘、“p”为Path缩写，即为路径，目录</span><br><span class="line"></span><br><span class="line">cd %~dp0 ：进入bat脚本所在目录</span><br><span class="line"></span><br><span class="line">cd %~dp0bin\ ：进入bat脚本所在目录的bin目录</span><br></pre></td></tr></table></figure><h3 id="10、脚本间参数传递"><a href="#10、脚本间参数传递" class="headerlink" title="10、脚本间参数传递"></a>10、脚本间参数传递</h3><p>%[1-9]表示参数，参数是指在运行批处理文件时在文件名后加的以空格(或者Tab)分隔的字符串。</p><p>变量可以从%0到%9，%0表示批处理命令本身，其它参数字符串用 %1 到 %9 顺序表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如我执行：</span><br><span class="line">call test.bat c1 2 3 4 5 6 7 8 9 a s</span><br><span class="line"></span><br><span class="line">在test.bat脚本内部，$0=test.bat;$1=c1;$9=9;$19=c19</span><br></pre></td></tr></table></figure><h3 id="11、start"><a href="#11、start" class="headerlink" title="11、start"></a>11、start</h3><p>调用外部程序，所有的DOS命令和命令行程序都可由start命令来调用</p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /d &quot;D:\software&quot; typora.ext &quot;bat.md&quot;</span><br></pre></td></tr></table></figure><p>就可以运行d盘software目录下的typora.exe编辑器打开bat.md文件了</p><h3 id="12、choice"><a href="#12、choice" class="headerlink" title="12、choice"></a>12、choice</h3><p>CHOICE [/C choices] [/N] [/CS] [/T timeout /D choice] [/M text]</p><p>描述:<br>    该工具允许用户从选择列表选择一个项目并返回所选项目的索引。</p><p>参数列表:<br>   /C    choices       指定要创建的选项列表。默认列表是 “YN”。</p><p>   /M    text          指定提示之前要显示的消息。如果没有指定，工具只显示提示。</p><p>   /?                  显示此帮助消息。</p><p>示例：</p><p><img src="/2021/11/13/bat%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/image-20211114195932969.png" alt="image-20211114195932969"></p><h3 id="13、exit-命令"><a href="#13、exit-命令" class="headerlink" title="13、exit 命令"></a>13、exit 命令</h3><p>结束程序。即时是被调用的程序，结束后也不会返回原程序</p><h1 id="二、小技巧"><a href="#二、小技巧" class="headerlink" title="二、小技巧"></a>二、小技巧</h1><h3 id="1、实现pause功能，自定义输出内容"><a href="#1、实现pause功能，自定义输出内容" class="headerlink" title="1、实现pause功能，自定义输出内容"></a>1、实现pause功能，自定义输出内容</h3><p>在bat文件最后实用set /p tmp=操作结束，请按回车键退出… 代替 pause</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set /p tmp=操作结束，请按回车键退出...</span><br></pre></td></tr></table></figure><h3 id="2、在脚本中添加chcp-65001解决中文乱码"><a href="#2、在脚本中添加chcp-65001解决中文乱码" class="headerlink" title="2、在脚本中添加chcp 65001解决中文乱码"></a>2、在脚本中添加chcp 65001解决中文乱码</h3><p>在脚本中文前方添加<code>chcp 65001</code>，cmd的编码格式就是UTF-8,仅当前脚本执行有效</p><p>或者把bat文件的编码改为ANSI，UTF-8在win10我这儿会中文显示乱码</p><h3 id="3、进入指定盘符"><a href="#3、进入指定盘符" class="headerlink" title="3、进入指定盘符"></a>3、进入指定盘符</h3><p>cmd窗口中我们往往要先输入d:切换到D盘</p><p>然后再cd D:\blog进入D盘下目录，其实我们可以通过cd加参数 /d来直接进入任意盘符下目录</p><p>cd /d d:\blog</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>bat脚本功能很多，这里只列了最最基本的一些使用，在后续实际需求中，我们可以思考用bat脚本如何提高自己的效率……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;windows使用中，当我们经常要进行一系列重复操作时，就可以考虑编写一个批处理脚本来简化批量化处理。批处理（Batch）往往以&lt;code&gt;.bat&lt;/code&gt;结尾，其作用嘛：无非就是能够连续执行多条命令&lt;/p&gt;</summary>
    
    
    
    <category term="脚本" scheme="http://example.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="bat" scheme="http://example.com/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>编写脚本一键部署发布博文 (一)</title>
    <link href="http://example.com/2021/11/12/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/11/12/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-11-12T15:27:56.000Z</published>
    <updated>2021-11-14T17:20:23.194Z</updated>
    
    <content type="html"><![CDATA[<p>事情起因是每次修改了博文都要执行 <code>hexo clean</code> <code>hexo g</code> <code>hexo d</code>一套来清除，重新编译，部署完成一套操作，这对于追求极客效率的开发来说必是要想办法优化的，怎么做编写一个一键部署的脚本呢，考虑到之前还没怎么编写过bat批处理脚本，本次借着时间来尝试一下</p><span id="more"></span>    <h1 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h1><p>1、执行脚本可以确认执行或者关掉窗口不执行，确认执行将依次执行<code>hexo clean</code> 和 <code>hexo g</code>指令</p><p>2、弹出指示询问是否部署到Github上，输入yes将部署，输入no，提示自己选择了不部署，然后关闭窗口即可</p><p>3、在任意界面能够执行脚本，这个之前分享的技巧可以结合，具体请移步通过<a href="https://liuzhengkaifa.github.io/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/#more">指令快速打开软件</a></p><h1 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h1><h2 id="1、实现一"><a href="#1、实现一" class="headerlink" title="1、实现一"></a>1、实现一</h2><ol><li>先是编写确认，主要是<code>pause</code>指令，作用是会在dos窗口显示 请按任意键继续. . . 如果想反悔不执行了直接关闭dos窗口即可</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cls</span><br><span class="line">echo **********************************************</span><br><span class="line">echo.</span><br><span class="line">echo     一   键   布   署   发   布      </span><br><span class="line">echo.</span><br><span class="line">echo       安装请按任意键，退出直接关闭窗口</span><br><span class="line">echo.</span><br><span class="line">echo **********************************************</span><br><span class="line">echo.</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><ol start="2"><li>依次执行<code>hexo clean</code> 和 <code>hexo g</code>指令，注意使用到了call指令，放在了hexo指令的前面，主要作用是执行完指令后任然返回到当前窗口，可以继续执行下面指令，不然一些指令本身带退出指令，就会造成下面指令无法执行。具体作用还请各位各自查询之~~~</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">:step1</span><br><span class="line">cd /d d:\blog</span><br><span class="line">echo Please wait</span><br><span class="line">call hexo clean</span><br><span class="line">echo  clean finished...</span><br><span class="line"></span><br><span class="line">:step2</span><br><span class="line">call hexo g</span><br><span class="line">cls</span><br><span class="line">echo  generate finished...</span><br></pre></td></tr></table></figure><ol start="3"><li>询问是否部署到<code>GitHub</code>，这里主要是做了一个输入判断</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">:step3</span><br><span class="line">set /p o=要部署到GitHub上吗? (YES NO):</span><br><span class="line">if /i &quot;%o%&quot;==&quot;yes&quot; goto yes</span><br><span class="line">if /i &quot;%o%&quot;==&quot;no&quot; goto no</span><br><span class="line">goto step3</span><br><span class="line">:yes</span><br><span class="line">call hexo d</span><br><span class="line">echo  deploy to GitHub finished...</span><br><span class="line">pause</span><br><span class="line">:no</span><br><span class="line">echo 你选择了不部署！</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h2 id="3、实现三"><a href="#3、实现三" class="headerlink" title="3、实现三"></a>3、实现三</h2><p>根据我们之前的技巧，只需要将我们编写的脚本放到加入环境变量的文件夹中即可</p><p><img src="/2021/11/12/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/image-20211113083252420.png" alt="image-20211113083252420"></p><p>然后快捷键<code>WIn+R</code>调出运行框，输入<code>hexocgd.bat</code>确定即可</p><p><img src="/2021/11/12/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/image-20211113083548405.png" alt="image-20211113083548405"></p><h2 id="三、实现效果"><a href="#三、实现效果" class="headerlink" title="三、实现效果"></a>三、实现效果</h2><p><img src="/2021/11/12/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/image-20211113084544330.png" alt="image-20211113084544330"></p><p>选择no,不部署</p><p><img src="/2021/11/12/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/image-20211113092540550.png" alt="image-20211113092540550"></p><p>选择yes,部署</p><p><img src="/2021/11/12/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/image-20211113092614842.png" alt="image-20211113092614842"></p><h1 id="四、脚本获取"><a href="#四、脚本获取" class="headerlink" title="四、脚本获取"></a>四、脚本获取</h1><p><a href="hexocgd.bat">hexocdg.bat脚本获取</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cls</span><br><span class="line">echo **********************************************</span><br><span class="line">echo.</span><br><span class="line">echo     一   键   布   署   发   布      </span><br><span class="line">echo.</span><br><span class="line">echo       安装请按任意键，退出直接关闭窗口</span><br><span class="line">echo.</span><br><span class="line">echo **********************************************</span><br><span class="line">echo.</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">:step1</span><br><span class="line">cd /d d:\blog</span><br><span class="line">echo Please wait</span><br><span class="line">call hexo clean</span><br><span class="line">echo  clean finished...</span><br><span class="line"></span><br><span class="line">:step2</span><br><span class="line">call hexo g</span><br><span class="line">echo  generate finished...</span><br><span class="line"></span><br><span class="line">:step3</span><br><span class="line">set /p o=要部署到GitHub上吗? (YES NO):</span><br><span class="line">if /i &quot;%o%&quot;==&quot;yes&quot; goto yes</span><br><span class="line">if /i &quot;%o%&quot;==&quot;no&quot; goto no</span><br><span class="line">goto step3</span><br><span class="line">:yes</span><br><span class="line">call hexo d</span><br><span class="line">echo  deploy to GitHub finished...</span><br><span class="line">pause</span><br><span class="line">:no</span><br><span class="line">echo 你选择了不部署！</span><br><span class="line">pause</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情起因是每次修改了博文都要执行 &lt;code&gt;hexo clean&lt;/code&gt; &lt;code&gt;hexo g&lt;/code&gt; &lt;code&gt;hexo d&lt;/code&gt;一套来清除，重新编译，部署完成一套操作，这对于追求极客效率的开发来说必是要想办法优化的，怎么做编写一个一键部署的脚本呢，考虑到之前还没怎么编写过bat批处理脚本，本次借着时间来尝试一下&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="效率" scheme="http://example.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="bat" scheme="http://example.com/tags/bat/"/>
    
    <category term="脚本" scheme="http://example.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>更换电脑后转移hexo博客</title>
    <link href="http://example.com/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-11-12T14:02:42.000Z</published>
    <updated>2021-11-15T01:36:21.622Z</updated>
    
    <content type="html"><![CDATA[<p>刚了解hexo的时候就在考虑换电脑怎么转移博客，偶然机会看到了好朋友的博客，感觉很有帮助，然后也在这边做个记录，冲冲博客数量吧，哈哈哈哈~</p><p>毕竟只是有限，只能做个搬运工<a href="https://small-brilliant.github.io/2021/03/12/%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86%E6%88%91%E7%9A%84Bolg%E6%80%8E%E4%B9%88%E5%8A%9E/">好朋友的博客</a>；博客搞得相当好，有兴趣可以收藏哈哈哈哈~</p><span id="more"></span><h1 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h1><p>备份的大致思路就是</p><ol><li>在原有静态文件的GIt仓库新建一个分支，克隆到本地，然后本地在这个分支的管控下删除所有内容后提交，这样就相当于有了一个干净的分支</li><li>把博客的文件目录复制过来，然后再删除复制过来的版本信息，提交后push到远程分支</li><li>新电脑安装node.js，hexo后拉下该分支，使用该分支开发</li></ol><h1 id="二、具体步骤"><a href="#二、具体步骤" class="headerlink" title="二、具体步骤"></a>二、具体步骤</h1><h2 id="1、建立一个新的分支hexoSrc"><a href="#1、建立一个新的分支hexoSrc" class="headerlink" title="1、建立一个新的分支hexoSrc"></a>1、建立一个新的分支hexoSrc</h2><h4 id="（一）GitHub进入到hexo项目里"><a href="#（一）GitHub进入到hexo项目里" class="headerlink" title="（一）GitHub进入到hexo项目里"></a>（一）GitHub进入到hexo项目里</h4><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211112221829134.png" alt="image-20211112221829134"></p><h4 id="（二）新建-分支"><a href="#（二）新建-分支" class="headerlink" title="（二）新建 分支"></a>（二）新建 分支</h4><p>点击master按钮，在弹出的框内输入新的分支名称，例如我的起名<strong>hexoSrc</strong></p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211112222236357.png" alt="image-20211112222236357" style="zoom: 67%;"><h2 id="2、将原有的博客内容push到新分支上"><a href="#2、将原有的博客内容push到新分支上" class="headerlink" title="2、将原有的博客内容push到新分支上"></a>2、将原有的博客内容push到新分支上</h2><h4 id="（一）在任意目录下打开Git-Bash命令窗口，克隆新分支内容"><a href="#（一）在任意目录下打开Git-Bash命令窗口，克隆新分支内容" class="headerlink" title="（一）在任意目录下打开Git Bash命令窗口，克隆新分支内容"></a>（一）在任意目录下打开Git Bash命令窗口，克隆新分支内容</h4><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211112222828591.png" alt="image-20211112222828591"></p><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211112223130553.png" alt="image-20211112223130553"></p><h4 id="（二）清楚拉下来的分支内容提交，然后拷贝一份源文件提交"><a href="#（二）清楚拉下来的分支内容提交，然后拷贝一份源文件提交" class="headerlink" title="（二）清楚拉下来的分支内容提交，然后拷贝一份源文件提交"></a>（二）清楚拉下来的分支内容提交，然后拷贝一份源文件提交</h4><ol><li>第一次新拉下来分支是<code>master</code>，这是我们需要切换到我们创建的新分支上去</li></ol><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211112223510668.png" alt="image-20211112223510668"></p><ol start="2"><li>执行git <code>checkout -b</code> &lt;新分支名称&gt; &lt;远程分支&gt; 切换到新分支</li></ol><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211112225520915.png" alt="image-20211112225520915"></p><ol start="3"><li>删除除去.git目录外所有信息，并提交</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;删除该分支内容，准备放源文件&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ol start="4"><li>上传源文件。将我们之前写博客的文件夹里面的所有文件复制过来，<strong>除了</strong><code>.deploy_git</code>。<strong>如果你有自定义的主题的话</strong>，一定要删除主题文件中的<code>.git</code>文件夹，因为<code>git</code>不能嵌套上传。然后在这个文件夹打开<code>git bash</code>。输入下面命令，就上传了。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;上传博客源文件&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211112230449539.png" alt="image-20211112230449539"></p><h4 id="（三）github将新建的分支hexoSrc设置为默认分支"><a href="#（三）github将新建的分支hexoSrc设置为默认分支" class="headerlink" title="（三）github将新建的分支hexoSrc设置为默认分支"></a>（三）github将新建的分支hexoSrc设置为默认分支</h4><p>依次点击 settings&gt;&gt;Branches&gt;&gt;switch</p><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211115013154223.png" alt="image-20211115013154223"></p><p>在弹出的框内选择新建的分支hexoSrc,点击update</p><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211115013227999.png" alt="image-20211115013227999"></p><h4 id="（四）将博客源码纳入git版本控制"><a href="#（四）将博客源码纳入git版本控制" class="headerlink" title="（四）将博客源码纳入git版本控制"></a>（四）将博客源码纳入git版本控制</h4><p>我们可以在一个空文件夹执行克隆操作，拉下来一份之前提交下来的源码，将文件夹下的.git拷贝到我们现在博客的根目录下即可</p><p>因为博客静态文件在配置里设置的提交分支master,所以我们本地保持分支状态和默认分支一样为hexoSrc即可</p><p><img src="/2021/11/12/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E8%BD%AC%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/image-20211115014102204.png" alt="image-20211115014102204"></p><p>我们在执行完hexo clean 、hexo g、hexo d后即可通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交博客源文件&quot;</span><br><span class="line">git push origin hexoSrc</span><br></pre></td></tr></table></figure><p>来完成源码的上传</p><h2 id="3、新电脑环境使用新分支继续博客编写"><a href="#3、新电脑环境使用新分支继续博客编写" class="headerlink" title="3、新电脑环境使用新分支继续博客编写"></a>3、新电脑环境使用新分支继续博客编写</h2><ol><li>安装<code>git</code>和<code>node.js</code></li><li>设置<code>git</code>全局邮箱和用户名</li><li>新电脑生成公钥，将公钥配置到Github上</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>安装<code>hexo</code>但是不需要初始化。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><ol start="4"><li>然后进入克隆到的文件夹。安装环境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone XXX.git</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="5"><li>验证</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ol start="6"><li>然后就可以开始写你的新博客了。每次写完都要把源文件上传一下。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;xxxx&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure><ol start="7"><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;刚了解hexo的时候就在考虑换电脑怎么转移博客，偶然机会看到了好朋友的博客，感觉很有帮助，然后也在这边做个记录，冲冲博客数量吧，哈哈哈哈~&lt;/p&gt;
&lt;p&gt;毕竟只是有限，只能做个搬运工&lt;a href=&quot;https://small-brilliant.github.io/2021/03/12/%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86%E6%88%91%E7%9A%84Bolg%E6%80%8E%E4%B9%88%E5%8A%9E/&quot;&gt;好朋友的博客&lt;/a&gt;；博客搞得相当好，有兴趣可以收藏哈哈哈哈~&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>通过指令快速打开软件</title>
    <link href="http://example.com/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/"/>
    <id>http://example.com/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/</id>
    <published>2021-11-11T09:48:50.000Z</published>
    <updated>2021-11-14T17:20:23.245Z</updated>
    
    <content type="html"><![CDATA[<p>每次桌面打开一堆页面，再想要去打开一个新的软件，如何不用返回屏幕也不用触碰鼠标快速秒开软件呢，</p><span id="more"></span><h1 id="一、建立文件夹"><a href="#一、建立文件夹" class="headerlink" title="一、建立文件夹"></a>一、建立文件夹</h1><ol><li><p>首先在任意位置建个文件夹</p><p><img src="/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/image-20211111175928832.png" alt="image-20211111175928832"></p></li></ol><h1 id="二、将文件目录配到环境变量中"><a href="#二、将文件目录配到环境变量中" class="headerlink" title="二、将文件目录配到环境变量中"></a>二、将文件目录配到环境变量中</h1><ol><li>点击桌面此电脑 右击 选择属性</li><li>点击高级系统设置，弹出页面点击环境变量</li></ol><p><img src="/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/image-20211111180102457.png" alt="image-20211111180102457"></p><ol start="3"><li>选中Path然后点解编辑</li></ol><p><img src="/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/image-20211111180233166.png" alt="image-20211111180233166"></p><ol start="4"><li>点击新建，将新建的文件夹路径配置进去，然后点击确定完成操作</li></ol><p><img src="/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/image-20211111180406382.png" alt="image-20211111180406382"></p><h1 id="三、存放快捷方式"><a href="#三、存放快捷方式" class="headerlink" title="三、存放快捷方式"></a>三、存放快捷方式</h1><p><strong>将一些常用的软件快捷方式按照自己习惯命名放到新建的文件夹中</strong></p><img src="/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/image-20211111180543035.png" alt="image-20211111180543035" style="zoom:67%;"><p><strong>这样在任意界面都可以通过快捷键Win+R调出左下角运行输入框</strong></p><p><img src="/2021/11/11/%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6/image-20211111180706062.png" alt="image-20211111180706062"></p><p><strong>输入自己命名的快捷方式（直接输过的敲一个字母就会带出来）回车边立即打开相应软件</strong></p><p>是不是相当nice~~~~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次桌面打开一堆页面，再想要去打开一个新的软件，如何不用返回屏幕也不用触碰鼠标快速秒开软件呢，&lt;/p&gt;</summary>
    
    
    
    <category term="效率" scheme="http://example.com/categories/%E6%95%88%E7%8E%87/"/>
    
    
    <category term="技巧" scheme="http://example.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
